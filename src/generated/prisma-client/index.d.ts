// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  gallery: (where?: GalleryWhereInput) => Promise<boolean>;
  link: (where?: LinkWhereInput) => Promise<boolean>;
  notification: (where?: NotificationWhereInput) => Promise<boolean>;
  section: (where?: SectionWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  gallery: (where: GalleryWhereUniqueInput) => GalleryNullablePromise;
  galleries: (args?: {
    where?: GalleryWhereInput;
    orderBy?: GalleryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Gallery>;
  galleriesConnection: (args?: {
    where?: GalleryWhereInput;
    orderBy?: GalleryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GalleryConnectionPromise;
  link: (where: LinkWhereUniqueInput) => LinkNullablePromise;
  links: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Link>;
  linksConnection: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LinkConnectionPromise;
  notification: (
    where: NotificationWhereUniqueInput
  ) => NotificationNullablePromise;
  notifications: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Notification>;
  notificationsConnection: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NotificationConnectionPromise;
  section: (where: SectionWhereUniqueInput) => SectionNullablePromise;
  sections: (args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Section>;
  sectionsConnection: (args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SectionConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  vote: (where: VoteWhereUniqueInput) => VoteNullablePromise;
  votes: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vote>;
  votesConnection: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VoteConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGallery: (data: GalleryCreateInput) => GalleryPromise;
  updateGallery: (args: {
    data: GalleryUpdateInput;
    where: GalleryWhereUniqueInput;
  }) => GalleryPromise;
  updateManyGalleries: (args: {
    data: GalleryUpdateManyMutationInput;
    where?: GalleryWhereInput;
  }) => BatchPayloadPromise;
  upsertGallery: (args: {
    where: GalleryWhereUniqueInput;
    create: GalleryCreateInput;
    update: GalleryUpdateInput;
  }) => GalleryPromise;
  deleteGallery: (where: GalleryWhereUniqueInput) => GalleryPromise;
  deleteManyGalleries: (where?: GalleryWhereInput) => BatchPayloadPromise;
  createLink: (data: LinkCreateInput) => LinkPromise;
  updateLink: (args: {
    data: LinkUpdateInput;
    where: LinkWhereUniqueInput;
  }) => LinkPromise;
  updateManyLinks: (args: {
    data: LinkUpdateManyMutationInput;
    where?: LinkWhereInput;
  }) => BatchPayloadPromise;
  upsertLink: (args: {
    where: LinkWhereUniqueInput;
    create: LinkCreateInput;
    update: LinkUpdateInput;
  }) => LinkPromise;
  deleteLink: (where: LinkWhereUniqueInput) => LinkPromise;
  deleteManyLinks: (where?: LinkWhereInput) => BatchPayloadPromise;
  createNotification: (data: NotificationCreateInput) => NotificationPromise;
  updateNotification: (args: {
    data: NotificationUpdateInput;
    where: NotificationWhereUniqueInput;
  }) => NotificationPromise;
  updateManyNotifications: (args: {
    data: NotificationUpdateManyMutationInput;
    where?: NotificationWhereInput;
  }) => BatchPayloadPromise;
  upsertNotification: (args: {
    where: NotificationWhereUniqueInput;
    create: NotificationCreateInput;
    update: NotificationUpdateInput;
  }) => NotificationPromise;
  deleteNotification: (
    where: NotificationWhereUniqueInput
  ) => NotificationPromise;
  deleteManyNotifications: (
    where?: NotificationWhereInput
  ) => BatchPayloadPromise;
  createSection: (data: SectionCreateInput) => SectionPromise;
  updateSection: (args: {
    data: SectionUpdateInput;
    where: SectionWhereUniqueInput;
  }) => SectionPromise;
  updateManySections: (args: {
    data: SectionUpdateManyMutationInput;
    where?: SectionWhereInput;
  }) => BatchPayloadPromise;
  upsertSection: (args: {
    where: SectionWhereUniqueInput;
    create: SectionCreateInput;
    update: SectionUpdateInput;
  }) => SectionPromise;
  deleteSection: (where: SectionWhereUniqueInput) => SectionPromise;
  deleteManySections: (where?: SectionWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVote: (data: VoteCreateInput) => VotePromise;
  updateVote: (args: {
    data: VoteUpdateInput;
    where: VoteWhereUniqueInput;
  }) => VotePromise;
  upsertVote: (args: {
    where: VoteWhereUniqueInput;
    create: VoteCreateInput;
    update: VoteUpdateInput;
  }) => VotePromise;
  deleteVote: (where: VoteWhereUniqueInput) => VotePromise;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  gallery: (
    where?: GallerySubscriptionWhereInput
  ) => GallerySubscriptionPayloadSubscription;
  link: (
    where?: LinkSubscriptionWhereInput
  ) => LinkSubscriptionPayloadSubscription;
  notification: (
    where?: NotificationSubscriptionWhereInput
  ) => NotificationSubscriptionPayloadSubscription;
  section: (
    where?: SectionSubscriptionWhereInput
  ) => SectionSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GalleryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "summary_ASC"
  | "summary_DESC";

export type LinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "url_ASC"
  | "url_DESC";

export type VoteOrderByInput = "id_ASC" | "id_DESC";

export type SectionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "summary_ASC"
  | "summary_DESC";

export type NotificationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "message_ASC"
  | "message_DESC"
  | "discarded_ASC"
  | "discarded_DESC"
  | "linkTo_ASC"
  | "linkTo_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "password_ASC"
  | "password_DESC"
  | "profileImg_ASC"
  | "profileImg_DESC"
  | "profileBG_ASC"
  | "profileBG_DESC"
  | "summary_ASC"
  | "summary_DESC"
  | "location_ASC"
  | "location_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type GalleryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GalleryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  AND?: Maybe<GalleryWhereInput[] | GalleryWhereInput>;
  OR?: Maybe<GalleryWhereInput[] | GalleryWhereInput>;
  NOT?: Maybe<GalleryWhereInput[] | GalleryWhereInput>;
}

export type LinkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LinkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  postedBy?: Maybe<UserWhereInput>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  AND?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  OR?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  NOT?: Maybe<LinkWhereInput[] | LinkWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  links_every?: Maybe<LinkWhereInput>;
  links_some?: Maybe<LinkWhereInput>;
  links_none?: Maybe<LinkWhereInput>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  profileImg?: Maybe<String>;
  profileImg_not?: Maybe<String>;
  profileImg_in?: Maybe<String[] | String>;
  profileImg_not_in?: Maybe<String[] | String>;
  profileImg_lt?: Maybe<String>;
  profileImg_lte?: Maybe<String>;
  profileImg_gt?: Maybe<String>;
  profileImg_gte?: Maybe<String>;
  profileImg_contains?: Maybe<String>;
  profileImg_not_contains?: Maybe<String>;
  profileImg_starts_with?: Maybe<String>;
  profileImg_not_starts_with?: Maybe<String>;
  profileImg_ends_with?: Maybe<String>;
  profileImg_not_ends_with?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBG_not?: Maybe<String>;
  profileBG_in?: Maybe<String[] | String>;
  profileBG_not_in?: Maybe<String[] | String>;
  profileBG_lt?: Maybe<String>;
  profileBG_lte?: Maybe<String>;
  profileBG_gt?: Maybe<String>;
  profileBG_gte?: Maybe<String>;
  profileBG_contains?: Maybe<String>;
  profileBG_not_contains?: Maybe<String>;
  profileBG_starts_with?: Maybe<String>;
  profileBG_not_starts_with?: Maybe<String>;
  profileBG_ends_with?: Maybe<String>;
  profileBG_not_ends_with?: Maybe<String>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  sections_every?: Maybe<SectionWhereInput>;
  sections_some?: Maybe<SectionWhereInput>;
  sections_none?: Maybe<SectionWhereInput>;
  notifications_every?: Maybe<NotificationWhereInput>;
  notifications_some?: Maybe<NotificationWhereInput>;
  notifications_none?: Maybe<NotificationWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface VoteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  link?: Maybe<LinkWhereInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  OR?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  NOT?: Maybe<VoteWhereInput[] | VoteWhereInput>;
}

export interface SectionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  gallery?: Maybe<GalleryWhereInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<SectionWhereInput[] | SectionWhereInput>;
  OR?: Maybe<SectionWhereInput[] | SectionWhereInput>;
  NOT?: Maybe<SectionWhereInput[] | SectionWhereInput>;
}

export interface NotificationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  discarded_not?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  linkTo_not?: Maybe<String>;
  linkTo_in?: Maybe<String[] | String>;
  linkTo_not_in?: Maybe<String[] | String>;
  linkTo_lt?: Maybe<String>;
  linkTo_lte?: Maybe<String>;
  linkTo_gt?: Maybe<String>;
  linkTo_gte?: Maybe<String>;
  linkTo_contains?: Maybe<String>;
  linkTo_not_contains?: Maybe<String>;
  linkTo_starts_with?: Maybe<String>;
  linkTo_not_starts_with?: Maybe<String>;
  linkTo_ends_with?: Maybe<String>;
  linkTo_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  OR?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  NOT?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
}

export type NotificationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SectionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
}>;

export type VoteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GalleryCreateInput {
  id?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  images?: Maybe<GalleryCreateimagesInput>;
}

export interface GalleryCreateimagesInput {
  set?: Maybe<String[] | String>;
}

export interface GalleryUpdateInput {
  summary?: Maybe<String>;
  images?: Maybe<GalleryUpdateimagesInput>;
}

export interface GalleryUpdateimagesInput {
  set?: Maybe<String[] | String>;
}

export interface GalleryUpdateManyMutationInput {
  summary?: Maybe<String>;
  images?: Maybe<GalleryUpdateimagesInput>;
}

export interface LinkCreateInput {
  id?: Maybe<ID_Input>;
  description: String;
  url: String;
  postedBy?: Maybe<UserCreateOneWithoutLinksInput>;
  votes?: Maybe<VoteCreateManyWithoutLinkInput>;
}

export interface UserCreateOneWithoutLinksInput {
  create?: Maybe<UserCreateWithoutLinksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutLinksInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileBG?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  sections?: Maybe<SectionCreateManyWithoutUserInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
}

export interface VoteCreateManyWithoutUserInput {
  create?: Maybe<VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface VoteCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  link: LinkCreateOneWithoutVotesInput;
}

export interface LinkCreateOneWithoutVotesInput {
  create?: Maybe<LinkCreateWithoutVotesInput>;
  connect?: Maybe<LinkWhereUniqueInput>;
}

export interface LinkCreateWithoutVotesInput {
  id?: Maybe<ID_Input>;
  description: String;
  url: String;
  postedBy?: Maybe<UserCreateOneWithoutLinksInput>;
}

export interface UserCreatekeywordsInput {
  set?: Maybe<String[] | String>;
}

export interface SectionCreateManyWithoutUserInput {
  create?: Maybe<
    SectionCreateWithoutUserInput[] | SectionCreateWithoutUserInput
  >;
  connect?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
}

export interface SectionCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneInput>;
}

export interface GalleryCreateOneInput {
  create?: Maybe<GalleryCreateInput>;
  connect?: Maybe<GalleryWhereUniqueInput>;
}

export interface NotificationCreateManyWithoutUserInput {
  create?: Maybe<
    NotificationCreateWithoutUserInput[] | NotificationCreateWithoutUserInput
  >;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
}

export interface NotificationCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  message: String;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon: String;
}

export interface VoteCreateManyWithoutLinkInput {
  create?: Maybe<VoteCreateWithoutLinkInput[] | VoteCreateWithoutLinkInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface VoteCreateWithoutLinkInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutVotesInput;
}

export interface UserCreateOneWithoutVotesInput {
  create?: Maybe<UserCreateWithoutVotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutVotesInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileBG?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  sections?: Maybe<SectionCreateManyWithoutUserInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
}

export interface LinkCreateManyWithoutPostedByInput {
  create?: Maybe<
    LinkCreateWithoutPostedByInput[] | LinkCreateWithoutPostedByInput
  >;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
}

export interface LinkCreateWithoutPostedByInput {
  id?: Maybe<ID_Input>;
  description: String;
  url: String;
  votes?: Maybe<VoteCreateManyWithoutLinkInput>;
}

export interface LinkUpdateInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
  postedBy?: Maybe<UserUpdateOneWithoutLinksInput>;
  votes?: Maybe<VoteUpdateManyWithoutLinkInput>;
}

export interface UserUpdateOneWithoutLinksInput {
  create?: Maybe<UserCreateWithoutLinksInput>;
  update?: Maybe<UserUpdateWithoutLinksDataInput>;
  upsert?: Maybe<UserUpsertWithoutLinksInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutLinksDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileBG?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutUserInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
}

export interface VoteUpdateManyWithoutUserInput {
  create?: Maybe<VoteCreateWithoutUserInput[] | VoteCreateWithoutUserInput>;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutUserInput[]
    | VoteUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutUserInput[]
    | VoteUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutUserDataInput;
}

export interface VoteUpdateWithoutUserDataInput {
  link?: Maybe<LinkUpdateOneRequiredWithoutVotesInput>;
}

export interface LinkUpdateOneRequiredWithoutVotesInput {
  create?: Maybe<LinkCreateWithoutVotesInput>;
  update?: Maybe<LinkUpdateWithoutVotesDataInput>;
  upsert?: Maybe<LinkUpsertWithoutVotesInput>;
  connect?: Maybe<LinkWhereUniqueInput>;
}

export interface LinkUpdateWithoutVotesDataInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
  postedBy?: Maybe<UserUpdateOneWithoutLinksInput>;
}

export interface LinkUpsertWithoutVotesInput {
  update: LinkUpdateWithoutVotesDataInput;
  create: LinkCreateWithoutVotesInput;
}

export interface VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutUserDataInput;
  create: VoteCreateWithoutUserInput;
}

export interface VoteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  OR?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  NOT?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface UserUpdatekeywordsInput {
  set?: Maybe<String[] | String>;
}

export interface SectionUpdateManyWithoutUserInput {
  create?: Maybe<
    SectionCreateWithoutUserInput[] | SectionCreateWithoutUserInput
  >;
  delete?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
  connect?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
  set?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
  disconnect?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
  update?: Maybe<
    | SectionUpdateWithWhereUniqueWithoutUserInput[]
    | SectionUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | SectionUpsertWithWhereUniqueWithoutUserInput[]
    | SectionUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<SectionScalarWhereInput[] | SectionScalarWhereInput>;
  updateMany?: Maybe<
    | SectionUpdateManyWithWhereNestedInput[]
    | SectionUpdateManyWithWhereNestedInput
  >;
}

export interface SectionUpdateWithWhereUniqueWithoutUserInput {
  where: SectionWhereUniqueInput;
  data: SectionUpdateWithoutUserDataInput;
}

export interface SectionUpdateWithoutUserDataInput {
  summary?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneInput>;
}

export interface GalleryUpdateOneInput {
  create?: Maybe<GalleryCreateInput>;
  update?: Maybe<GalleryUpdateDataInput>;
  upsert?: Maybe<GalleryUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GalleryWhereUniqueInput>;
}

export interface GalleryUpdateDataInput {
  summary?: Maybe<String>;
  images?: Maybe<GalleryUpdateimagesInput>;
}

export interface GalleryUpsertNestedInput {
  update: GalleryUpdateDataInput;
  create: GalleryCreateInput;
}

export interface SectionUpsertWithWhereUniqueWithoutUserInput {
  where: SectionWhereUniqueInput;
  update: SectionUpdateWithoutUserDataInput;
  create: SectionCreateWithoutUserInput;
}

export interface SectionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  AND?: Maybe<SectionScalarWhereInput[] | SectionScalarWhereInput>;
  OR?: Maybe<SectionScalarWhereInput[] | SectionScalarWhereInput>;
  NOT?: Maybe<SectionScalarWhereInput[] | SectionScalarWhereInput>;
}

export interface SectionUpdateManyWithWhereNestedInput {
  where: SectionScalarWhereInput;
  data: SectionUpdateManyDataInput;
}

export interface SectionUpdateManyDataInput {
  summary?: Maybe<String>;
}

export interface NotificationUpdateManyWithoutUserInput {
  create?: Maybe<
    NotificationCreateWithoutUserInput[] | NotificationCreateWithoutUserInput
  >;
  delete?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  set?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  disconnect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  update?: Maybe<
    | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    | NotificationUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    | NotificationUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    NotificationScalarWhereInput[] | NotificationScalarWhereInput
  >;
  updateMany?: Maybe<
    | NotificationUpdateManyWithWhereNestedInput[]
    | NotificationUpdateManyWithWhereNestedInput
  >;
}

export interface NotificationUpdateWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput;
  data: NotificationUpdateWithoutUserDataInput;
}

export interface NotificationUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface NotificationUpsertWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput;
  update: NotificationUpdateWithoutUserDataInput;
  create: NotificationCreateWithoutUserInput;
}

export interface NotificationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  discarded_not?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  linkTo_not?: Maybe<String>;
  linkTo_in?: Maybe<String[] | String>;
  linkTo_not_in?: Maybe<String[] | String>;
  linkTo_lt?: Maybe<String>;
  linkTo_lte?: Maybe<String>;
  linkTo_gt?: Maybe<String>;
  linkTo_gte?: Maybe<String>;
  linkTo_contains?: Maybe<String>;
  linkTo_not_contains?: Maybe<String>;
  linkTo_starts_with?: Maybe<String>;
  linkTo_not_starts_with?: Maybe<String>;
  linkTo_ends_with?: Maybe<String>;
  linkTo_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  OR?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  NOT?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
}

export interface NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput;
  data: NotificationUpdateManyDataInput;
}

export interface NotificationUpdateManyDataInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface UserUpsertWithoutLinksInput {
  update: UserUpdateWithoutLinksDataInput;
  create: UserCreateWithoutLinksInput;
}

export interface VoteUpdateManyWithoutLinkInput {
  create?: Maybe<VoteCreateWithoutLinkInput[] | VoteCreateWithoutLinkInput>;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutLinkInput[]
    | VoteUpdateWithWhereUniqueWithoutLinkInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutLinkInput[]
    | VoteUpsertWithWhereUniqueWithoutLinkInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface VoteUpdateWithWhereUniqueWithoutLinkInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutLinkDataInput;
}

export interface VoteUpdateWithoutLinkDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutVotesInput>;
}

export interface UserUpdateOneRequiredWithoutVotesInput {
  create?: Maybe<UserCreateWithoutVotesInput>;
  update?: Maybe<UserUpdateWithoutVotesDataInput>;
  upsert?: Maybe<UserUpsertWithoutVotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutVotesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileBG?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutUserInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
}

export interface LinkUpdateManyWithoutPostedByInput {
  create?: Maybe<
    LinkCreateWithoutPostedByInput[] | LinkCreateWithoutPostedByInput
  >;
  delete?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  set?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  disconnect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  update?: Maybe<
    | LinkUpdateWithWhereUniqueWithoutPostedByInput[]
    | LinkUpdateWithWhereUniqueWithoutPostedByInput
  >;
  upsert?: Maybe<
    | LinkUpsertWithWhereUniqueWithoutPostedByInput[]
    | LinkUpsertWithWhereUniqueWithoutPostedByInput
  >;
  deleteMany?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  updateMany?: Maybe<
    LinkUpdateManyWithWhereNestedInput[] | LinkUpdateManyWithWhereNestedInput
  >;
}

export interface LinkUpdateWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput;
  data: LinkUpdateWithoutPostedByDataInput;
}

export interface LinkUpdateWithoutPostedByDataInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
  votes?: Maybe<VoteUpdateManyWithoutLinkInput>;
}

export interface LinkUpsertWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput;
  update: LinkUpdateWithoutPostedByDataInput;
  create: LinkCreateWithoutPostedByInput;
}

export interface LinkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  OR?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  NOT?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
}

export interface LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput;
  data: LinkUpdateManyDataInput;
}

export interface LinkUpdateManyDataInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
}

export interface UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput;
  create: UserCreateWithoutVotesInput;
}

export interface VoteUpsertWithWhereUniqueWithoutLinkInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutLinkDataInput;
  create: VoteCreateWithoutLinkInput;
}

export interface LinkUpdateManyMutationInput {
  description?: Maybe<String>;
  url?: Maybe<String>;
}

export interface NotificationCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  message: String;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon: String;
  user: UserCreateOneWithoutNotificationsInput;
}

export interface UserCreateOneWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutNotificationsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileBG?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  sections?: Maybe<SectionCreateManyWithoutUserInput>;
}

export interface NotificationUpdateInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutNotificationsInput>;
}

export interface UserUpdateOneRequiredWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  update?: Maybe<UserUpdateWithoutNotificationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutNotificationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutNotificationsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileBG?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutNotificationsInput {
  update: UserUpdateWithoutNotificationsDataInput;
  create: UserCreateWithoutNotificationsInput;
}

export interface NotificationUpdateManyMutationInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface SectionCreateInput {
  id?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneInput>;
  user: UserCreateOneWithoutSectionsInput;
}

export interface UserCreateOneWithoutSectionsInput {
  create?: Maybe<UserCreateWithoutSectionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutSectionsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileBG?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
}

export interface SectionUpdateInput {
  summary?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutSectionsInput>;
}

export interface UserUpdateOneRequiredWithoutSectionsInput {
  create?: Maybe<UserCreateWithoutSectionsInput>;
  update?: Maybe<UserUpdateWithoutSectionsDataInput>;
  upsert?: Maybe<UserUpsertWithoutSectionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutSectionsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileBG?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutSectionsInput {
  update: UserUpdateWithoutSectionsDataInput;
  create: UserCreateWithoutSectionsInput;
}

export interface SectionUpdateManyMutationInput {
  summary?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  links?: Maybe<LinkCreateManyWithoutPostedByInput>;
  votes?: Maybe<VoteCreateManyWithoutUserInput>;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileBG?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  sections?: Maybe<SectionCreateManyWithoutUserInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  links?: Maybe<LinkUpdateManyWithoutPostedByInput>;
  votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileBG?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutUserInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileBG?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
}

export interface VoteCreateInput {
  id?: Maybe<ID_Input>;
  link: LinkCreateOneWithoutVotesInput;
  user: UserCreateOneWithoutVotesInput;
}

export interface VoteUpdateInput {
  link?: Maybe<LinkUpdateOneRequiredWithoutVotesInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutVotesInput>;
}

export interface GallerySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GalleryWhereInput>;
  AND?: Maybe<GallerySubscriptionWhereInput[] | GallerySubscriptionWhereInput>;
  OR?: Maybe<GallerySubscriptionWhereInput[] | GallerySubscriptionWhereInput>;
  NOT?: Maybe<GallerySubscriptionWhereInput[] | GallerySubscriptionWhereInput>;
}

export interface LinkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LinkWhereInput>;
  AND?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  OR?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  NOT?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
}

export interface NotificationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NotificationWhereInput>;
  AND?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  OR?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
}

export interface SectionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SectionWhereInput>;
  AND?: Maybe<SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput>;
  OR?: Maybe<SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput>;
  NOT?: Maybe<SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VoteWhereInput>;
  AND?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  OR?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  NOT?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Gallery {
  id: ID_Output;
  summary?: String;
  images: String[];
}

export interface GalleryPromise extends Promise<Gallery>, Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  images: () => Promise<String[]>;
}

export interface GallerySubscription
  extends Promise<AsyncIterator<Gallery>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  summary: () => Promise<AsyncIterator<String>>;
  images: () => Promise<AsyncIterator<String[]>>;
}

export interface GalleryNullablePromise
  extends Promise<Gallery | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  images: () => Promise<String[]>;
}

export interface GalleryConnection {
  pageInfo: PageInfo;
  edges: GalleryEdge[];
}

export interface GalleryConnectionPromise
  extends Promise<GalleryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GalleryEdge>>() => T;
  aggregate: <T = AggregateGalleryPromise>() => T;
}

export interface GalleryConnectionSubscription
  extends Promise<AsyncIterator<GalleryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GalleryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGallerySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface GalleryEdge {
  node: Gallery;
  cursor: String;
}

export interface GalleryEdgePromise extends Promise<GalleryEdge>, Fragmentable {
  node: <T = GalleryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GalleryEdgeSubscription
  extends Promise<AsyncIterator<GalleryEdge>>,
    Fragmentable {
  node: <T = GallerySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGallery {
  count: Int;
}

export interface AggregateGalleryPromise
  extends Promise<AggregateGallery>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGallerySubscription
  extends Promise<AsyncIterator<AggregateGallery>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Link {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LinkPromise extends Promise<Link>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LinkSubscription
  extends Promise<AsyncIterator<Link>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  postedBy: <T = UserSubscription>() => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LinkNullablePromise
  extends Promise<Link | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  resetToken?: String;
  password: String;
  keywords: String[];
  profileImg?: String;
  profileBG?: String;
  summary?: String;
  location?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  resetToken: () => Promise<String>;
  password: () => Promise<String>;
  links: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  keywords: () => Promise<String[]>;
  profileImg: () => Promise<String>;
  profileBG: () => Promise<String>;
  summary: () => Promise<String>;
  location: () => Promise<String>;
  sections: <T = FragmentableArray<Section>>(args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  links: <T = Promise<AsyncIterator<LinkSubscription>>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  keywords: () => Promise<AsyncIterator<String[]>>;
  profileImg: () => Promise<AsyncIterator<String>>;
  profileBG: () => Promise<AsyncIterator<String>>;
  summary: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  sections: <T = Promise<AsyncIterator<SectionSubscription>>>(args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = Promise<AsyncIterator<NotificationSubscription>>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  resetToken: () => Promise<String>;
  password: () => Promise<String>;
  links: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  keywords: () => Promise<String[]>;
  profileImg: () => Promise<String>;
  profileBG: () => Promise<String>;
  summary: () => Promise<String>;
  location: () => Promise<String>;
  sections: <T = FragmentableArray<Section>>(args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Vote {
  id: ID_Output;
}

export interface VotePromise extends Promise<Vote>, Fragmentable {
  id: () => Promise<ID_Output>;
  link: <T = LinkPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<Vote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  link: <T = LinkSubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface VoteNullablePromise
  extends Promise<Vote | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  link: <T = LinkPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface Section {
  id: ID_Output;
  summary?: String;
}

export interface SectionPromise extends Promise<Section>, Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  gallery: <T = GalleryPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface SectionSubscription
  extends Promise<AsyncIterator<Section>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  summary: () => Promise<AsyncIterator<String>>;
  gallery: <T = GallerySubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface SectionNullablePromise
  extends Promise<Section | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  gallery: <T = GalleryPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface Notification {
  id: ID_Output;
  title: String;
  message: String;
  discarded?: Boolean;
  linkTo?: String;
  icon: String;
  createdAt: DateTimeOutput;
}

export interface NotificationPromise
  extends Promise<Notification>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  message: () => Promise<String>;
  discarded: () => Promise<Boolean>;
  linkTo: () => Promise<String>;
  icon: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
}

export interface NotificationSubscription
  extends Promise<AsyncIterator<Notification>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  message: () => Promise<AsyncIterator<String>>;
  discarded: () => Promise<AsyncIterator<Boolean>>;
  linkTo: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
}

export interface NotificationNullablePromise
  extends Promise<Notification | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  message: () => Promise<String>;
  discarded: () => Promise<Boolean>;
  linkTo: () => Promise<String>;
  icon: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
}

export interface LinkConnection {
  pageInfo: PageInfo;
  edges: LinkEdge[];
}

export interface LinkConnectionPromise
  extends Promise<LinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LinkEdge>>() => T;
  aggregate: <T = AggregateLinkPromise>() => T;
}

export interface LinkConnectionSubscription
  extends Promise<AsyncIterator<LinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLinkSubscription>() => T;
}

export interface LinkEdge {
  node: Link;
  cursor: String;
}

export interface LinkEdgePromise extends Promise<LinkEdge>, Fragmentable {
  node: <T = LinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LinkEdgeSubscription
  extends Promise<AsyncIterator<LinkEdge>>,
    Fragmentable {
  node: <T = LinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLink {
  count: Int;
}

export interface AggregateLinkPromise
  extends Promise<AggregateLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLinkSubscription
  extends Promise<AsyncIterator<AggregateLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NotificationConnection {
  pageInfo: PageInfo;
  edges: NotificationEdge[];
}

export interface NotificationConnectionPromise
  extends Promise<NotificationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NotificationEdge>>() => T;
  aggregate: <T = AggregateNotificationPromise>() => T;
}

export interface NotificationConnectionSubscription
  extends Promise<AsyncIterator<NotificationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NotificationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNotificationSubscription>() => T;
}

export interface NotificationEdge {
  node: Notification;
  cursor: String;
}

export interface NotificationEdgePromise
  extends Promise<NotificationEdge>,
    Fragmentable {
  node: <T = NotificationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NotificationEdgeSubscription
  extends Promise<AsyncIterator<NotificationEdge>>,
    Fragmentable {
  node: <T = NotificationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNotification {
  count: Int;
}

export interface AggregateNotificationPromise
  extends Promise<AggregateNotification>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNotificationSubscription
  extends Promise<AsyncIterator<AggregateNotification>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SectionConnection {
  pageInfo: PageInfo;
  edges: SectionEdge[];
}

export interface SectionConnectionPromise
  extends Promise<SectionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SectionEdge>>() => T;
  aggregate: <T = AggregateSectionPromise>() => T;
}

export interface SectionConnectionSubscription
  extends Promise<AsyncIterator<SectionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SectionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSectionSubscription>() => T;
}

export interface SectionEdge {
  node: Section;
  cursor: String;
}

export interface SectionEdgePromise extends Promise<SectionEdge>, Fragmentable {
  node: <T = SectionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SectionEdgeSubscription
  extends Promise<AsyncIterator<SectionEdge>>,
    Fragmentable {
  node: <T = SectionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSection {
  count: Int;
}

export interface AggregateSectionPromise
  extends Promise<AggregateSection>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSectionSubscription
  extends Promise<AsyncIterator<AggregateSection>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VoteConnection {
  pageInfo: PageInfo;
  edges: VoteEdge[];
}

export interface VoteConnectionPromise
  extends Promise<VoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoteEdge>>() => T;
  aggregate: <T = AggregateVotePromise>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

export interface VoteEdge {
  node: Vote;
  cursor: String;
}

export interface VoteEdgePromise extends Promise<VoteEdge>, Fragmentable {
  node: <T = VotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdge>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVote {
  count: Int;
}

export interface AggregateVotePromise
  extends Promise<AggregateVote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface GallerySubscriptionPayload {
  mutation: MutationType;
  node: Gallery;
  updatedFields: String[];
  previousValues: GalleryPreviousValues;
}

export interface GallerySubscriptionPayloadPromise
  extends Promise<GallerySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GalleryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GalleryPreviousValuesPromise>() => T;
}

export interface GallerySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GallerySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GallerySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GalleryPreviousValuesSubscription>() => T;
}

export interface GalleryPreviousValues {
  id: ID_Output;
  summary?: String;
  images: String[];
}

export interface GalleryPreviousValuesPromise
  extends Promise<GalleryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  images: () => Promise<String[]>;
}

export interface GalleryPreviousValuesSubscription
  extends Promise<AsyncIterator<GalleryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  summary: () => Promise<AsyncIterator<String>>;
  images: () => Promise<AsyncIterator<String[]>>;
}

export interface LinkSubscriptionPayload {
  mutation: MutationType;
  node: Link;
  updatedFields: String[];
  previousValues: LinkPreviousValues;
}

export interface LinkSubscriptionPayloadPromise
  extends Promise<LinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LinkPreviousValuesPromise>() => T;
}

export interface LinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LinkPreviousValuesSubscription>() => T;
}

export interface LinkPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LinkPreviousValuesPromise
  extends Promise<LinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface LinkPreviousValuesSubscription
  extends Promise<AsyncIterator<LinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface NotificationSubscriptionPayload {
  mutation: MutationType;
  node: Notification;
  updatedFields: String[];
  previousValues: NotificationPreviousValues;
}

export interface NotificationSubscriptionPayloadPromise
  extends Promise<NotificationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotificationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotificationPreviousValuesPromise>() => T;
}

export interface NotificationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NotificationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NotificationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotificationPreviousValuesSubscription>() => T;
}

export interface NotificationPreviousValues {
  id: ID_Output;
  title: String;
  message: String;
  discarded?: Boolean;
  linkTo?: String;
  icon: String;
  createdAt: DateTimeOutput;
}

export interface NotificationPreviousValuesPromise
  extends Promise<NotificationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  message: () => Promise<String>;
  discarded: () => Promise<Boolean>;
  linkTo: () => Promise<String>;
  icon: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface NotificationPreviousValuesSubscription
  extends Promise<AsyncIterator<NotificationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  message: () => Promise<AsyncIterator<String>>;
  discarded: () => Promise<AsyncIterator<Boolean>>;
  linkTo: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SectionSubscriptionPayload {
  mutation: MutationType;
  node: Section;
  updatedFields: String[];
  previousValues: SectionPreviousValues;
}

export interface SectionSubscriptionPayloadPromise
  extends Promise<SectionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SectionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SectionPreviousValuesPromise>() => T;
}

export interface SectionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SectionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SectionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SectionPreviousValuesSubscription>() => T;
}

export interface SectionPreviousValues {
  id: ID_Output;
  summary?: String;
}

export interface SectionPreviousValuesPromise
  extends Promise<SectionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
}

export interface SectionPreviousValuesSubscription
  extends Promise<AsyncIterator<SectionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  summary: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  resetToken?: String;
  password: String;
  keywords: String[];
  profileImg?: String;
  profileBG?: String;
  summary?: String;
  location?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  resetToken: () => Promise<String>;
  password: () => Promise<String>;
  keywords: () => Promise<String[]>;
  profileImg: () => Promise<String>;
  profileBG: () => Promise<String>;
  summary: () => Promise<String>;
  location: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  keywords: () => Promise<AsyncIterator<String[]>>;
  profileImg: () => Promise<AsyncIterator<String>>;
  profileBG: () => Promise<AsyncIterator<String>>;
  summary: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
}

export interface VoteSubscriptionPayload {
  mutation: MutationType;
  node: Vote;
  updatedFields: String[];
  previousValues: VotePreviousValues;
}

export interface VoteSubscriptionPayloadPromise
  extends Promise<VoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValuesPromise>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface VotePreviousValues {
  id: ID_Output;
}

export interface VotePreviousValuesPromise
  extends Promise<VotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Link",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Notification",
    embedded: false
  },
  {
    name: "Section",
    embedded: false
  },
  {
    name: "Gallery",
    embedded: false
  },
  {
    name: "Vote",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
