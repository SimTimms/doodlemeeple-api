// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  contract: (where?: ContractWhereInput) => Promise<boolean>;
  conversation: (where?: ConversationWhereInput) => Promise<boolean>;
  count: (where?: CountWhereInput) => Promise<boolean>;
  gallery: (where?: GalleryWhereInput) => Promise<boolean>;
  galleryImage: (where?: GalleryImageWhereInput) => Promise<boolean>;
  game: (where?: GameWhereInput) => Promise<boolean>;
  invite: (where?: InviteWhereInput) => Promise<boolean>;
  job: (where?: JobWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  notableProjects: (where?: NotableProjectsWhereInput) => Promise<boolean>;
  notification: (where?: NotificationWhereInput) => Promise<boolean>;
  paymentTerm: (where?: PaymentTermWhereInput) => Promise<boolean>;
  section: (where?: SectionWhereInput) => Promise<boolean>;
  testimonial: (where?: TestimonialWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  contract: (where: ContractWhereUniqueInput) => ContractNullablePromise;
  contracts: (args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Contract>;
  contractsConnection: (args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContractConnectionPromise;
  conversation: (
    where: ConversationWhereUniqueInput
  ) => ConversationNullablePromise;
  conversations: (args?: {
    where?: ConversationWhereInput;
    orderBy?: ConversationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Conversation>;
  conversationsConnection: (args?: {
    where?: ConversationWhereInput;
    orderBy?: ConversationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ConversationConnectionPromise;
  count: (where: CountWhereUniqueInput) => CountNullablePromise;
  counts: (args?: {
    where?: CountWhereInput;
    orderBy?: CountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Count>;
  countsConnection: (args?: {
    where?: CountWhereInput;
    orderBy?: CountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CountConnectionPromise;
  gallery: (where: GalleryWhereUniqueInput) => GalleryNullablePromise;
  galleries: (args?: {
    where?: GalleryWhereInput;
    orderBy?: GalleryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Gallery>;
  galleriesConnection: (args?: {
    where?: GalleryWhereInput;
    orderBy?: GalleryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GalleryConnectionPromise;
  galleryImage: (
    where: GalleryImageWhereUniqueInput
  ) => GalleryImageNullablePromise;
  galleryImages: (args?: {
    where?: GalleryImageWhereInput;
    orderBy?: GalleryImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GalleryImage>;
  galleryImagesConnection: (args?: {
    where?: GalleryImageWhereInput;
    orderBy?: GalleryImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GalleryImageConnectionPromise;
  game: (where: GameWhereUniqueInput) => GameNullablePromise;
  games: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Game>;
  gamesConnection: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GameConnectionPromise;
  invite: (where: InviteWhereUniqueInput) => InviteNullablePromise;
  invites: (args?: {
    where?: InviteWhereInput;
    orderBy?: InviteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Invite>;
  invitesConnection: (args?: {
    where?: InviteWhereInput;
    orderBy?: InviteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InviteConnectionPromise;
  job: (where: JobWhereUniqueInput) => JobNullablePromise;
  jobs: (args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Job>;
  jobsConnection: (args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => JobConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  notableProjects: (
    where: NotableProjectsWhereUniqueInput
  ) => NotableProjectsNullablePromise;
  notableProjectses: (args?: {
    where?: NotableProjectsWhereInput;
    orderBy?: NotableProjectsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<NotableProjects>;
  notableProjectsesConnection: (args?: {
    where?: NotableProjectsWhereInput;
    orderBy?: NotableProjectsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NotableProjectsConnectionPromise;
  notification: (
    where: NotificationWhereUniqueInput
  ) => NotificationNullablePromise;
  notifications: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Notification>;
  notificationsConnection: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NotificationConnectionPromise;
  paymentTerm: (
    where: PaymentTermWhereUniqueInput
  ) => PaymentTermNullablePromise;
  paymentTerms: (args?: {
    where?: PaymentTermWhereInput;
    orderBy?: PaymentTermOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PaymentTerm>;
  paymentTermsConnection: (args?: {
    where?: PaymentTermWhereInput;
    orderBy?: PaymentTermOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PaymentTermConnectionPromise;
  section: (where: SectionWhereUniqueInput) => SectionNullablePromise;
  sections: (args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Section>;
  sectionsConnection: (args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SectionConnectionPromise;
  testimonial: (
    where: TestimonialWhereUniqueInput
  ) => TestimonialNullablePromise;
  testimonials: (args?: {
    where?: TestimonialWhereInput;
    orderBy?: TestimonialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Testimonial>;
  testimonialsConnection: (args?: {
    where?: TestimonialWhereInput;
    orderBy?: TestimonialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TestimonialConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createContract: (data: ContractCreateInput) => ContractPromise;
  updateContract: (args: {
    data: ContractUpdateInput;
    where: ContractWhereUniqueInput;
  }) => ContractPromise;
  updateManyContracts: (args: {
    data: ContractUpdateManyMutationInput;
    where?: ContractWhereInput;
  }) => BatchPayloadPromise;
  upsertContract: (args: {
    where: ContractWhereUniqueInput;
    create: ContractCreateInput;
    update: ContractUpdateInput;
  }) => ContractPromise;
  deleteContract: (where: ContractWhereUniqueInput) => ContractPromise;
  deleteManyContracts: (where?: ContractWhereInput) => BatchPayloadPromise;
  createConversation: (data: ConversationCreateInput) => ConversationPromise;
  updateConversation: (args: {
    data: ConversationUpdateInput;
    where: ConversationWhereUniqueInput;
  }) => ConversationPromise;
  updateManyConversations: (args: {
    data: ConversationUpdateManyMutationInput;
    where?: ConversationWhereInput;
  }) => BatchPayloadPromise;
  upsertConversation: (args: {
    where: ConversationWhereUniqueInput;
    create: ConversationCreateInput;
    update: ConversationUpdateInput;
  }) => ConversationPromise;
  deleteConversation: (
    where: ConversationWhereUniqueInput
  ) => ConversationPromise;
  deleteManyConversations: (
    where?: ConversationWhereInput
  ) => BatchPayloadPromise;
  createCount: (data: CountCreateInput) => CountPromise;
  updateCount: (args: {
    data: CountUpdateInput;
    where: CountWhereUniqueInput;
  }) => CountPromise;
  updateManyCounts: (args: {
    data: CountUpdateManyMutationInput;
    where?: CountWhereInput;
  }) => BatchPayloadPromise;
  upsertCount: (args: {
    where: CountWhereUniqueInput;
    create: CountCreateInput;
    update: CountUpdateInput;
  }) => CountPromise;
  deleteCount: (where: CountWhereUniqueInput) => CountPromise;
  deleteManyCounts: (where?: CountWhereInput) => BatchPayloadPromise;
  createGallery: (data: GalleryCreateInput) => GalleryPromise;
  updateGallery: (args: {
    data: GalleryUpdateInput;
    where: GalleryWhereUniqueInput;
  }) => GalleryPromise;
  updateManyGalleries: (args: {
    data: GalleryUpdateManyMutationInput;
    where?: GalleryWhereInput;
  }) => BatchPayloadPromise;
  upsertGallery: (args: {
    where: GalleryWhereUniqueInput;
    create: GalleryCreateInput;
    update: GalleryUpdateInput;
  }) => GalleryPromise;
  deleteGallery: (where: GalleryWhereUniqueInput) => GalleryPromise;
  deleteManyGalleries: (where?: GalleryWhereInput) => BatchPayloadPromise;
  createGalleryImage: (data: GalleryImageCreateInput) => GalleryImagePromise;
  updateGalleryImage: (args: {
    data: GalleryImageUpdateInput;
    where: GalleryImageWhereUniqueInput;
  }) => GalleryImagePromise;
  updateManyGalleryImages: (args: {
    data: GalleryImageUpdateManyMutationInput;
    where?: GalleryImageWhereInput;
  }) => BatchPayloadPromise;
  upsertGalleryImage: (args: {
    where: GalleryImageWhereUniqueInput;
    create: GalleryImageCreateInput;
    update: GalleryImageUpdateInput;
  }) => GalleryImagePromise;
  deleteGalleryImage: (
    where: GalleryImageWhereUniqueInput
  ) => GalleryImagePromise;
  deleteManyGalleryImages: (
    where?: GalleryImageWhereInput
  ) => BatchPayloadPromise;
  createGame: (data: GameCreateInput) => GamePromise;
  updateGame: (args: {
    data: GameUpdateInput;
    where: GameWhereUniqueInput;
  }) => GamePromise;
  updateManyGames: (args: {
    data: GameUpdateManyMutationInput;
    where?: GameWhereInput;
  }) => BatchPayloadPromise;
  upsertGame: (args: {
    where: GameWhereUniqueInput;
    create: GameCreateInput;
    update: GameUpdateInput;
  }) => GamePromise;
  deleteGame: (where: GameWhereUniqueInput) => GamePromise;
  deleteManyGames: (where?: GameWhereInput) => BatchPayloadPromise;
  createInvite: (data: InviteCreateInput) => InvitePromise;
  updateInvite: (args: {
    data: InviteUpdateInput;
    where: InviteWhereUniqueInput;
  }) => InvitePromise;
  updateManyInvites: (args: {
    data: InviteUpdateManyMutationInput;
    where?: InviteWhereInput;
  }) => BatchPayloadPromise;
  upsertInvite: (args: {
    where: InviteWhereUniqueInput;
    create: InviteCreateInput;
    update: InviteUpdateInput;
  }) => InvitePromise;
  deleteInvite: (where: InviteWhereUniqueInput) => InvitePromise;
  deleteManyInvites: (where?: InviteWhereInput) => BatchPayloadPromise;
  createJob: (data: JobCreateInput) => JobPromise;
  updateJob: (args: {
    data: JobUpdateInput;
    where: JobWhereUniqueInput;
  }) => JobPromise;
  updateManyJobs: (args: {
    data: JobUpdateManyMutationInput;
    where?: JobWhereInput;
  }) => BatchPayloadPromise;
  upsertJob: (args: {
    where: JobWhereUniqueInput;
    create: JobCreateInput;
    update: JobUpdateInput;
  }) => JobPromise;
  deleteJob: (where: JobWhereUniqueInput) => JobPromise;
  deleteManyJobs: (where?: JobWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createNotableProjects: (
    data: NotableProjectsCreateInput
  ) => NotableProjectsPromise;
  updateNotableProjects: (args: {
    data: NotableProjectsUpdateInput;
    where: NotableProjectsWhereUniqueInput;
  }) => NotableProjectsPromise;
  updateManyNotableProjectses: (args: {
    data: NotableProjectsUpdateManyMutationInput;
    where?: NotableProjectsWhereInput;
  }) => BatchPayloadPromise;
  upsertNotableProjects: (args: {
    where: NotableProjectsWhereUniqueInput;
    create: NotableProjectsCreateInput;
    update: NotableProjectsUpdateInput;
  }) => NotableProjectsPromise;
  deleteNotableProjects: (
    where: NotableProjectsWhereUniqueInput
  ) => NotableProjectsPromise;
  deleteManyNotableProjectses: (
    where?: NotableProjectsWhereInput
  ) => BatchPayloadPromise;
  createNotification: (data: NotificationCreateInput) => NotificationPromise;
  updateNotification: (args: {
    data: NotificationUpdateInput;
    where: NotificationWhereUniqueInput;
  }) => NotificationPromise;
  updateManyNotifications: (args: {
    data: NotificationUpdateManyMutationInput;
    where?: NotificationWhereInput;
  }) => BatchPayloadPromise;
  upsertNotification: (args: {
    where: NotificationWhereUniqueInput;
    create: NotificationCreateInput;
    update: NotificationUpdateInput;
  }) => NotificationPromise;
  deleteNotification: (
    where: NotificationWhereUniqueInput
  ) => NotificationPromise;
  deleteManyNotifications: (
    where?: NotificationWhereInput
  ) => BatchPayloadPromise;
  createPaymentTerm: (data: PaymentTermCreateInput) => PaymentTermPromise;
  updatePaymentTerm: (args: {
    data: PaymentTermUpdateInput;
    where: PaymentTermWhereUniqueInput;
  }) => PaymentTermPromise;
  updateManyPaymentTerms: (args: {
    data: PaymentTermUpdateManyMutationInput;
    where?: PaymentTermWhereInput;
  }) => BatchPayloadPromise;
  upsertPaymentTerm: (args: {
    where: PaymentTermWhereUniqueInput;
    create: PaymentTermCreateInput;
    update: PaymentTermUpdateInput;
  }) => PaymentTermPromise;
  deletePaymentTerm: (where: PaymentTermWhereUniqueInput) => PaymentTermPromise;
  deleteManyPaymentTerms: (
    where?: PaymentTermWhereInput
  ) => BatchPayloadPromise;
  createSection: (data: SectionCreateInput) => SectionPromise;
  updateSection: (args: {
    data: SectionUpdateInput;
    where: SectionWhereUniqueInput;
  }) => SectionPromise;
  updateManySections: (args: {
    data: SectionUpdateManyMutationInput;
    where?: SectionWhereInput;
  }) => BatchPayloadPromise;
  upsertSection: (args: {
    where: SectionWhereUniqueInput;
    create: SectionCreateInput;
    update: SectionUpdateInput;
  }) => SectionPromise;
  deleteSection: (where: SectionWhereUniqueInput) => SectionPromise;
  deleteManySections: (where?: SectionWhereInput) => BatchPayloadPromise;
  createTestimonial: (data: TestimonialCreateInput) => TestimonialPromise;
  updateTestimonial: (args: {
    data: TestimonialUpdateInput;
    where: TestimonialWhereUniqueInput;
  }) => TestimonialPromise;
  updateManyTestimonials: (args: {
    data: TestimonialUpdateManyMutationInput;
    where?: TestimonialWhereInput;
  }) => BatchPayloadPromise;
  upsertTestimonial: (args: {
    where: TestimonialWhereUniqueInput;
    create: TestimonialCreateInput;
    update: TestimonialUpdateInput;
  }) => TestimonialPromise;
  deleteTestimonial: (where: TestimonialWhereUniqueInput) => TestimonialPromise;
  deleteManyTestimonials: (
    where?: TestimonialWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  contract: (
    where?: ContractSubscriptionWhereInput
  ) => ContractSubscriptionPayloadSubscription;
  conversation: (
    where?: ConversationSubscriptionWhereInput
  ) => ConversationSubscriptionPayloadSubscription;
  count: (
    where?: CountSubscriptionWhereInput
  ) => CountSubscriptionPayloadSubscription;
  gallery: (
    where?: GallerySubscriptionWhereInput
  ) => GallerySubscriptionPayloadSubscription;
  galleryImage: (
    where?: GalleryImageSubscriptionWhereInput
  ) => GalleryImageSubscriptionPayloadSubscription;
  game: (
    where?: GameSubscriptionWhereInput
  ) => GameSubscriptionPayloadSubscription;
  invite: (
    where?: InviteSubscriptionWhereInput
  ) => InviteSubscriptionPayloadSubscription;
  job: (
    where?: JobSubscriptionWhereInput
  ) => JobSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  notableProjects: (
    where?: NotableProjectsSubscriptionWhereInput
  ) => NotableProjectsSubscriptionPayloadSubscription;
  notification: (
    where?: NotificationSubscriptionWhereInput
  ) => NotificationSubscriptionPayloadSubscription;
  paymentTerm: (
    where?: PaymentTermSubscriptionWhereInput
  ) => PaymentTermSubscriptionPayloadSubscription;
  section: (
    where?: SectionSubscriptionWhereInput
  ) => SectionSubscriptionPayloadSubscription;
  testimonial: (
    where?: TestimonialSubscriptionWhereInput
  ) => TestimonialSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PaymentTermOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "percent_ASC"
  | "percent_DESC"
  | "description_ASC"
  | "description_DESC";

export type NotableProjectsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "summary_ASC"
  | "summary_DESC"
  | "image_ASC"
  | "image_DESC"
  | "name_ASC"
  | "name_DESC";

export type TestimonialOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "summary_ASC"
  | "summary_DESC"
  | "image_ASC"
  | "image_DESC"
  | "name_ASC"
  | "name_DESC"
  | "status_ASC"
  | "status_DESC";

export type SectionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "summary_ASC"
  | "summary_DESC"
  | "showreel_ASC"
  | "showreel_DESC"
  | "type_ASC"
  | "type_DESC";

export type NotificationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "message_ASC"
  | "message_DESC"
  | "discarded_ASC"
  | "discarded_DESC"
  | "linkTo_ASC"
  | "linkTo_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type GameOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "img_ASC"
  | "img_DESC"
  | "backgroundImg_ASC"
  | "backgroundImg_DESC"
  | "summary_ASC"
  | "summary_DESC"
  | "location_ASC"
  | "location_DESC"
  | "showreel_ASC"
  | "showreel_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type JobOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "img_ASC"
  | "img_DESC"
  | "summary_ASC"
  | "summary_DESC"
  | "creativeSummary_ASC"
  | "creativeSummary_DESC"
  | "location_ASC"
  | "location_DESC"
  | "showreel_ASC"
  | "showreel_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "submitted_ASC"
  | "submitted_DESC";

export type ConversationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "unreadMessages_ASC"
  | "unreadMessages_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "messageStr_ASC"
  | "messageStr_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "status_ASC"
  | "status_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "password_ASC"
  | "password_DESC"
  | "profileImg_ASC"
  | "profileImg_DESC"
  | "profileImgStyle_ASC"
  | "profileImgStyle_DESC"
  | "profileBG_ASC"
  | "profileBG_DESC"
  | "profileBGStyle_ASC"
  | "profileBGStyle_DESC"
  | "autosave_ASC"
  | "autosave_DESC"
  | "summary_ASC"
  | "summary_DESC"
  | "location_ASC"
  | "location_DESC"
  | "img_ASC"
  | "img_DESC";

export type InviteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "message_ASC"
  | "message_DESC"
  | "status_ASC"
  | "status_DESC";

export type ContractOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "notes_ASC"
  | "notes_DESC"
  | "deadline_ASC"
  | "deadline_DESC"
  | "cost_ASC"
  | "cost_DESC"
  | "currency_ASC"
  | "currency_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GalleryImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "img_ASC"
  | "img_DESC"
  | "title_ASC"
  | "title_DESC";

export type CountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "invites_ASC"
  | "invites_DESC"
  | "messages_ASC"
  | "messages_DESC";

export type GalleryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "summary_ASC"
  | "summary_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ContractWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PaymentTermWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  percent?: Maybe<Int>;
  percent_not?: Maybe<Int>;
  percent_in?: Maybe<Int[] | Int>;
  percent_not_in?: Maybe<Int[] | Int>;
  percent_lt?: Maybe<Int>;
  percent_lte?: Maybe<Int>;
  percent_gt?: Maybe<Int>;
  percent_gte?: Maybe<Int>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  contract?: Maybe<ContractWhereInput>;
  AND?: Maybe<PaymentTermWhereInput[] | PaymentTermWhereInput>;
  OR?: Maybe<PaymentTermWhereInput[] | PaymentTermWhereInput>;
  NOT?: Maybe<PaymentTermWhereInput[] | PaymentTermWhereInput>;
}

export interface ContractWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  deadline?: Maybe<String>;
  deadline_not?: Maybe<String>;
  deadline_in?: Maybe<String[] | String>;
  deadline_not_in?: Maybe<String[] | String>;
  deadline_lt?: Maybe<String>;
  deadline_lte?: Maybe<String>;
  deadline_gt?: Maybe<String>;
  deadline_gte?: Maybe<String>;
  deadline_contains?: Maybe<String>;
  deadline_not_contains?: Maybe<String>;
  deadline_starts_with?: Maybe<String>;
  deadline_not_starts_with?: Maybe<String>;
  deadline_ends_with?: Maybe<String>;
  deadline_not_ends_with?: Maybe<String>;
  cost?: Maybe<Int>;
  cost_not?: Maybe<Int>;
  cost_in?: Maybe<Int[] | Int>;
  cost_not_in?: Maybe<Int[] | Int>;
  cost_lt?: Maybe<Int>;
  cost_lte?: Maybe<Int>;
  cost_gt?: Maybe<Int>;
  cost_gte?: Maybe<Int>;
  paymentTerms_every?: Maybe<PaymentTermWhereInput>;
  paymentTerms_some?: Maybe<PaymentTermWhereInput>;
  paymentTerms_none?: Maybe<PaymentTermWhereInput>;
  currency?: Maybe<String>;
  currency_not?: Maybe<String>;
  currency_in?: Maybe<String[] | String>;
  currency_not_in?: Maybe<String[] | String>;
  currency_lt?: Maybe<String>;
  currency_lte?: Maybe<String>;
  currency_gt?: Maybe<String>;
  currency_gte?: Maybe<String>;
  currency_contains?: Maybe<String>;
  currency_not_contains?: Maybe<String>;
  currency_starts_with?: Maybe<String>;
  currency_not_starts_with?: Maybe<String>;
  currency_ends_with?: Maybe<String>;
  currency_not_ends_with?: Maybe<String>;
  job?: Maybe<JobWhereInput>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ContractWhereInput[] | ContractWhereInput>;
  OR?: Maybe<ContractWhereInput[] | ContractWhereInput>;
  NOT?: Maybe<ContractWhereInput[] | ContractWhereInput>;
}

export interface JobWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  creativeSummary?: Maybe<String>;
  creativeSummary_not?: Maybe<String>;
  creativeSummary_in?: Maybe<String[] | String>;
  creativeSummary_not_in?: Maybe<String[] | String>;
  creativeSummary_lt?: Maybe<String>;
  creativeSummary_lte?: Maybe<String>;
  creativeSummary_gt?: Maybe<String>;
  creativeSummary_gte?: Maybe<String>;
  creativeSummary_contains?: Maybe<String>;
  creativeSummary_not_contains?: Maybe<String>;
  creativeSummary_starts_with?: Maybe<String>;
  creativeSummary_not_starts_with?: Maybe<String>;
  creativeSummary_ends_with?: Maybe<String>;
  creativeSummary_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  gallery?: Maybe<GalleryWhereInput>;
  showreel?: Maybe<String>;
  showreel_not?: Maybe<String>;
  showreel_in?: Maybe<String[] | String>;
  showreel_not_in?: Maybe<String[] | String>;
  showreel_lt?: Maybe<String>;
  showreel_lte?: Maybe<String>;
  showreel_gt?: Maybe<String>;
  showreel_gte?: Maybe<String>;
  showreel_contains?: Maybe<String>;
  showreel_not_contains?: Maybe<String>;
  showreel_starts_with?: Maybe<String>;
  showreel_not_starts_with?: Maybe<String>;
  showreel_ends_with?: Maybe<String>;
  showreel_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  game?: Maybe<GameWhereInput>;
  submitted?: Maybe<Boolean>;
  submitted_not?: Maybe<Boolean>;
  invite_every?: Maybe<InviteWhereInput>;
  invite_some?: Maybe<InviteWhereInput>;
  invite_none?: Maybe<InviteWhereInput>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  conversations_every?: Maybe<ConversationWhereInput>;
  conversations_some?: Maybe<ConversationWhereInput>;
  conversations_none?: Maybe<ConversationWhereInput>;
  AND?: Maybe<JobWhereInput[] | JobWhereInput>;
  OR?: Maybe<JobWhereInput[] | JobWhereInput>;
  NOT?: Maybe<JobWhereInput[] | JobWhereInput>;
}

export interface GalleryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  section?: Maybe<SectionWhereInput>;
  images_every?: Maybe<GalleryImageWhereInput>;
  images_some?: Maybe<GalleryImageWhereInput>;
  images_none?: Maybe<GalleryImageWhereInput>;
  AND?: Maybe<GalleryWhereInput[] | GalleryWhereInput>;
  OR?: Maybe<GalleryWhereInput[] | GalleryWhereInput>;
  NOT?: Maybe<GalleryWhereInput[] | GalleryWhereInput>;
}

export interface SectionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  gallery?: Maybe<GalleryWhereInput>;
  notableProjects_every?: Maybe<NotableProjectsWhereInput>;
  notableProjects_some?: Maybe<NotableProjectsWhereInput>;
  notableProjects_none?: Maybe<NotableProjectsWhereInput>;
  testimonials_every?: Maybe<TestimonialWhereInput>;
  testimonials_some?: Maybe<TestimonialWhereInput>;
  testimonials_none?: Maybe<TestimonialWhereInput>;
  showreel?: Maybe<String>;
  showreel_not?: Maybe<String>;
  showreel_in?: Maybe<String[] | String>;
  showreel_not_in?: Maybe<String[] | String>;
  showreel_lt?: Maybe<String>;
  showreel_lte?: Maybe<String>;
  showreel_gt?: Maybe<String>;
  showreel_gte?: Maybe<String>;
  showreel_contains?: Maybe<String>;
  showreel_not_contains?: Maybe<String>;
  showreel_starts_with?: Maybe<String>;
  showreel_not_starts_with?: Maybe<String>;
  showreel_ends_with?: Maybe<String>;
  showreel_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<SectionWhereInput[] | SectionWhereInput>;
  OR?: Maybe<SectionWhereInput[] | SectionWhereInput>;
  NOT?: Maybe<SectionWhereInput[] | SectionWhereInput>;
}

export interface NotableProjectsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<NotableProjectsWhereInput[] | NotableProjectsWhereInput>;
  OR?: Maybe<NotableProjectsWhereInput[] | NotableProjectsWhereInput>;
  NOT?: Maybe<NotableProjectsWhereInput[] | NotableProjectsWhereInput>;
}

export interface TestimonialWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  AND?: Maybe<TestimonialWhereInput[] | TestimonialWhereInput>;
  OR?: Maybe<TestimonialWhereInput[] | TestimonialWhereInput>;
  NOT?: Maybe<TestimonialWhereInput[] | TestimonialWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  profileImg?: Maybe<String>;
  profileImg_not?: Maybe<String>;
  profileImg_in?: Maybe<String[] | String>;
  profileImg_not_in?: Maybe<String[] | String>;
  profileImg_lt?: Maybe<String>;
  profileImg_lte?: Maybe<String>;
  profileImg_gt?: Maybe<String>;
  profileImg_gte?: Maybe<String>;
  profileImg_contains?: Maybe<String>;
  profileImg_not_contains?: Maybe<String>;
  profileImg_starts_with?: Maybe<String>;
  profileImg_not_starts_with?: Maybe<String>;
  profileImg_ends_with?: Maybe<String>;
  profileImg_not_ends_with?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileImgStyle_not?: Maybe<String>;
  profileImgStyle_in?: Maybe<String[] | String>;
  profileImgStyle_not_in?: Maybe<String[] | String>;
  profileImgStyle_lt?: Maybe<String>;
  profileImgStyle_lte?: Maybe<String>;
  profileImgStyle_gt?: Maybe<String>;
  profileImgStyle_gte?: Maybe<String>;
  profileImgStyle_contains?: Maybe<String>;
  profileImgStyle_not_contains?: Maybe<String>;
  profileImgStyle_starts_with?: Maybe<String>;
  profileImgStyle_not_starts_with?: Maybe<String>;
  profileImgStyle_ends_with?: Maybe<String>;
  profileImgStyle_not_ends_with?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBG_not?: Maybe<String>;
  profileBG_in?: Maybe<String[] | String>;
  profileBG_not_in?: Maybe<String[] | String>;
  profileBG_lt?: Maybe<String>;
  profileBG_lte?: Maybe<String>;
  profileBG_gt?: Maybe<String>;
  profileBG_gte?: Maybe<String>;
  profileBG_contains?: Maybe<String>;
  profileBG_not_contains?: Maybe<String>;
  profileBG_starts_with?: Maybe<String>;
  profileBG_not_starts_with?: Maybe<String>;
  profileBG_ends_with?: Maybe<String>;
  profileBG_not_ends_with?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  profileBGStyle_not?: Maybe<String>;
  profileBGStyle_in?: Maybe<String[] | String>;
  profileBGStyle_not_in?: Maybe<String[] | String>;
  profileBGStyle_lt?: Maybe<String>;
  profileBGStyle_lte?: Maybe<String>;
  profileBGStyle_gt?: Maybe<String>;
  profileBGStyle_gte?: Maybe<String>;
  profileBGStyle_contains?: Maybe<String>;
  profileBGStyle_not_contains?: Maybe<String>;
  profileBGStyle_starts_with?: Maybe<String>;
  profileBGStyle_not_starts_with?: Maybe<String>;
  profileBGStyle_ends_with?: Maybe<String>;
  profileBGStyle_not_ends_with?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  autosave_not?: Maybe<Boolean>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  sections_every?: Maybe<SectionWhereInput>;
  sections_some?: Maybe<SectionWhereInput>;
  sections_none?: Maybe<SectionWhereInput>;
  notifications_every?: Maybe<NotificationWhereInput>;
  notifications_some?: Maybe<NotificationWhereInput>;
  notifications_none?: Maybe<NotificationWhereInput>;
  games_every?: Maybe<GameWhereInput>;
  games_some?: Maybe<GameWhereInput>;
  games_none?: Maybe<GameWhereInput>;
  conversations_every?: Maybe<ConversationWhereInput>;
  conversations_some?: Maybe<ConversationWhereInput>;
  conversations_none?: Maybe<ConversationWhereInput>;
  jobs_every?: Maybe<JobWhereInput>;
  jobs_some?: Maybe<JobWhereInput>;
  jobs_none?: Maybe<JobWhereInput>;
  invites_every?: Maybe<InviteWhereInput>;
  invites_some?: Maybe<InviteWhereInput>;
  invites_none?: Maybe<InviteWhereInput>;
  invitesReceived_every?: Maybe<InviteWhereInput>;
  invitesReceived_some?: Maybe<InviteWhereInput>;
  invitesReceived_none?: Maybe<InviteWhereInput>;
  messagesSent_every?: Maybe<MessageWhereInput>;
  messagesSent_some?: Maybe<MessageWhereInput>;
  messagesSent_none?: Maybe<MessageWhereInput>;
  messagesReceived_every?: Maybe<MessageWhereInput>;
  messagesReceived_some?: Maybe<MessageWhereInput>;
  messagesReceived_none?: Maybe<MessageWhereInput>;
  contracts_every?: Maybe<ContractWhereInput>;
  contracts_some?: Maybe<ContractWhereInput>;
  contracts_none?: Maybe<ContractWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface NotificationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  discarded_not?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  linkTo_not?: Maybe<String>;
  linkTo_in?: Maybe<String[] | String>;
  linkTo_not_in?: Maybe<String[] | String>;
  linkTo_lt?: Maybe<String>;
  linkTo_lte?: Maybe<String>;
  linkTo_gt?: Maybe<String>;
  linkTo_gte?: Maybe<String>;
  linkTo_contains?: Maybe<String>;
  linkTo_not_contains?: Maybe<String>;
  linkTo_starts_with?: Maybe<String>;
  linkTo_not_starts_with?: Maybe<String>;
  linkTo_ends_with?: Maybe<String>;
  linkTo_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  OR?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  NOT?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
}

export interface GameWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  backgroundImg_not?: Maybe<String>;
  backgroundImg_in?: Maybe<String[] | String>;
  backgroundImg_not_in?: Maybe<String[] | String>;
  backgroundImg_lt?: Maybe<String>;
  backgroundImg_lte?: Maybe<String>;
  backgroundImg_gt?: Maybe<String>;
  backgroundImg_gte?: Maybe<String>;
  backgroundImg_contains?: Maybe<String>;
  backgroundImg_not_contains?: Maybe<String>;
  backgroundImg_starts_with?: Maybe<String>;
  backgroundImg_not_starts_with?: Maybe<String>;
  backgroundImg_ends_with?: Maybe<String>;
  backgroundImg_not_ends_with?: Maybe<String>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  gallery?: Maybe<GalleryWhereInput>;
  showreel?: Maybe<String>;
  showreel_not?: Maybe<String>;
  showreel_in?: Maybe<String[] | String>;
  showreel_not_in?: Maybe<String[] | String>;
  showreel_lt?: Maybe<String>;
  showreel_lte?: Maybe<String>;
  showreel_gt?: Maybe<String>;
  showreel_gte?: Maybe<String>;
  showreel_contains?: Maybe<String>;
  showreel_not_contains?: Maybe<String>;
  showreel_starts_with?: Maybe<String>;
  showreel_not_starts_with?: Maybe<String>;
  showreel_ends_with?: Maybe<String>;
  showreel_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  jobs_every?: Maybe<JobWhereInput>;
  jobs_some?: Maybe<JobWhereInput>;
  jobs_none?: Maybe<JobWhereInput>;
  AND?: Maybe<GameWhereInput[] | GameWhereInput>;
  OR?: Maybe<GameWhereInput[] | GameWhereInput>;
  NOT?: Maybe<GameWhereInput[] | GameWhereInput>;
}

export interface ConversationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  unreadMessages?: Maybe<String>;
  unreadMessages_not?: Maybe<String>;
  unreadMessages_in?: Maybe<String[] | String>;
  unreadMessages_not_in?: Maybe<String[] | String>;
  unreadMessages_lt?: Maybe<String>;
  unreadMessages_lte?: Maybe<String>;
  unreadMessages_gt?: Maybe<String>;
  unreadMessages_gte?: Maybe<String>;
  unreadMessages_contains?: Maybe<String>;
  unreadMessages_not_contains?: Maybe<String>;
  unreadMessages_starts_with?: Maybe<String>;
  unreadMessages_not_starts_with?: Maybe<String>;
  unreadMessages_ends_with?: Maybe<String>;
  unreadMessages_not_ends_with?: Maybe<String>;
  participants_every?: Maybe<UserWhereInput>;
  participants_some?: Maybe<UserWhereInput>;
  participants_none?: Maybe<UserWhereInput>;
  job?: Maybe<JobWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ConversationWhereInput[] | ConversationWhereInput>;
  OR?: Maybe<ConversationWhereInput[] | ConversationWhereInput>;
  NOT?: Maybe<ConversationWhereInput[] | ConversationWhereInput>;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  messageStr?: Maybe<String>;
  messageStr_not?: Maybe<String>;
  messageStr_in?: Maybe<String[] | String>;
  messageStr_not_in?: Maybe<String[] | String>;
  messageStr_lt?: Maybe<String>;
  messageStr_lte?: Maybe<String>;
  messageStr_gt?: Maybe<String>;
  messageStr_gte?: Maybe<String>;
  messageStr_contains?: Maybe<String>;
  messageStr_not_contains?: Maybe<String>;
  messageStr_starts_with?: Maybe<String>;
  messageStr_not_starts_with?: Maybe<String>;
  messageStr_ends_with?: Maybe<String>;
  messageStr_not_ends_with?: Maybe<String>;
  job?: Maybe<JobWhereInput>;
  sender?: Maybe<UserWhereInput>;
  receiver?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  conversation?: Maybe<ConversationWhereInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export interface InviteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  game?: Maybe<GameWhereInput>;
  job?: Maybe<JobWhereInput>;
  user?: Maybe<UserWhereInput>;
  receiver?: Maybe<UserWhereInput>;
  contracts_every?: Maybe<ContractWhereInput>;
  contracts_some?: Maybe<ContractWhereInput>;
  contracts_none?: Maybe<ContractWhereInput>;
  AND?: Maybe<InviteWhereInput[] | InviteWhereInput>;
  OR?: Maybe<InviteWhereInput[] | InviteWhereInput>;
  NOT?: Maybe<InviteWhereInput[] | InviteWhereInput>;
}

export interface GalleryImageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  gallery?: Maybe<GalleryWhereInput>;
  AND?: Maybe<GalleryImageWhereInput[] | GalleryImageWhereInput>;
  OR?: Maybe<GalleryImageWhereInput[] | GalleryImageWhereInput>;
  NOT?: Maybe<GalleryImageWhereInput[] | GalleryImageWhereInput>;
}

export type ConversationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type CountWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CountWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  invites?: Maybe<String>;
  invites_not?: Maybe<String>;
  invites_in?: Maybe<String[] | String>;
  invites_not_in?: Maybe<String[] | String>;
  invites_lt?: Maybe<String>;
  invites_lte?: Maybe<String>;
  invites_gt?: Maybe<String>;
  invites_gte?: Maybe<String>;
  invites_contains?: Maybe<String>;
  invites_not_contains?: Maybe<String>;
  invites_starts_with?: Maybe<String>;
  invites_not_starts_with?: Maybe<String>;
  invites_ends_with?: Maybe<String>;
  invites_not_ends_with?: Maybe<String>;
  messages?: Maybe<String>;
  messages_not?: Maybe<String>;
  messages_in?: Maybe<String[] | String>;
  messages_not_in?: Maybe<String[] | String>;
  messages_lt?: Maybe<String>;
  messages_lte?: Maybe<String>;
  messages_gt?: Maybe<String>;
  messages_gte?: Maybe<String>;
  messages_contains?: Maybe<String>;
  messages_not_contains?: Maybe<String>;
  messages_starts_with?: Maybe<String>;
  messages_not_starts_with?: Maybe<String>;
  messages_ends_with?: Maybe<String>;
  messages_not_ends_with?: Maybe<String>;
  AND?: Maybe<CountWhereInput[] | CountWhereInput>;
  OR?: Maybe<CountWhereInput[] | CountWhereInput>;
  NOT?: Maybe<CountWhereInput[] | CountWhereInput>;
}

export type GalleryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type GalleryImageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type GameWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type InviteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type JobWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type NotableProjectsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type NotificationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PaymentTermWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SectionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TestimonialWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
}>;

export interface ContractCreateInput {
  id?: Maybe<ID_Input>;
  notes?: Maybe<String>;
  deadline?: Maybe<String>;
  cost?: Maybe<Int>;
  paymentTerms?: Maybe<PaymentTermCreateManyWithoutContractInput>;
  currency: String;
  job: JobCreateOneInput;
  status?: Maybe<String>;
  user?: Maybe<UserCreateOneWithoutContractsInput>;
}

export interface PaymentTermCreateManyWithoutContractInput {
  create?: Maybe<
    | PaymentTermCreateWithoutContractInput[]
    | PaymentTermCreateWithoutContractInput
  >;
  connect?: Maybe<PaymentTermWhereUniqueInput[] | PaymentTermWhereUniqueInput>;
}

export interface PaymentTermCreateWithoutContractInput {
  id?: Maybe<ID_Input>;
  percent?: Maybe<Int>;
  description: String;
}

export interface JobCreateOneInput {
  create?: Maybe<JobCreateInput>;
  connect?: Maybe<JobWhereUniqueInput>;
}

export interface JobCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  keywords?: Maybe<JobCreatekeywordsInput>;
  img?: Maybe<String>;
  summary?: Maybe<String>;
  creativeSummary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneInput>;
  showreel?: Maybe<String>;
  user: UserCreateOneWithoutJobsInput;
  type?: Maybe<String>;
  game: GameCreateOneWithoutJobsInput;
  submitted?: Maybe<Boolean>;
  invite?: Maybe<InviteCreateManyWithoutJobInput>;
  messages?: Maybe<MessageCreateManyWithoutJobInput>;
  conversations?: Maybe<ConversationCreateManyWithoutJobInput>;
}

export interface JobCreatekeywordsInput {
  set?: Maybe<String[] | String>;
}

export interface GalleryCreateOneInput {
  create?: Maybe<GalleryCreateInput>;
  connect?: Maybe<GalleryWhereUniqueInput>;
}

export interface GalleryCreateInput {
  id?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  section?: Maybe<SectionCreateOneWithoutGalleryInput>;
  images?: Maybe<GalleryImageCreateManyWithoutGalleryInput>;
}

export interface SectionCreateOneWithoutGalleryInput {
  create?: Maybe<SectionCreateWithoutGalleryInput>;
  connect?: Maybe<SectionWhereUniqueInput>;
}

export interface SectionCreateWithoutGalleryInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  summary?: Maybe<String>;
  notableProjects?: Maybe<NotableProjectsCreateManyInput>;
  testimonials?: Maybe<TestimonialCreateManyInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
  user?: Maybe<UserCreateOneWithoutSectionsInput>;
}

export interface NotableProjectsCreateManyInput {
  create?: Maybe<NotableProjectsCreateInput[] | NotableProjectsCreateInput>;
  connect?: Maybe<
    NotableProjectsWhereUniqueInput[] | NotableProjectsWhereUniqueInput
  >;
}

export interface NotableProjectsCreateInput {
  id?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
}

export interface TestimonialCreateManyInput {
  create?: Maybe<TestimonialCreateInput[] | TestimonialCreateInput>;
  connect?: Maybe<TestimonialWhereUniqueInput[] | TestimonialWhereUniqueInput>;
}

export interface TestimonialCreateInput {
  id?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface UserCreateOneWithoutSectionsInput {
  create?: Maybe<UserCreateWithoutSectionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutSectionsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserCreatefavouritesInput>;
  img?: Maybe<String>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  games?: Maybe<GameCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobCreateManyWithoutUserInput>;
  invites?: Maybe<InviteCreateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteCreateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageCreateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageCreateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractCreateManyWithoutUserInput>;
}

export interface UserCreatekeywordsInput {
  set?: Maybe<String[] | String>;
}

export interface UserCreatefavouritesInput {
  set?: Maybe<String[] | String>;
}

export interface NotificationCreateManyWithoutUserInput {
  create?: Maybe<
    NotificationCreateWithoutUserInput[] | NotificationCreateWithoutUserInput
  >;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
}

export interface NotificationCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  message: String;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon: String;
}

export interface GameCreateManyWithoutUserInput {
  create?: Maybe<GameCreateWithoutUserInput[] | GameCreateWithoutUserInput>;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
}

export interface GameCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  keywords?: Maybe<GameCreatekeywordsInput>;
  img?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
  jobs?: Maybe<JobCreateManyWithoutGameInput>;
}

export interface GameCreatekeywordsInput {
  set?: Maybe<String[] | String>;
}

export interface JobCreateManyWithoutGameInput {
  create?: Maybe<JobCreateWithoutGameInput[] | JobCreateWithoutGameInput>;
  connect?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
}

export interface JobCreateWithoutGameInput {
  id?: Maybe<ID_Input>;
  name: String;
  keywords?: Maybe<JobCreatekeywordsInput>;
  img?: Maybe<String>;
  summary?: Maybe<String>;
  creativeSummary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneInput>;
  showreel?: Maybe<String>;
  user: UserCreateOneWithoutJobsInput;
  type?: Maybe<String>;
  submitted?: Maybe<Boolean>;
  invite?: Maybe<InviteCreateManyWithoutJobInput>;
  messages?: Maybe<MessageCreateManyWithoutJobInput>;
  conversations?: Maybe<ConversationCreateManyWithoutJobInput>;
}

export interface UserCreateOneWithoutJobsInput {
  create?: Maybe<UserCreateWithoutJobsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutJobsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserCreatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionCreateManyWithoutUserInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  games?: Maybe<GameCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutParticipantsInput>;
  invites?: Maybe<InviteCreateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteCreateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageCreateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageCreateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractCreateManyWithoutUserInput>;
}

export interface SectionCreateManyWithoutUserInput {
  create?: Maybe<
    SectionCreateWithoutUserInput[] | SectionCreateWithoutUserInput
  >;
  connect?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
}

export interface SectionCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  summary?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneWithoutSectionInput>;
  notableProjects?: Maybe<NotableProjectsCreateManyInput>;
  testimonials?: Maybe<TestimonialCreateManyInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
}

export interface GalleryCreateOneWithoutSectionInput {
  create?: Maybe<GalleryCreateWithoutSectionInput>;
  connect?: Maybe<GalleryWhereUniqueInput>;
}

export interface GalleryCreateWithoutSectionInput {
  id?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  images?: Maybe<GalleryImageCreateManyWithoutGalleryInput>;
}

export interface GalleryImageCreateManyWithoutGalleryInput {
  create?: Maybe<
    | GalleryImageCreateWithoutGalleryInput[]
    | GalleryImageCreateWithoutGalleryInput
  >;
  connect?: Maybe<
    GalleryImageWhereUniqueInput[] | GalleryImageWhereUniqueInput
  >;
}

export interface GalleryImageCreateWithoutGalleryInput {
  id?: Maybe<ID_Input>;
  img: String;
  title?: Maybe<String>;
}

export interface ConversationCreateManyWithoutParticipantsInput {
  create?: Maybe<
    | ConversationCreateWithoutParticipantsInput[]
    | ConversationCreateWithoutParticipantsInput
  >;
  connect?: Maybe<
    ConversationWhereUniqueInput[] | ConversationWhereUniqueInput
  >;
}

export interface ConversationCreateWithoutParticipantsInput {
  id?: Maybe<ID_Input>;
  messages?: Maybe<MessageCreateManyWithoutConversationInput>;
  unreadMessages?: Maybe<String>;
  job?: Maybe<JobCreateOneWithoutConversationsInput>;
}

export interface MessageCreateManyWithoutConversationInput {
  create?: Maybe<
    | MessageCreateWithoutConversationInput[]
    | MessageCreateWithoutConversationInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface MessageCreateWithoutConversationInput {
  id?: Maybe<ID_Input>;
  messageStr: String;
  job?: Maybe<JobCreateOneWithoutMessagesInput>;
  sender: UserCreateOneWithoutMessagesSentInput;
  receiver?: Maybe<UserCreateOneWithoutMessagesReceivedInput>;
  status?: Maybe<String>;
}

export interface JobCreateOneWithoutMessagesInput {
  create?: Maybe<JobCreateWithoutMessagesInput>;
  connect?: Maybe<JobWhereUniqueInput>;
}

export interface JobCreateWithoutMessagesInput {
  id?: Maybe<ID_Input>;
  name: String;
  keywords?: Maybe<JobCreatekeywordsInput>;
  img?: Maybe<String>;
  summary?: Maybe<String>;
  creativeSummary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneInput>;
  showreel?: Maybe<String>;
  user: UserCreateOneWithoutJobsInput;
  type?: Maybe<String>;
  game: GameCreateOneWithoutJobsInput;
  submitted?: Maybe<Boolean>;
  invite?: Maybe<InviteCreateManyWithoutJobInput>;
  conversations?: Maybe<ConversationCreateManyWithoutJobInput>;
}

export interface GameCreateOneWithoutJobsInput {
  create?: Maybe<GameCreateWithoutJobsInput>;
  connect?: Maybe<GameWhereUniqueInput>;
}

export interface GameCreateWithoutJobsInput {
  id?: Maybe<ID_Input>;
  name: String;
  keywords?: Maybe<GameCreatekeywordsInput>;
  img?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneInput>;
  showreel?: Maybe<String>;
  user: UserCreateOneWithoutGamesInput;
  type?: Maybe<String>;
}

export interface UserCreateOneWithoutGamesInput {
  create?: Maybe<UserCreateWithoutGamesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutGamesInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserCreatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionCreateManyWithoutUserInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobCreateManyWithoutUserInput>;
  invites?: Maybe<InviteCreateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteCreateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageCreateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageCreateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractCreateManyWithoutUserInput>;
}

export interface JobCreateManyWithoutUserInput {
  create?: Maybe<JobCreateWithoutUserInput[] | JobCreateWithoutUserInput>;
  connect?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
}

export interface JobCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  keywords?: Maybe<JobCreatekeywordsInput>;
  img?: Maybe<String>;
  summary?: Maybe<String>;
  creativeSummary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
  game: GameCreateOneWithoutJobsInput;
  submitted?: Maybe<Boolean>;
  invite?: Maybe<InviteCreateManyWithoutJobInput>;
  messages?: Maybe<MessageCreateManyWithoutJobInput>;
  conversations?: Maybe<ConversationCreateManyWithoutJobInput>;
}

export interface InviteCreateManyWithoutJobInput {
  create?: Maybe<InviteCreateWithoutJobInput[] | InviteCreateWithoutJobInput>;
  connect?: Maybe<InviteWhereUniqueInput[] | InviteWhereUniqueInput>;
}

export interface InviteCreateWithoutJobInput {
  id?: Maybe<ID_Input>;
  title: String;
  message: String;
  status?: Maybe<String>;
  game: GameCreateOneInput;
  user: UserCreateOneWithoutInvitesInput;
  receiver: UserCreateOneWithoutInvitesReceivedInput;
  contracts?: Maybe<ContractCreateManyInput>;
}

export interface GameCreateOneInput {
  create?: Maybe<GameCreateInput>;
  connect?: Maybe<GameWhereUniqueInput>;
}

export interface GameCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  keywords?: Maybe<GameCreatekeywordsInput>;
  img?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneInput>;
  showreel?: Maybe<String>;
  user: UserCreateOneWithoutGamesInput;
  type?: Maybe<String>;
  jobs?: Maybe<JobCreateManyWithoutGameInput>;
}

export interface UserCreateOneWithoutInvitesInput {
  create?: Maybe<UserCreateWithoutInvitesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutInvitesInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserCreatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionCreateManyWithoutUserInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  games?: Maybe<GameCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobCreateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteCreateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageCreateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageCreateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractCreateManyWithoutUserInput>;
}

export interface InviteCreateManyWithoutReceiverInput {
  create?: Maybe<
    InviteCreateWithoutReceiverInput[] | InviteCreateWithoutReceiverInput
  >;
  connect?: Maybe<InviteWhereUniqueInput[] | InviteWhereUniqueInput>;
}

export interface InviteCreateWithoutReceiverInput {
  id?: Maybe<ID_Input>;
  title: String;
  message: String;
  status?: Maybe<String>;
  game: GameCreateOneInput;
  job: JobCreateOneWithoutInviteInput;
  user: UserCreateOneWithoutInvitesInput;
  contracts?: Maybe<ContractCreateManyInput>;
}

export interface JobCreateOneWithoutInviteInput {
  create?: Maybe<JobCreateWithoutInviteInput>;
  connect?: Maybe<JobWhereUniqueInput>;
}

export interface JobCreateWithoutInviteInput {
  id?: Maybe<ID_Input>;
  name: String;
  keywords?: Maybe<JobCreatekeywordsInput>;
  img?: Maybe<String>;
  summary?: Maybe<String>;
  creativeSummary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneInput>;
  showreel?: Maybe<String>;
  user: UserCreateOneWithoutJobsInput;
  type?: Maybe<String>;
  game: GameCreateOneWithoutJobsInput;
  submitted?: Maybe<Boolean>;
  messages?: Maybe<MessageCreateManyWithoutJobInput>;
  conversations?: Maybe<ConversationCreateManyWithoutJobInput>;
}

export interface MessageCreateManyWithoutJobInput {
  create?: Maybe<MessageCreateWithoutJobInput[] | MessageCreateWithoutJobInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface MessageCreateWithoutJobInput {
  id?: Maybe<ID_Input>;
  messageStr: String;
  sender: UserCreateOneWithoutMessagesSentInput;
  receiver?: Maybe<UserCreateOneWithoutMessagesReceivedInput>;
  status?: Maybe<String>;
  conversation?: Maybe<ConversationCreateOneWithoutMessagesInput>;
}

export interface UserCreateOneWithoutMessagesSentInput {
  create?: Maybe<UserCreateWithoutMessagesSentInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMessagesSentInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserCreatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionCreateManyWithoutUserInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  games?: Maybe<GameCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobCreateManyWithoutUserInput>;
  invites?: Maybe<InviteCreateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteCreateManyWithoutReceiverInput>;
  messagesReceived?: Maybe<MessageCreateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractCreateManyWithoutUserInput>;
}

export interface InviteCreateManyWithoutUserInput {
  create?: Maybe<InviteCreateWithoutUserInput[] | InviteCreateWithoutUserInput>;
  connect?: Maybe<InviteWhereUniqueInput[] | InviteWhereUniqueInput>;
}

export interface InviteCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  message: String;
  status?: Maybe<String>;
  game: GameCreateOneInput;
  job: JobCreateOneWithoutInviteInput;
  receiver: UserCreateOneWithoutInvitesReceivedInput;
  contracts?: Maybe<ContractCreateManyInput>;
}

export interface UserCreateOneWithoutInvitesReceivedInput {
  create?: Maybe<UserCreateWithoutInvitesReceivedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutInvitesReceivedInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserCreatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionCreateManyWithoutUserInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  games?: Maybe<GameCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobCreateManyWithoutUserInput>;
  invites?: Maybe<InviteCreateManyWithoutUserInput>;
  messagesSent?: Maybe<MessageCreateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageCreateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractCreateManyWithoutUserInput>;
}

export interface MessageCreateManyWithoutSenderInput {
  create?: Maybe<
    MessageCreateWithoutSenderInput[] | MessageCreateWithoutSenderInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface MessageCreateWithoutSenderInput {
  id?: Maybe<ID_Input>;
  messageStr: String;
  job?: Maybe<JobCreateOneWithoutMessagesInput>;
  receiver?: Maybe<UserCreateOneWithoutMessagesReceivedInput>;
  status?: Maybe<String>;
  conversation?: Maybe<ConversationCreateOneWithoutMessagesInput>;
}

export interface UserCreateOneWithoutMessagesReceivedInput {
  create?: Maybe<UserCreateWithoutMessagesReceivedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMessagesReceivedInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserCreatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionCreateManyWithoutUserInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  games?: Maybe<GameCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobCreateManyWithoutUserInput>;
  invites?: Maybe<InviteCreateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteCreateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageCreateManyWithoutSenderInput>;
  contracts?: Maybe<ContractCreateManyWithoutUserInput>;
}

export interface ContractCreateManyWithoutUserInput {
  create?: Maybe<
    ContractCreateWithoutUserInput[] | ContractCreateWithoutUserInput
  >;
  connect?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
}

export interface ContractCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  notes?: Maybe<String>;
  deadline?: Maybe<String>;
  cost?: Maybe<Int>;
  paymentTerms?: Maybe<PaymentTermCreateManyWithoutContractInput>;
  currency: String;
  job: JobCreateOneInput;
  status?: Maybe<String>;
}

export interface ConversationCreateOneWithoutMessagesInput {
  create?: Maybe<ConversationCreateWithoutMessagesInput>;
  connect?: Maybe<ConversationWhereUniqueInput>;
}

export interface ConversationCreateWithoutMessagesInput {
  id?: Maybe<ID_Input>;
  unreadMessages?: Maybe<String>;
  participants?: Maybe<UserCreateManyWithoutConversationsInput>;
  job?: Maybe<JobCreateOneWithoutConversationsInput>;
}

export interface UserCreateManyWithoutConversationsInput {
  create?: Maybe<
    UserCreateWithoutConversationsInput[] | UserCreateWithoutConversationsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutConversationsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserCreatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionCreateManyWithoutUserInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  games?: Maybe<GameCreateManyWithoutUserInput>;
  jobs?: Maybe<JobCreateManyWithoutUserInput>;
  invites?: Maybe<InviteCreateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteCreateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageCreateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageCreateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractCreateManyWithoutUserInput>;
}

export interface MessageCreateManyWithoutReceiverInput {
  create?: Maybe<
    MessageCreateWithoutReceiverInput[] | MessageCreateWithoutReceiverInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface MessageCreateWithoutReceiverInput {
  id?: Maybe<ID_Input>;
  messageStr: String;
  job?: Maybe<JobCreateOneWithoutMessagesInput>;
  sender: UserCreateOneWithoutMessagesSentInput;
  status?: Maybe<String>;
  conversation?: Maybe<ConversationCreateOneWithoutMessagesInput>;
}

export interface JobCreateOneWithoutConversationsInput {
  create?: Maybe<JobCreateWithoutConversationsInput>;
  connect?: Maybe<JobWhereUniqueInput>;
}

export interface JobCreateWithoutConversationsInput {
  id?: Maybe<ID_Input>;
  name: String;
  keywords?: Maybe<JobCreatekeywordsInput>;
  img?: Maybe<String>;
  summary?: Maybe<String>;
  creativeSummary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneInput>;
  showreel?: Maybe<String>;
  user: UserCreateOneWithoutJobsInput;
  type?: Maybe<String>;
  game: GameCreateOneWithoutJobsInput;
  submitted?: Maybe<Boolean>;
  invite?: Maybe<InviteCreateManyWithoutJobInput>;
  messages?: Maybe<MessageCreateManyWithoutJobInput>;
}

export interface ContractCreateManyInput {
  create?: Maybe<ContractCreateInput[] | ContractCreateInput>;
  connect?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
}

export interface ConversationCreateManyWithoutJobInput {
  create?: Maybe<
    ConversationCreateWithoutJobInput[] | ConversationCreateWithoutJobInput
  >;
  connect?: Maybe<
    ConversationWhereUniqueInput[] | ConversationWhereUniqueInput
  >;
}

export interface ConversationCreateWithoutJobInput {
  id?: Maybe<ID_Input>;
  messages?: Maybe<MessageCreateManyWithoutConversationInput>;
  unreadMessages?: Maybe<String>;
  participants?: Maybe<UserCreateManyWithoutConversationsInput>;
}

export interface UserCreateOneWithoutContractsInput {
  create?: Maybe<UserCreateWithoutContractsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutContractsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserCreatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionCreateManyWithoutUserInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  games?: Maybe<GameCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobCreateManyWithoutUserInput>;
  invites?: Maybe<InviteCreateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteCreateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageCreateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageCreateManyWithoutReceiverInput>;
}

export interface ContractUpdateInput {
  notes?: Maybe<String>;
  deadline?: Maybe<String>;
  cost?: Maybe<Int>;
  paymentTerms?: Maybe<PaymentTermUpdateManyWithoutContractInput>;
  currency?: Maybe<String>;
  job?: Maybe<JobUpdateOneRequiredInput>;
  status?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutContractsInput>;
}

export interface PaymentTermUpdateManyWithoutContractInput {
  create?: Maybe<
    | PaymentTermCreateWithoutContractInput[]
    | PaymentTermCreateWithoutContractInput
  >;
  delete?: Maybe<PaymentTermWhereUniqueInput[] | PaymentTermWhereUniqueInput>;
  connect?: Maybe<PaymentTermWhereUniqueInput[] | PaymentTermWhereUniqueInput>;
  set?: Maybe<PaymentTermWhereUniqueInput[] | PaymentTermWhereUniqueInput>;
  disconnect?: Maybe<
    PaymentTermWhereUniqueInput[] | PaymentTermWhereUniqueInput
  >;
  update?: Maybe<
    | PaymentTermUpdateWithWhereUniqueWithoutContractInput[]
    | PaymentTermUpdateWithWhereUniqueWithoutContractInput
  >;
  upsert?: Maybe<
    | PaymentTermUpsertWithWhereUniqueWithoutContractInput[]
    | PaymentTermUpsertWithWhereUniqueWithoutContractInput
  >;
  deleteMany?: Maybe<
    PaymentTermScalarWhereInput[] | PaymentTermScalarWhereInput
  >;
  updateMany?: Maybe<
    | PaymentTermUpdateManyWithWhereNestedInput[]
    | PaymentTermUpdateManyWithWhereNestedInput
  >;
}

export interface PaymentTermUpdateWithWhereUniqueWithoutContractInput {
  where: PaymentTermWhereUniqueInput;
  data: PaymentTermUpdateWithoutContractDataInput;
}

export interface PaymentTermUpdateWithoutContractDataInput {
  percent?: Maybe<Int>;
  description?: Maybe<String>;
}

export interface PaymentTermUpsertWithWhereUniqueWithoutContractInput {
  where: PaymentTermWhereUniqueInput;
  update: PaymentTermUpdateWithoutContractDataInput;
  create: PaymentTermCreateWithoutContractInput;
}

export interface PaymentTermScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  percent?: Maybe<Int>;
  percent_not?: Maybe<Int>;
  percent_in?: Maybe<Int[] | Int>;
  percent_not_in?: Maybe<Int[] | Int>;
  percent_lt?: Maybe<Int>;
  percent_lte?: Maybe<Int>;
  percent_gt?: Maybe<Int>;
  percent_gte?: Maybe<Int>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<PaymentTermScalarWhereInput[] | PaymentTermScalarWhereInput>;
  OR?: Maybe<PaymentTermScalarWhereInput[] | PaymentTermScalarWhereInput>;
  NOT?: Maybe<PaymentTermScalarWhereInput[] | PaymentTermScalarWhereInput>;
}

export interface PaymentTermUpdateManyWithWhereNestedInput {
  where: PaymentTermScalarWhereInput;
  data: PaymentTermUpdateManyDataInput;
}

export interface PaymentTermUpdateManyDataInput {
  percent?: Maybe<Int>;
  description?: Maybe<String>;
}

export interface JobUpdateOneRequiredInput {
  create?: Maybe<JobCreateInput>;
  update?: Maybe<JobUpdateDataInput>;
  upsert?: Maybe<JobUpsertNestedInput>;
  connect?: Maybe<JobWhereUniqueInput>;
}

export interface JobUpdateDataInput {
  name?: Maybe<String>;
  keywords?: Maybe<JobUpdatekeywordsInput>;
  img?: Maybe<String>;
  summary?: Maybe<String>;
  creativeSummary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneInput>;
  showreel?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutJobsInput>;
  type?: Maybe<String>;
  game?: Maybe<GameUpdateOneRequiredWithoutJobsInput>;
  submitted?: Maybe<Boolean>;
  invite?: Maybe<InviteUpdateManyWithoutJobInput>;
  messages?: Maybe<MessageUpdateManyWithoutJobInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutJobInput>;
}

export interface JobUpdatekeywordsInput {
  set?: Maybe<String[] | String>;
}

export interface GalleryUpdateOneInput {
  create?: Maybe<GalleryCreateInput>;
  update?: Maybe<GalleryUpdateDataInput>;
  upsert?: Maybe<GalleryUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GalleryWhereUniqueInput>;
}

export interface GalleryUpdateDataInput {
  summary?: Maybe<String>;
  section?: Maybe<SectionUpdateOneWithoutGalleryInput>;
  images?: Maybe<GalleryImageUpdateManyWithoutGalleryInput>;
}

export interface SectionUpdateOneWithoutGalleryInput {
  create?: Maybe<SectionCreateWithoutGalleryInput>;
  update?: Maybe<SectionUpdateWithoutGalleryDataInput>;
  upsert?: Maybe<SectionUpsertWithoutGalleryInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SectionWhereUniqueInput>;
}

export interface SectionUpdateWithoutGalleryDataInput {
  title?: Maybe<String>;
  summary?: Maybe<String>;
  notableProjects?: Maybe<NotableProjectsUpdateManyInput>;
  testimonials?: Maybe<TestimonialUpdateManyInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutSectionsInput>;
}

export interface NotableProjectsUpdateManyInput {
  create?: Maybe<NotableProjectsCreateInput[] | NotableProjectsCreateInput>;
  update?: Maybe<
    | NotableProjectsUpdateWithWhereUniqueNestedInput[]
    | NotableProjectsUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | NotableProjectsUpsertWithWhereUniqueNestedInput[]
    | NotableProjectsUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    NotableProjectsWhereUniqueInput[] | NotableProjectsWhereUniqueInput
  >;
  connect?: Maybe<
    NotableProjectsWhereUniqueInput[] | NotableProjectsWhereUniqueInput
  >;
  set?: Maybe<
    NotableProjectsWhereUniqueInput[] | NotableProjectsWhereUniqueInput
  >;
  disconnect?: Maybe<
    NotableProjectsWhereUniqueInput[] | NotableProjectsWhereUniqueInput
  >;
  deleteMany?: Maybe<
    NotableProjectsScalarWhereInput[] | NotableProjectsScalarWhereInput
  >;
  updateMany?: Maybe<
    | NotableProjectsUpdateManyWithWhereNestedInput[]
    | NotableProjectsUpdateManyWithWhereNestedInput
  >;
}

export interface NotableProjectsUpdateWithWhereUniqueNestedInput {
  where: NotableProjectsWhereUniqueInput;
  data: NotableProjectsUpdateDataInput;
}

export interface NotableProjectsUpdateDataInput {
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
}

export interface NotableProjectsUpsertWithWhereUniqueNestedInput {
  where: NotableProjectsWhereUniqueInput;
  update: NotableProjectsUpdateDataInput;
  create: NotableProjectsCreateInput;
}

export interface NotableProjectsScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    NotableProjectsScalarWhereInput[] | NotableProjectsScalarWhereInput
  >;
  OR?: Maybe<
    NotableProjectsScalarWhereInput[] | NotableProjectsScalarWhereInput
  >;
  NOT?: Maybe<
    NotableProjectsScalarWhereInput[] | NotableProjectsScalarWhereInput
  >;
}

export interface NotableProjectsUpdateManyWithWhereNestedInput {
  where: NotableProjectsScalarWhereInput;
  data: NotableProjectsUpdateManyDataInput;
}

export interface NotableProjectsUpdateManyDataInput {
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
}

export interface TestimonialUpdateManyInput {
  create?: Maybe<TestimonialCreateInput[] | TestimonialCreateInput>;
  update?: Maybe<
    | TestimonialUpdateWithWhereUniqueNestedInput[]
    | TestimonialUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | TestimonialUpsertWithWhereUniqueNestedInput[]
    | TestimonialUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<TestimonialWhereUniqueInput[] | TestimonialWhereUniqueInput>;
  connect?: Maybe<TestimonialWhereUniqueInput[] | TestimonialWhereUniqueInput>;
  set?: Maybe<TestimonialWhereUniqueInput[] | TestimonialWhereUniqueInput>;
  disconnect?: Maybe<
    TestimonialWhereUniqueInput[] | TestimonialWhereUniqueInput
  >;
  deleteMany?: Maybe<
    TestimonialScalarWhereInput[] | TestimonialScalarWhereInput
  >;
  updateMany?: Maybe<
    | TestimonialUpdateManyWithWhereNestedInput[]
    | TestimonialUpdateManyWithWhereNestedInput
  >;
}

export interface TestimonialUpdateWithWhereUniqueNestedInput {
  where: TestimonialWhereUniqueInput;
  data: TestimonialUpdateDataInput;
}

export interface TestimonialUpdateDataInput {
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface TestimonialUpsertWithWhereUniqueNestedInput {
  where: TestimonialWhereUniqueInput;
  update: TestimonialUpdateDataInput;
  create: TestimonialCreateInput;
}

export interface TestimonialScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  AND?: Maybe<TestimonialScalarWhereInput[] | TestimonialScalarWhereInput>;
  OR?: Maybe<TestimonialScalarWhereInput[] | TestimonialScalarWhereInput>;
  NOT?: Maybe<TestimonialScalarWhereInput[] | TestimonialScalarWhereInput>;
}

export interface TestimonialUpdateManyWithWhereNestedInput {
  where: TestimonialScalarWhereInput;
  data: TestimonialUpdateManyDataInput;
}

export interface TestimonialUpdateManyDataInput {
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface UserUpdateOneWithoutSectionsInput {
  create?: Maybe<UserCreateWithoutSectionsInput>;
  update?: Maybe<UserUpdateWithoutSectionsDataInput>;
  upsert?: Maybe<UserUpsertWithoutSectionsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutSectionsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserUpdatefavouritesInput>;
  img?: Maybe<String>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  games?: Maybe<GameUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobUpdateManyWithoutUserInput>;
  invites?: Maybe<InviteUpdateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteUpdateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageUpdateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageUpdateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractUpdateManyWithoutUserInput>;
}

export interface UserUpdatekeywordsInput {
  set?: Maybe<String[] | String>;
}

export interface UserUpdatefavouritesInput {
  set?: Maybe<String[] | String>;
}

export interface NotificationUpdateManyWithoutUserInput {
  create?: Maybe<
    NotificationCreateWithoutUserInput[] | NotificationCreateWithoutUserInput
  >;
  delete?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  set?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  disconnect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  update?: Maybe<
    | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    | NotificationUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    | NotificationUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    NotificationScalarWhereInput[] | NotificationScalarWhereInput
  >;
  updateMany?: Maybe<
    | NotificationUpdateManyWithWhereNestedInput[]
    | NotificationUpdateManyWithWhereNestedInput
  >;
}

export interface NotificationUpdateWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput;
  data: NotificationUpdateWithoutUserDataInput;
}

export interface NotificationUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface NotificationUpsertWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput;
  update: NotificationUpdateWithoutUserDataInput;
  create: NotificationCreateWithoutUserInput;
}

export interface NotificationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  discarded_not?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  linkTo_not?: Maybe<String>;
  linkTo_in?: Maybe<String[] | String>;
  linkTo_not_in?: Maybe<String[] | String>;
  linkTo_lt?: Maybe<String>;
  linkTo_lte?: Maybe<String>;
  linkTo_gt?: Maybe<String>;
  linkTo_gte?: Maybe<String>;
  linkTo_contains?: Maybe<String>;
  linkTo_not_contains?: Maybe<String>;
  linkTo_starts_with?: Maybe<String>;
  linkTo_not_starts_with?: Maybe<String>;
  linkTo_ends_with?: Maybe<String>;
  linkTo_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  OR?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  NOT?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
}

export interface NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput;
  data: NotificationUpdateManyDataInput;
}

export interface NotificationUpdateManyDataInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface GameUpdateManyWithoutUserInput {
  create?: Maybe<GameCreateWithoutUserInput[] | GameCreateWithoutUserInput>;
  delete?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  set?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  disconnect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  update?: Maybe<
    | GameUpdateWithWhereUniqueWithoutUserInput[]
    | GameUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | GameUpsertWithWhereUniqueWithoutUserInput[]
    | GameUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  updateMany?: Maybe<
    GameUpdateManyWithWhereNestedInput[] | GameUpdateManyWithWhereNestedInput
  >;
}

export interface GameUpdateWithWhereUniqueWithoutUserInput {
  where: GameWhereUniqueInput;
  data: GameUpdateWithoutUserDataInput;
}

export interface GameUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  keywords?: Maybe<GameUpdatekeywordsInput>;
  img?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
  jobs?: Maybe<JobUpdateManyWithoutGameInput>;
}

export interface GameUpdatekeywordsInput {
  set?: Maybe<String[] | String>;
}

export interface JobUpdateManyWithoutGameInput {
  create?: Maybe<JobCreateWithoutGameInput[] | JobCreateWithoutGameInput>;
  delete?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
  connect?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
  set?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
  disconnect?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
  update?: Maybe<
    | JobUpdateWithWhereUniqueWithoutGameInput[]
    | JobUpdateWithWhereUniqueWithoutGameInput
  >;
  upsert?: Maybe<
    | JobUpsertWithWhereUniqueWithoutGameInput[]
    | JobUpsertWithWhereUniqueWithoutGameInput
  >;
  deleteMany?: Maybe<JobScalarWhereInput[] | JobScalarWhereInput>;
  updateMany?: Maybe<
    JobUpdateManyWithWhereNestedInput[] | JobUpdateManyWithWhereNestedInput
  >;
}

export interface JobUpdateWithWhereUniqueWithoutGameInput {
  where: JobWhereUniqueInput;
  data: JobUpdateWithoutGameDataInput;
}

export interface JobUpdateWithoutGameDataInput {
  name?: Maybe<String>;
  keywords?: Maybe<JobUpdatekeywordsInput>;
  img?: Maybe<String>;
  summary?: Maybe<String>;
  creativeSummary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneInput>;
  showreel?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutJobsInput>;
  type?: Maybe<String>;
  submitted?: Maybe<Boolean>;
  invite?: Maybe<InviteUpdateManyWithoutJobInput>;
  messages?: Maybe<MessageUpdateManyWithoutJobInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutJobInput>;
}

export interface UserUpdateOneRequiredWithoutJobsInput {
  create?: Maybe<UserCreateWithoutJobsInput>;
  update?: Maybe<UserUpdateWithoutJobsDataInput>;
  upsert?: Maybe<UserUpsertWithoutJobsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutJobsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserUpdatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutUserInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  games?: Maybe<GameUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutParticipantsInput>;
  invites?: Maybe<InviteUpdateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteUpdateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageUpdateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageUpdateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractUpdateManyWithoutUserInput>;
}

export interface SectionUpdateManyWithoutUserInput {
  create?: Maybe<
    SectionCreateWithoutUserInput[] | SectionCreateWithoutUserInput
  >;
  delete?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
  connect?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
  set?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
  disconnect?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
  update?: Maybe<
    | SectionUpdateWithWhereUniqueWithoutUserInput[]
    | SectionUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | SectionUpsertWithWhereUniqueWithoutUserInput[]
    | SectionUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<SectionScalarWhereInput[] | SectionScalarWhereInput>;
  updateMany?: Maybe<
    | SectionUpdateManyWithWhereNestedInput[]
    | SectionUpdateManyWithWhereNestedInput
  >;
}

export interface SectionUpdateWithWhereUniqueWithoutUserInput {
  where: SectionWhereUniqueInput;
  data: SectionUpdateWithoutUserDataInput;
}

export interface SectionUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  summary?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneWithoutSectionInput>;
  notableProjects?: Maybe<NotableProjectsUpdateManyInput>;
  testimonials?: Maybe<TestimonialUpdateManyInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
}

export interface GalleryUpdateOneWithoutSectionInput {
  create?: Maybe<GalleryCreateWithoutSectionInput>;
  update?: Maybe<GalleryUpdateWithoutSectionDataInput>;
  upsert?: Maybe<GalleryUpsertWithoutSectionInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GalleryWhereUniqueInput>;
}

export interface GalleryUpdateWithoutSectionDataInput {
  summary?: Maybe<String>;
  images?: Maybe<GalleryImageUpdateManyWithoutGalleryInput>;
}

export interface GalleryImageUpdateManyWithoutGalleryInput {
  create?: Maybe<
    | GalleryImageCreateWithoutGalleryInput[]
    | GalleryImageCreateWithoutGalleryInput
  >;
  delete?: Maybe<GalleryImageWhereUniqueInput[] | GalleryImageWhereUniqueInput>;
  connect?: Maybe<
    GalleryImageWhereUniqueInput[] | GalleryImageWhereUniqueInput
  >;
  set?: Maybe<GalleryImageWhereUniqueInput[] | GalleryImageWhereUniqueInput>;
  disconnect?: Maybe<
    GalleryImageWhereUniqueInput[] | GalleryImageWhereUniqueInput
  >;
  update?: Maybe<
    | GalleryImageUpdateWithWhereUniqueWithoutGalleryInput[]
    | GalleryImageUpdateWithWhereUniqueWithoutGalleryInput
  >;
  upsert?: Maybe<
    | GalleryImageUpsertWithWhereUniqueWithoutGalleryInput[]
    | GalleryImageUpsertWithWhereUniqueWithoutGalleryInput
  >;
  deleteMany?: Maybe<
    GalleryImageScalarWhereInput[] | GalleryImageScalarWhereInput
  >;
  updateMany?: Maybe<
    | GalleryImageUpdateManyWithWhereNestedInput[]
    | GalleryImageUpdateManyWithWhereNestedInput
  >;
}

export interface GalleryImageUpdateWithWhereUniqueWithoutGalleryInput {
  where: GalleryImageWhereUniqueInput;
  data: GalleryImageUpdateWithoutGalleryDataInput;
}

export interface GalleryImageUpdateWithoutGalleryDataInput {
  img?: Maybe<String>;
  title?: Maybe<String>;
}

export interface GalleryImageUpsertWithWhereUniqueWithoutGalleryInput {
  where: GalleryImageWhereUniqueInput;
  update: GalleryImageUpdateWithoutGalleryDataInput;
  create: GalleryImageCreateWithoutGalleryInput;
}

export interface GalleryImageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<GalleryImageScalarWhereInput[] | GalleryImageScalarWhereInput>;
  OR?: Maybe<GalleryImageScalarWhereInput[] | GalleryImageScalarWhereInput>;
  NOT?: Maybe<GalleryImageScalarWhereInput[] | GalleryImageScalarWhereInput>;
}

export interface GalleryImageUpdateManyWithWhereNestedInput {
  where: GalleryImageScalarWhereInput;
  data: GalleryImageUpdateManyDataInput;
}

export interface GalleryImageUpdateManyDataInput {
  img?: Maybe<String>;
  title?: Maybe<String>;
}

export interface GalleryUpsertWithoutSectionInput {
  update: GalleryUpdateWithoutSectionDataInput;
  create: GalleryCreateWithoutSectionInput;
}

export interface SectionUpsertWithWhereUniqueWithoutUserInput {
  where: SectionWhereUniqueInput;
  update: SectionUpdateWithoutUserDataInput;
  create: SectionCreateWithoutUserInput;
}

export interface SectionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  showreel?: Maybe<String>;
  showreel_not?: Maybe<String>;
  showreel_in?: Maybe<String[] | String>;
  showreel_not_in?: Maybe<String[] | String>;
  showreel_lt?: Maybe<String>;
  showreel_lte?: Maybe<String>;
  showreel_gt?: Maybe<String>;
  showreel_gte?: Maybe<String>;
  showreel_contains?: Maybe<String>;
  showreel_not_contains?: Maybe<String>;
  showreel_starts_with?: Maybe<String>;
  showreel_not_starts_with?: Maybe<String>;
  showreel_ends_with?: Maybe<String>;
  showreel_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  AND?: Maybe<SectionScalarWhereInput[] | SectionScalarWhereInput>;
  OR?: Maybe<SectionScalarWhereInput[] | SectionScalarWhereInput>;
  NOT?: Maybe<SectionScalarWhereInput[] | SectionScalarWhereInput>;
}

export interface SectionUpdateManyWithWhereNestedInput {
  where: SectionScalarWhereInput;
  data: SectionUpdateManyDataInput;
}

export interface SectionUpdateManyDataInput {
  title?: Maybe<String>;
  summary?: Maybe<String>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
}

export interface ConversationUpdateManyWithoutParticipantsInput {
  create?: Maybe<
    | ConversationCreateWithoutParticipantsInput[]
    | ConversationCreateWithoutParticipantsInput
  >;
  delete?: Maybe<ConversationWhereUniqueInput[] | ConversationWhereUniqueInput>;
  connect?: Maybe<
    ConversationWhereUniqueInput[] | ConversationWhereUniqueInput
  >;
  set?: Maybe<ConversationWhereUniqueInput[] | ConversationWhereUniqueInput>;
  disconnect?: Maybe<
    ConversationWhereUniqueInput[] | ConversationWhereUniqueInput
  >;
  update?: Maybe<
    | ConversationUpdateWithWhereUniqueWithoutParticipantsInput[]
    | ConversationUpdateWithWhereUniqueWithoutParticipantsInput
  >;
  upsert?: Maybe<
    | ConversationUpsertWithWhereUniqueWithoutParticipantsInput[]
    | ConversationUpsertWithWhereUniqueWithoutParticipantsInput
  >;
  deleteMany?: Maybe<
    ConversationScalarWhereInput[] | ConversationScalarWhereInput
  >;
  updateMany?: Maybe<
    | ConversationUpdateManyWithWhereNestedInput[]
    | ConversationUpdateManyWithWhereNestedInput
  >;
}

export interface ConversationUpdateWithWhereUniqueWithoutParticipantsInput {
  where: ConversationWhereUniqueInput;
  data: ConversationUpdateWithoutParticipantsDataInput;
}

export interface ConversationUpdateWithoutParticipantsDataInput {
  messages?: Maybe<MessageUpdateManyWithoutConversationInput>;
  unreadMessages?: Maybe<String>;
  job?: Maybe<JobUpdateOneWithoutConversationsInput>;
}

export interface MessageUpdateManyWithoutConversationInput {
  create?: Maybe<
    | MessageCreateWithoutConversationInput[]
    | MessageCreateWithoutConversationInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutConversationInput[]
    | MessageUpdateWithWhereUniqueWithoutConversationInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutConversationInput[]
    | MessageUpsertWithWhereUniqueWithoutConversationInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateWithWhereUniqueWithoutConversationInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutConversationDataInput;
}

export interface MessageUpdateWithoutConversationDataInput {
  messageStr?: Maybe<String>;
  job?: Maybe<JobUpdateOneWithoutMessagesInput>;
  sender?: Maybe<UserUpdateOneRequiredWithoutMessagesSentInput>;
  receiver?: Maybe<UserUpdateOneWithoutMessagesReceivedInput>;
  status?: Maybe<String>;
}

export interface JobUpdateOneWithoutMessagesInput {
  create?: Maybe<JobCreateWithoutMessagesInput>;
  update?: Maybe<JobUpdateWithoutMessagesDataInput>;
  upsert?: Maybe<JobUpsertWithoutMessagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<JobWhereUniqueInput>;
}

export interface JobUpdateWithoutMessagesDataInput {
  name?: Maybe<String>;
  keywords?: Maybe<JobUpdatekeywordsInput>;
  img?: Maybe<String>;
  summary?: Maybe<String>;
  creativeSummary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneInput>;
  showreel?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutJobsInput>;
  type?: Maybe<String>;
  game?: Maybe<GameUpdateOneRequiredWithoutJobsInput>;
  submitted?: Maybe<Boolean>;
  invite?: Maybe<InviteUpdateManyWithoutJobInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutJobInput>;
}

export interface GameUpdateOneRequiredWithoutJobsInput {
  create?: Maybe<GameCreateWithoutJobsInput>;
  update?: Maybe<GameUpdateWithoutJobsDataInput>;
  upsert?: Maybe<GameUpsertWithoutJobsInput>;
  connect?: Maybe<GameWhereUniqueInput>;
}

export interface GameUpdateWithoutJobsDataInput {
  name?: Maybe<String>;
  keywords?: Maybe<GameUpdatekeywordsInput>;
  img?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneInput>;
  showreel?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutGamesInput>;
  type?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutGamesInput {
  create?: Maybe<UserCreateWithoutGamesInput>;
  update?: Maybe<UserUpdateWithoutGamesDataInput>;
  upsert?: Maybe<UserUpsertWithoutGamesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutGamesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserUpdatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutUserInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobUpdateManyWithoutUserInput>;
  invites?: Maybe<InviteUpdateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteUpdateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageUpdateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageUpdateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractUpdateManyWithoutUserInput>;
}

export interface JobUpdateManyWithoutUserInput {
  create?: Maybe<JobCreateWithoutUserInput[] | JobCreateWithoutUserInput>;
  delete?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
  connect?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
  set?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
  disconnect?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
  update?: Maybe<
    | JobUpdateWithWhereUniqueWithoutUserInput[]
    | JobUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | JobUpsertWithWhereUniqueWithoutUserInput[]
    | JobUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<JobScalarWhereInput[] | JobScalarWhereInput>;
  updateMany?: Maybe<
    JobUpdateManyWithWhereNestedInput[] | JobUpdateManyWithWhereNestedInput
  >;
}

export interface JobUpdateWithWhereUniqueWithoutUserInput {
  where: JobWhereUniqueInput;
  data: JobUpdateWithoutUserDataInput;
}

export interface JobUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  keywords?: Maybe<JobUpdatekeywordsInput>;
  img?: Maybe<String>;
  summary?: Maybe<String>;
  creativeSummary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
  game?: Maybe<GameUpdateOneRequiredWithoutJobsInput>;
  submitted?: Maybe<Boolean>;
  invite?: Maybe<InviteUpdateManyWithoutJobInput>;
  messages?: Maybe<MessageUpdateManyWithoutJobInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutJobInput>;
}

export interface InviteUpdateManyWithoutJobInput {
  create?: Maybe<InviteCreateWithoutJobInput[] | InviteCreateWithoutJobInput>;
  delete?: Maybe<InviteWhereUniqueInput[] | InviteWhereUniqueInput>;
  connect?: Maybe<InviteWhereUniqueInput[] | InviteWhereUniqueInput>;
  set?: Maybe<InviteWhereUniqueInput[] | InviteWhereUniqueInput>;
  disconnect?: Maybe<InviteWhereUniqueInput[] | InviteWhereUniqueInput>;
  update?: Maybe<
    | InviteUpdateWithWhereUniqueWithoutJobInput[]
    | InviteUpdateWithWhereUniqueWithoutJobInput
  >;
  upsert?: Maybe<
    | InviteUpsertWithWhereUniqueWithoutJobInput[]
    | InviteUpsertWithWhereUniqueWithoutJobInput
  >;
  deleteMany?: Maybe<InviteScalarWhereInput[] | InviteScalarWhereInput>;
  updateMany?: Maybe<
    | InviteUpdateManyWithWhereNestedInput[]
    | InviteUpdateManyWithWhereNestedInput
  >;
}

export interface InviteUpdateWithWhereUniqueWithoutJobInput {
  where: InviteWhereUniqueInput;
  data: InviteUpdateWithoutJobDataInput;
}

export interface InviteUpdateWithoutJobDataInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  status?: Maybe<String>;
  game?: Maybe<GameUpdateOneRequiredInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutInvitesInput>;
  receiver?: Maybe<UserUpdateOneRequiredWithoutInvitesReceivedInput>;
  contracts?: Maybe<ContractUpdateManyInput>;
}

export interface GameUpdateOneRequiredInput {
  create?: Maybe<GameCreateInput>;
  update?: Maybe<GameUpdateDataInput>;
  upsert?: Maybe<GameUpsertNestedInput>;
  connect?: Maybe<GameWhereUniqueInput>;
}

export interface GameUpdateDataInput {
  name?: Maybe<String>;
  keywords?: Maybe<GameUpdatekeywordsInput>;
  img?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneInput>;
  showreel?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutGamesInput>;
  type?: Maybe<String>;
  jobs?: Maybe<JobUpdateManyWithoutGameInput>;
}

export interface GameUpsertNestedInput {
  update: GameUpdateDataInput;
  create: GameCreateInput;
}

export interface UserUpdateOneRequiredWithoutInvitesInput {
  create?: Maybe<UserCreateWithoutInvitesInput>;
  update?: Maybe<UserUpdateWithoutInvitesDataInput>;
  upsert?: Maybe<UserUpsertWithoutInvitesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutInvitesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserUpdatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutUserInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  games?: Maybe<GameUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobUpdateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteUpdateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageUpdateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageUpdateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractUpdateManyWithoutUserInput>;
}

export interface InviteUpdateManyWithoutReceiverInput {
  create?: Maybe<
    InviteCreateWithoutReceiverInput[] | InviteCreateWithoutReceiverInput
  >;
  delete?: Maybe<InviteWhereUniqueInput[] | InviteWhereUniqueInput>;
  connect?: Maybe<InviteWhereUniqueInput[] | InviteWhereUniqueInput>;
  set?: Maybe<InviteWhereUniqueInput[] | InviteWhereUniqueInput>;
  disconnect?: Maybe<InviteWhereUniqueInput[] | InviteWhereUniqueInput>;
  update?: Maybe<
    | InviteUpdateWithWhereUniqueWithoutReceiverInput[]
    | InviteUpdateWithWhereUniqueWithoutReceiverInput
  >;
  upsert?: Maybe<
    | InviteUpsertWithWhereUniqueWithoutReceiverInput[]
    | InviteUpsertWithWhereUniqueWithoutReceiverInput
  >;
  deleteMany?: Maybe<InviteScalarWhereInput[] | InviteScalarWhereInput>;
  updateMany?: Maybe<
    | InviteUpdateManyWithWhereNestedInput[]
    | InviteUpdateManyWithWhereNestedInput
  >;
}

export interface InviteUpdateWithWhereUniqueWithoutReceiverInput {
  where: InviteWhereUniqueInput;
  data: InviteUpdateWithoutReceiverDataInput;
}

export interface InviteUpdateWithoutReceiverDataInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  status?: Maybe<String>;
  game?: Maybe<GameUpdateOneRequiredInput>;
  job?: Maybe<JobUpdateOneRequiredWithoutInviteInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutInvitesInput>;
  contracts?: Maybe<ContractUpdateManyInput>;
}

export interface JobUpdateOneRequiredWithoutInviteInput {
  create?: Maybe<JobCreateWithoutInviteInput>;
  update?: Maybe<JobUpdateWithoutInviteDataInput>;
  upsert?: Maybe<JobUpsertWithoutInviteInput>;
  connect?: Maybe<JobWhereUniqueInput>;
}

export interface JobUpdateWithoutInviteDataInput {
  name?: Maybe<String>;
  keywords?: Maybe<JobUpdatekeywordsInput>;
  img?: Maybe<String>;
  summary?: Maybe<String>;
  creativeSummary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneInput>;
  showreel?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutJobsInput>;
  type?: Maybe<String>;
  game?: Maybe<GameUpdateOneRequiredWithoutJobsInput>;
  submitted?: Maybe<Boolean>;
  messages?: Maybe<MessageUpdateManyWithoutJobInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutJobInput>;
}

export interface MessageUpdateManyWithoutJobInput {
  create?: Maybe<MessageCreateWithoutJobInput[] | MessageCreateWithoutJobInput>;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutJobInput[]
    | MessageUpdateWithWhereUniqueWithoutJobInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutJobInput[]
    | MessageUpsertWithWhereUniqueWithoutJobInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateWithWhereUniqueWithoutJobInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutJobDataInput;
}

export interface MessageUpdateWithoutJobDataInput {
  messageStr?: Maybe<String>;
  sender?: Maybe<UserUpdateOneRequiredWithoutMessagesSentInput>;
  receiver?: Maybe<UserUpdateOneWithoutMessagesReceivedInput>;
  status?: Maybe<String>;
  conversation?: Maybe<ConversationUpdateOneWithoutMessagesInput>;
}

export interface UserUpdateOneRequiredWithoutMessagesSentInput {
  create?: Maybe<UserCreateWithoutMessagesSentInput>;
  update?: Maybe<UserUpdateWithoutMessagesSentDataInput>;
  upsert?: Maybe<UserUpsertWithoutMessagesSentInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMessagesSentDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserUpdatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutUserInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  games?: Maybe<GameUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobUpdateManyWithoutUserInput>;
  invites?: Maybe<InviteUpdateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteUpdateManyWithoutReceiverInput>;
  messagesReceived?: Maybe<MessageUpdateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractUpdateManyWithoutUserInput>;
}

export interface InviteUpdateManyWithoutUserInput {
  create?: Maybe<InviteCreateWithoutUserInput[] | InviteCreateWithoutUserInput>;
  delete?: Maybe<InviteWhereUniqueInput[] | InviteWhereUniqueInput>;
  connect?: Maybe<InviteWhereUniqueInput[] | InviteWhereUniqueInput>;
  set?: Maybe<InviteWhereUniqueInput[] | InviteWhereUniqueInput>;
  disconnect?: Maybe<InviteWhereUniqueInput[] | InviteWhereUniqueInput>;
  update?: Maybe<
    | InviteUpdateWithWhereUniqueWithoutUserInput[]
    | InviteUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | InviteUpsertWithWhereUniqueWithoutUserInput[]
    | InviteUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<InviteScalarWhereInput[] | InviteScalarWhereInput>;
  updateMany?: Maybe<
    | InviteUpdateManyWithWhereNestedInput[]
    | InviteUpdateManyWithWhereNestedInput
  >;
}

export interface InviteUpdateWithWhereUniqueWithoutUserInput {
  where: InviteWhereUniqueInput;
  data: InviteUpdateWithoutUserDataInput;
}

export interface InviteUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  status?: Maybe<String>;
  game?: Maybe<GameUpdateOneRequiredInput>;
  job?: Maybe<JobUpdateOneRequiredWithoutInviteInput>;
  receiver?: Maybe<UserUpdateOneRequiredWithoutInvitesReceivedInput>;
  contracts?: Maybe<ContractUpdateManyInput>;
}

export interface UserUpdateOneRequiredWithoutInvitesReceivedInput {
  create?: Maybe<UserCreateWithoutInvitesReceivedInput>;
  update?: Maybe<UserUpdateWithoutInvitesReceivedDataInput>;
  upsert?: Maybe<UserUpsertWithoutInvitesReceivedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutInvitesReceivedDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserUpdatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutUserInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  games?: Maybe<GameUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobUpdateManyWithoutUserInput>;
  invites?: Maybe<InviteUpdateManyWithoutUserInput>;
  messagesSent?: Maybe<MessageUpdateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageUpdateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractUpdateManyWithoutUserInput>;
}

export interface MessageUpdateManyWithoutSenderInput {
  create?: Maybe<
    MessageCreateWithoutSenderInput[] | MessageCreateWithoutSenderInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    | MessageUpdateWithWhereUniqueWithoutSenderInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    | MessageUpsertWithWhereUniqueWithoutSenderInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateWithWhereUniqueWithoutSenderInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutSenderDataInput;
}

export interface MessageUpdateWithoutSenderDataInput {
  messageStr?: Maybe<String>;
  job?: Maybe<JobUpdateOneWithoutMessagesInput>;
  receiver?: Maybe<UserUpdateOneWithoutMessagesReceivedInput>;
  status?: Maybe<String>;
  conversation?: Maybe<ConversationUpdateOneWithoutMessagesInput>;
}

export interface UserUpdateOneWithoutMessagesReceivedInput {
  create?: Maybe<UserCreateWithoutMessagesReceivedInput>;
  update?: Maybe<UserUpdateWithoutMessagesReceivedDataInput>;
  upsert?: Maybe<UserUpsertWithoutMessagesReceivedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMessagesReceivedDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserUpdatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutUserInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  games?: Maybe<GameUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobUpdateManyWithoutUserInput>;
  invites?: Maybe<InviteUpdateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteUpdateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageUpdateManyWithoutSenderInput>;
  contracts?: Maybe<ContractUpdateManyWithoutUserInput>;
}

export interface ContractUpdateManyWithoutUserInput {
  create?: Maybe<
    ContractCreateWithoutUserInput[] | ContractCreateWithoutUserInput
  >;
  delete?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  connect?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  set?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  disconnect?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  update?: Maybe<
    | ContractUpdateWithWhereUniqueWithoutUserInput[]
    | ContractUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ContractUpsertWithWhereUniqueWithoutUserInput[]
    | ContractUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<ContractScalarWhereInput[] | ContractScalarWhereInput>;
  updateMany?: Maybe<
    | ContractUpdateManyWithWhereNestedInput[]
    | ContractUpdateManyWithWhereNestedInput
  >;
}

export interface ContractUpdateWithWhereUniqueWithoutUserInput {
  where: ContractWhereUniqueInput;
  data: ContractUpdateWithoutUserDataInput;
}

export interface ContractUpdateWithoutUserDataInput {
  notes?: Maybe<String>;
  deadline?: Maybe<String>;
  cost?: Maybe<Int>;
  paymentTerms?: Maybe<PaymentTermUpdateManyWithoutContractInput>;
  currency?: Maybe<String>;
  job?: Maybe<JobUpdateOneRequiredInput>;
  status?: Maybe<String>;
}

export interface ContractUpsertWithWhereUniqueWithoutUserInput {
  where: ContractWhereUniqueInput;
  update: ContractUpdateWithoutUserDataInput;
  create: ContractCreateWithoutUserInput;
}

export interface ContractScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  deadline?: Maybe<String>;
  deadline_not?: Maybe<String>;
  deadline_in?: Maybe<String[] | String>;
  deadline_not_in?: Maybe<String[] | String>;
  deadline_lt?: Maybe<String>;
  deadline_lte?: Maybe<String>;
  deadline_gt?: Maybe<String>;
  deadline_gte?: Maybe<String>;
  deadline_contains?: Maybe<String>;
  deadline_not_contains?: Maybe<String>;
  deadline_starts_with?: Maybe<String>;
  deadline_not_starts_with?: Maybe<String>;
  deadline_ends_with?: Maybe<String>;
  deadline_not_ends_with?: Maybe<String>;
  cost?: Maybe<Int>;
  cost_not?: Maybe<Int>;
  cost_in?: Maybe<Int[] | Int>;
  cost_not_in?: Maybe<Int[] | Int>;
  cost_lt?: Maybe<Int>;
  cost_lte?: Maybe<Int>;
  cost_gt?: Maybe<Int>;
  cost_gte?: Maybe<Int>;
  currency?: Maybe<String>;
  currency_not?: Maybe<String>;
  currency_in?: Maybe<String[] | String>;
  currency_not_in?: Maybe<String[] | String>;
  currency_lt?: Maybe<String>;
  currency_lte?: Maybe<String>;
  currency_gt?: Maybe<String>;
  currency_gte?: Maybe<String>;
  currency_contains?: Maybe<String>;
  currency_not_contains?: Maybe<String>;
  currency_starts_with?: Maybe<String>;
  currency_not_starts_with?: Maybe<String>;
  currency_ends_with?: Maybe<String>;
  currency_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ContractScalarWhereInput[] | ContractScalarWhereInput>;
  OR?: Maybe<ContractScalarWhereInput[] | ContractScalarWhereInput>;
  NOT?: Maybe<ContractScalarWhereInput[] | ContractScalarWhereInput>;
}

export interface ContractUpdateManyWithWhereNestedInput {
  where: ContractScalarWhereInput;
  data: ContractUpdateManyDataInput;
}

export interface ContractUpdateManyDataInput {
  notes?: Maybe<String>;
  deadline?: Maybe<String>;
  cost?: Maybe<Int>;
  currency?: Maybe<String>;
  status?: Maybe<String>;
}

export interface UserUpsertWithoutMessagesReceivedInput {
  update: UserUpdateWithoutMessagesReceivedDataInput;
  create: UserCreateWithoutMessagesReceivedInput;
}

export interface ConversationUpdateOneWithoutMessagesInput {
  create?: Maybe<ConversationCreateWithoutMessagesInput>;
  update?: Maybe<ConversationUpdateWithoutMessagesDataInput>;
  upsert?: Maybe<ConversationUpsertWithoutMessagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ConversationWhereUniqueInput>;
}

export interface ConversationUpdateWithoutMessagesDataInput {
  unreadMessages?: Maybe<String>;
  participants?: Maybe<UserUpdateManyWithoutConversationsInput>;
  job?: Maybe<JobUpdateOneWithoutConversationsInput>;
}

export interface UserUpdateManyWithoutConversationsInput {
  create?: Maybe<
    UserCreateWithoutConversationsInput[] | UserCreateWithoutConversationsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutConversationsInput[]
    | UserUpdateWithWhereUniqueWithoutConversationsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutConversationsInput[]
    | UserUpsertWithWhereUniqueWithoutConversationsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutConversationsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutConversationsDataInput;
}

export interface UserUpdateWithoutConversationsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserUpdatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutUserInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  games?: Maybe<GameUpdateManyWithoutUserInput>;
  jobs?: Maybe<JobUpdateManyWithoutUserInput>;
  invites?: Maybe<InviteUpdateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteUpdateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageUpdateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageUpdateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractUpdateManyWithoutUserInput>;
}

export interface MessageUpdateManyWithoutReceiverInput {
  create?: Maybe<
    MessageCreateWithoutReceiverInput[] | MessageCreateWithoutReceiverInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutReceiverInput[]
    | MessageUpdateWithWhereUniqueWithoutReceiverInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutReceiverInput[]
    | MessageUpsertWithWhereUniqueWithoutReceiverInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateWithWhereUniqueWithoutReceiverInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutReceiverDataInput;
}

export interface MessageUpdateWithoutReceiverDataInput {
  messageStr?: Maybe<String>;
  job?: Maybe<JobUpdateOneWithoutMessagesInput>;
  sender?: Maybe<UserUpdateOneRequiredWithoutMessagesSentInput>;
  status?: Maybe<String>;
  conversation?: Maybe<ConversationUpdateOneWithoutMessagesInput>;
}

export interface MessageUpsertWithWhereUniqueWithoutReceiverInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutReceiverDataInput;
  create: MessageCreateWithoutReceiverInput;
}

export interface MessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  messageStr?: Maybe<String>;
  messageStr_not?: Maybe<String>;
  messageStr_in?: Maybe<String[] | String>;
  messageStr_not_in?: Maybe<String[] | String>;
  messageStr_lt?: Maybe<String>;
  messageStr_lte?: Maybe<String>;
  messageStr_gt?: Maybe<String>;
  messageStr_gte?: Maybe<String>;
  messageStr_contains?: Maybe<String>;
  messageStr_not_contains?: Maybe<String>;
  messageStr_starts_with?: Maybe<String>;
  messageStr_not_starts_with?: Maybe<String>;
  messageStr_ends_with?: Maybe<String>;
  messageStr_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  AND?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  OR?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  NOT?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface MessageUpdateManyDataInput {
  messageStr?: Maybe<String>;
  status?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutConversationsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutConversationsDataInput;
  create: UserCreateWithoutConversationsInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  profileImg?: Maybe<String>;
  profileImg_not?: Maybe<String>;
  profileImg_in?: Maybe<String[] | String>;
  profileImg_not_in?: Maybe<String[] | String>;
  profileImg_lt?: Maybe<String>;
  profileImg_lte?: Maybe<String>;
  profileImg_gt?: Maybe<String>;
  profileImg_gte?: Maybe<String>;
  profileImg_contains?: Maybe<String>;
  profileImg_not_contains?: Maybe<String>;
  profileImg_starts_with?: Maybe<String>;
  profileImg_not_starts_with?: Maybe<String>;
  profileImg_ends_with?: Maybe<String>;
  profileImg_not_ends_with?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileImgStyle_not?: Maybe<String>;
  profileImgStyle_in?: Maybe<String[] | String>;
  profileImgStyle_not_in?: Maybe<String[] | String>;
  profileImgStyle_lt?: Maybe<String>;
  profileImgStyle_lte?: Maybe<String>;
  profileImgStyle_gt?: Maybe<String>;
  profileImgStyle_gte?: Maybe<String>;
  profileImgStyle_contains?: Maybe<String>;
  profileImgStyle_not_contains?: Maybe<String>;
  profileImgStyle_starts_with?: Maybe<String>;
  profileImgStyle_not_starts_with?: Maybe<String>;
  profileImgStyle_ends_with?: Maybe<String>;
  profileImgStyle_not_ends_with?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBG_not?: Maybe<String>;
  profileBG_in?: Maybe<String[] | String>;
  profileBG_not_in?: Maybe<String[] | String>;
  profileBG_lt?: Maybe<String>;
  profileBG_lte?: Maybe<String>;
  profileBG_gt?: Maybe<String>;
  profileBG_gte?: Maybe<String>;
  profileBG_contains?: Maybe<String>;
  profileBG_not_contains?: Maybe<String>;
  profileBG_starts_with?: Maybe<String>;
  profileBG_not_starts_with?: Maybe<String>;
  profileBG_ends_with?: Maybe<String>;
  profileBG_not_ends_with?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  profileBGStyle_not?: Maybe<String>;
  profileBGStyle_in?: Maybe<String[] | String>;
  profileBGStyle_not_in?: Maybe<String[] | String>;
  profileBGStyle_lt?: Maybe<String>;
  profileBGStyle_lte?: Maybe<String>;
  profileBGStyle_gt?: Maybe<String>;
  profileBGStyle_gte?: Maybe<String>;
  profileBGStyle_contains?: Maybe<String>;
  profileBGStyle_not_contains?: Maybe<String>;
  profileBGStyle_starts_with?: Maybe<String>;
  profileBGStyle_not_starts_with?: Maybe<String>;
  profileBGStyle_ends_with?: Maybe<String>;
  profileBGStyle_not_ends_with?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  autosave_not?: Maybe<Boolean>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserUpdatefavouritesInput>;
  img?: Maybe<String>;
}

export interface JobUpdateOneWithoutConversationsInput {
  create?: Maybe<JobCreateWithoutConversationsInput>;
  update?: Maybe<JobUpdateWithoutConversationsDataInput>;
  upsert?: Maybe<JobUpsertWithoutConversationsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<JobWhereUniqueInput>;
}

export interface JobUpdateWithoutConversationsDataInput {
  name?: Maybe<String>;
  keywords?: Maybe<JobUpdatekeywordsInput>;
  img?: Maybe<String>;
  summary?: Maybe<String>;
  creativeSummary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneInput>;
  showreel?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutJobsInput>;
  type?: Maybe<String>;
  game?: Maybe<GameUpdateOneRequiredWithoutJobsInput>;
  submitted?: Maybe<Boolean>;
  invite?: Maybe<InviteUpdateManyWithoutJobInput>;
  messages?: Maybe<MessageUpdateManyWithoutJobInput>;
}

export interface JobUpsertWithoutConversationsInput {
  update: JobUpdateWithoutConversationsDataInput;
  create: JobCreateWithoutConversationsInput;
}

export interface ConversationUpsertWithoutMessagesInput {
  update: ConversationUpdateWithoutMessagesDataInput;
  create: ConversationCreateWithoutMessagesInput;
}

export interface MessageUpsertWithWhereUniqueWithoutSenderInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutSenderDataInput;
  create: MessageCreateWithoutSenderInput;
}

export interface UserUpsertWithoutInvitesReceivedInput {
  update: UserUpdateWithoutInvitesReceivedDataInput;
  create: UserCreateWithoutInvitesReceivedInput;
}

export interface ContractUpdateManyInput {
  create?: Maybe<ContractCreateInput[] | ContractCreateInput>;
  update?: Maybe<
    | ContractUpdateWithWhereUniqueNestedInput[]
    | ContractUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ContractUpsertWithWhereUniqueNestedInput[]
    | ContractUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  connect?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  set?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  disconnect?: Maybe<ContractWhereUniqueInput[] | ContractWhereUniqueInput>;
  deleteMany?: Maybe<ContractScalarWhereInput[] | ContractScalarWhereInput>;
  updateMany?: Maybe<
    | ContractUpdateManyWithWhereNestedInput[]
    | ContractUpdateManyWithWhereNestedInput
  >;
}

export interface ContractUpdateWithWhereUniqueNestedInput {
  where: ContractWhereUniqueInput;
  data: ContractUpdateDataInput;
}

export interface ContractUpdateDataInput {
  notes?: Maybe<String>;
  deadline?: Maybe<String>;
  cost?: Maybe<Int>;
  paymentTerms?: Maybe<PaymentTermUpdateManyWithoutContractInput>;
  currency?: Maybe<String>;
  job?: Maybe<JobUpdateOneRequiredInput>;
  status?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutContractsInput>;
}

export interface UserUpdateOneWithoutContractsInput {
  create?: Maybe<UserCreateWithoutContractsInput>;
  update?: Maybe<UserUpdateWithoutContractsDataInput>;
  upsert?: Maybe<UserUpsertWithoutContractsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutContractsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserUpdatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutUserInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  games?: Maybe<GameUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobUpdateManyWithoutUserInput>;
  invites?: Maybe<InviteUpdateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteUpdateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageUpdateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageUpdateManyWithoutReceiverInput>;
}

export interface UserUpsertWithoutContractsInput {
  update: UserUpdateWithoutContractsDataInput;
  create: UserCreateWithoutContractsInput;
}

export interface ContractUpsertWithWhereUniqueNestedInput {
  where: ContractWhereUniqueInput;
  update: ContractUpdateDataInput;
  create: ContractCreateInput;
}

export interface InviteUpsertWithWhereUniqueWithoutUserInput {
  where: InviteWhereUniqueInput;
  update: InviteUpdateWithoutUserDataInput;
  create: InviteCreateWithoutUserInput;
}

export interface InviteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  AND?: Maybe<InviteScalarWhereInput[] | InviteScalarWhereInput>;
  OR?: Maybe<InviteScalarWhereInput[] | InviteScalarWhereInput>;
  NOT?: Maybe<InviteScalarWhereInput[] | InviteScalarWhereInput>;
}

export interface InviteUpdateManyWithWhereNestedInput {
  where: InviteScalarWhereInput;
  data: InviteUpdateManyDataInput;
}

export interface InviteUpdateManyDataInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  status?: Maybe<String>;
}

export interface UserUpsertWithoutMessagesSentInput {
  update: UserUpdateWithoutMessagesSentDataInput;
  create: UserCreateWithoutMessagesSentInput;
}

export interface MessageUpsertWithWhereUniqueWithoutJobInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutJobDataInput;
  create: MessageCreateWithoutJobInput;
}

export interface ConversationUpdateManyWithoutJobInput {
  create?: Maybe<
    ConversationCreateWithoutJobInput[] | ConversationCreateWithoutJobInput
  >;
  delete?: Maybe<ConversationWhereUniqueInput[] | ConversationWhereUniqueInput>;
  connect?: Maybe<
    ConversationWhereUniqueInput[] | ConversationWhereUniqueInput
  >;
  set?: Maybe<ConversationWhereUniqueInput[] | ConversationWhereUniqueInput>;
  disconnect?: Maybe<
    ConversationWhereUniqueInput[] | ConversationWhereUniqueInput
  >;
  update?: Maybe<
    | ConversationUpdateWithWhereUniqueWithoutJobInput[]
    | ConversationUpdateWithWhereUniqueWithoutJobInput
  >;
  upsert?: Maybe<
    | ConversationUpsertWithWhereUniqueWithoutJobInput[]
    | ConversationUpsertWithWhereUniqueWithoutJobInput
  >;
  deleteMany?: Maybe<
    ConversationScalarWhereInput[] | ConversationScalarWhereInput
  >;
  updateMany?: Maybe<
    | ConversationUpdateManyWithWhereNestedInput[]
    | ConversationUpdateManyWithWhereNestedInput
  >;
}

export interface ConversationUpdateWithWhereUniqueWithoutJobInput {
  where: ConversationWhereUniqueInput;
  data: ConversationUpdateWithoutJobDataInput;
}

export interface ConversationUpdateWithoutJobDataInput {
  messages?: Maybe<MessageUpdateManyWithoutConversationInput>;
  unreadMessages?: Maybe<String>;
  participants?: Maybe<UserUpdateManyWithoutConversationsInput>;
}

export interface ConversationUpsertWithWhereUniqueWithoutJobInput {
  where: ConversationWhereUniqueInput;
  update: ConversationUpdateWithoutJobDataInput;
  create: ConversationCreateWithoutJobInput;
}

export interface ConversationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  unreadMessages?: Maybe<String>;
  unreadMessages_not?: Maybe<String>;
  unreadMessages_in?: Maybe<String[] | String>;
  unreadMessages_not_in?: Maybe<String[] | String>;
  unreadMessages_lt?: Maybe<String>;
  unreadMessages_lte?: Maybe<String>;
  unreadMessages_gt?: Maybe<String>;
  unreadMessages_gte?: Maybe<String>;
  unreadMessages_contains?: Maybe<String>;
  unreadMessages_not_contains?: Maybe<String>;
  unreadMessages_starts_with?: Maybe<String>;
  unreadMessages_not_starts_with?: Maybe<String>;
  unreadMessages_ends_with?: Maybe<String>;
  unreadMessages_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ConversationScalarWhereInput[] | ConversationScalarWhereInput>;
  OR?: Maybe<ConversationScalarWhereInput[] | ConversationScalarWhereInput>;
  NOT?: Maybe<ConversationScalarWhereInput[] | ConversationScalarWhereInput>;
}

export interface ConversationUpdateManyWithWhereNestedInput {
  where: ConversationScalarWhereInput;
  data: ConversationUpdateManyDataInput;
}

export interface ConversationUpdateManyDataInput {
  unreadMessages?: Maybe<String>;
}

export interface JobUpsertWithoutInviteInput {
  update: JobUpdateWithoutInviteDataInput;
  create: JobCreateWithoutInviteInput;
}

export interface InviteUpsertWithWhereUniqueWithoutReceiverInput {
  where: InviteWhereUniqueInput;
  update: InviteUpdateWithoutReceiverDataInput;
  create: InviteCreateWithoutReceiverInput;
}

export interface UserUpsertWithoutInvitesInput {
  update: UserUpdateWithoutInvitesDataInput;
  create: UserCreateWithoutInvitesInput;
}

export interface InviteUpsertWithWhereUniqueWithoutJobInput {
  where: InviteWhereUniqueInput;
  update: InviteUpdateWithoutJobDataInput;
  create: InviteCreateWithoutJobInput;
}

export interface JobUpsertWithWhereUniqueWithoutUserInput {
  where: JobWhereUniqueInput;
  update: JobUpdateWithoutUserDataInput;
  create: JobCreateWithoutUserInput;
}

export interface JobScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  creativeSummary?: Maybe<String>;
  creativeSummary_not?: Maybe<String>;
  creativeSummary_in?: Maybe<String[] | String>;
  creativeSummary_not_in?: Maybe<String[] | String>;
  creativeSummary_lt?: Maybe<String>;
  creativeSummary_lte?: Maybe<String>;
  creativeSummary_gt?: Maybe<String>;
  creativeSummary_gte?: Maybe<String>;
  creativeSummary_contains?: Maybe<String>;
  creativeSummary_not_contains?: Maybe<String>;
  creativeSummary_starts_with?: Maybe<String>;
  creativeSummary_not_starts_with?: Maybe<String>;
  creativeSummary_ends_with?: Maybe<String>;
  creativeSummary_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  showreel?: Maybe<String>;
  showreel_not?: Maybe<String>;
  showreel_in?: Maybe<String[] | String>;
  showreel_not_in?: Maybe<String[] | String>;
  showreel_lt?: Maybe<String>;
  showreel_lte?: Maybe<String>;
  showreel_gt?: Maybe<String>;
  showreel_gte?: Maybe<String>;
  showreel_contains?: Maybe<String>;
  showreel_not_contains?: Maybe<String>;
  showreel_starts_with?: Maybe<String>;
  showreel_not_starts_with?: Maybe<String>;
  showreel_ends_with?: Maybe<String>;
  showreel_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  submitted?: Maybe<Boolean>;
  submitted_not?: Maybe<Boolean>;
  AND?: Maybe<JobScalarWhereInput[] | JobScalarWhereInput>;
  OR?: Maybe<JobScalarWhereInput[] | JobScalarWhereInput>;
  NOT?: Maybe<JobScalarWhereInput[] | JobScalarWhereInput>;
}

export interface JobUpdateManyWithWhereNestedInput {
  where: JobScalarWhereInput;
  data: JobUpdateManyDataInput;
}

export interface JobUpdateManyDataInput {
  name?: Maybe<String>;
  keywords?: Maybe<JobUpdatekeywordsInput>;
  img?: Maybe<String>;
  summary?: Maybe<String>;
  creativeSummary?: Maybe<String>;
  location?: Maybe<String>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
  submitted?: Maybe<Boolean>;
}

export interface UserUpsertWithoutGamesInput {
  update: UserUpdateWithoutGamesDataInput;
  create: UserCreateWithoutGamesInput;
}

export interface GameUpsertWithoutJobsInput {
  update: GameUpdateWithoutJobsDataInput;
  create: GameCreateWithoutJobsInput;
}

export interface JobUpsertWithoutMessagesInput {
  update: JobUpdateWithoutMessagesDataInput;
  create: JobCreateWithoutMessagesInput;
}

export interface MessageUpsertWithWhereUniqueWithoutConversationInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutConversationDataInput;
  create: MessageCreateWithoutConversationInput;
}

export interface ConversationUpsertWithWhereUniqueWithoutParticipantsInput {
  where: ConversationWhereUniqueInput;
  update: ConversationUpdateWithoutParticipantsDataInput;
  create: ConversationCreateWithoutParticipantsInput;
}

export interface UserUpsertWithoutJobsInput {
  update: UserUpdateWithoutJobsDataInput;
  create: UserCreateWithoutJobsInput;
}

export interface JobUpsertWithWhereUniqueWithoutGameInput {
  where: JobWhereUniqueInput;
  update: JobUpdateWithoutGameDataInput;
  create: JobCreateWithoutGameInput;
}

export interface GameUpsertWithWhereUniqueWithoutUserInput {
  where: GameWhereUniqueInput;
  update: GameUpdateWithoutUserDataInput;
  create: GameCreateWithoutUserInput;
}

export interface GameScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  backgroundImg_not?: Maybe<String>;
  backgroundImg_in?: Maybe<String[] | String>;
  backgroundImg_not_in?: Maybe<String[] | String>;
  backgroundImg_lt?: Maybe<String>;
  backgroundImg_lte?: Maybe<String>;
  backgroundImg_gt?: Maybe<String>;
  backgroundImg_gte?: Maybe<String>;
  backgroundImg_contains?: Maybe<String>;
  backgroundImg_not_contains?: Maybe<String>;
  backgroundImg_starts_with?: Maybe<String>;
  backgroundImg_not_starts_with?: Maybe<String>;
  backgroundImg_ends_with?: Maybe<String>;
  backgroundImg_not_ends_with?: Maybe<String>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  showreel?: Maybe<String>;
  showreel_not?: Maybe<String>;
  showreel_in?: Maybe<String[] | String>;
  showreel_not_in?: Maybe<String[] | String>;
  showreel_lt?: Maybe<String>;
  showreel_lte?: Maybe<String>;
  showreel_gt?: Maybe<String>;
  showreel_gte?: Maybe<String>;
  showreel_contains?: Maybe<String>;
  showreel_not_contains?: Maybe<String>;
  showreel_starts_with?: Maybe<String>;
  showreel_not_starts_with?: Maybe<String>;
  showreel_ends_with?: Maybe<String>;
  showreel_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  OR?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  NOT?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
}

export interface GameUpdateManyWithWhereNestedInput {
  where: GameScalarWhereInput;
  data: GameUpdateManyDataInput;
}

export interface GameUpdateManyDataInput {
  name?: Maybe<String>;
  keywords?: Maybe<GameUpdatekeywordsInput>;
  img?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
}

export interface UserUpsertWithoutSectionsInput {
  update: UserUpdateWithoutSectionsDataInput;
  create: UserCreateWithoutSectionsInput;
}

export interface SectionUpsertWithoutGalleryInput {
  update: SectionUpdateWithoutGalleryDataInput;
  create: SectionCreateWithoutGalleryInput;
}

export interface GalleryUpsertNestedInput {
  update: GalleryUpdateDataInput;
  create: GalleryCreateInput;
}

export interface JobUpsertNestedInput {
  update: JobUpdateDataInput;
  create: JobCreateInput;
}

export interface ContractUpdateManyMutationInput {
  notes?: Maybe<String>;
  deadline?: Maybe<String>;
  cost?: Maybe<Int>;
  currency?: Maybe<String>;
  status?: Maybe<String>;
}

export interface ConversationCreateInput {
  id?: Maybe<ID_Input>;
  messages?: Maybe<MessageCreateManyWithoutConversationInput>;
  unreadMessages?: Maybe<String>;
  participants?: Maybe<UserCreateManyWithoutConversationsInput>;
  job?: Maybe<JobCreateOneWithoutConversationsInput>;
}

export interface ConversationUpdateInput {
  messages?: Maybe<MessageUpdateManyWithoutConversationInput>;
  unreadMessages?: Maybe<String>;
  participants?: Maybe<UserUpdateManyWithoutConversationsInput>;
  job?: Maybe<JobUpdateOneWithoutConversationsInput>;
}

export interface ConversationUpdateManyMutationInput {
  unreadMessages?: Maybe<String>;
}

export interface CountCreateInput {
  id?: Maybe<ID_Input>;
  invites?: Maybe<String>;
  messages?: Maybe<String>;
}

export interface CountUpdateInput {
  invites?: Maybe<String>;
  messages?: Maybe<String>;
}

export interface CountUpdateManyMutationInput {
  invites?: Maybe<String>;
  messages?: Maybe<String>;
}

export interface GalleryUpdateInput {
  summary?: Maybe<String>;
  section?: Maybe<SectionUpdateOneWithoutGalleryInput>;
  images?: Maybe<GalleryImageUpdateManyWithoutGalleryInput>;
}

export interface GalleryUpdateManyMutationInput {
  summary?: Maybe<String>;
}

export interface GalleryImageCreateInput {
  id?: Maybe<ID_Input>;
  img: String;
  title?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneWithoutImagesInput>;
}

export interface GalleryCreateOneWithoutImagesInput {
  create?: Maybe<GalleryCreateWithoutImagesInput>;
  connect?: Maybe<GalleryWhereUniqueInput>;
}

export interface GalleryCreateWithoutImagesInput {
  id?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  section?: Maybe<SectionCreateOneWithoutGalleryInput>;
}

export interface GalleryImageUpdateInput {
  img?: Maybe<String>;
  title?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneWithoutImagesInput>;
}

export interface GalleryUpdateOneWithoutImagesInput {
  create?: Maybe<GalleryCreateWithoutImagesInput>;
  update?: Maybe<GalleryUpdateWithoutImagesDataInput>;
  upsert?: Maybe<GalleryUpsertWithoutImagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GalleryWhereUniqueInput>;
}

export interface GalleryUpdateWithoutImagesDataInput {
  summary?: Maybe<String>;
  section?: Maybe<SectionUpdateOneWithoutGalleryInput>;
}

export interface GalleryUpsertWithoutImagesInput {
  update: GalleryUpdateWithoutImagesDataInput;
  create: GalleryCreateWithoutImagesInput;
}

export interface GalleryImageUpdateManyMutationInput {
  img?: Maybe<String>;
  title?: Maybe<String>;
}

export interface GameUpdateInput {
  name?: Maybe<String>;
  keywords?: Maybe<GameUpdatekeywordsInput>;
  img?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneInput>;
  showreel?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutGamesInput>;
  type?: Maybe<String>;
  jobs?: Maybe<JobUpdateManyWithoutGameInput>;
}

export interface GameUpdateManyMutationInput {
  name?: Maybe<String>;
  keywords?: Maybe<GameUpdatekeywordsInput>;
  img?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
}

export interface InviteCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  message: String;
  status?: Maybe<String>;
  game: GameCreateOneInput;
  job: JobCreateOneWithoutInviteInput;
  user: UserCreateOneWithoutInvitesInput;
  receiver: UserCreateOneWithoutInvitesReceivedInput;
  contracts?: Maybe<ContractCreateManyInput>;
}

export interface InviteUpdateInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  status?: Maybe<String>;
  game?: Maybe<GameUpdateOneRequiredInput>;
  job?: Maybe<JobUpdateOneRequiredWithoutInviteInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutInvitesInput>;
  receiver?: Maybe<UserUpdateOneRequiredWithoutInvitesReceivedInput>;
  contracts?: Maybe<ContractUpdateManyInput>;
}

export interface InviteUpdateManyMutationInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  status?: Maybe<String>;
}

export interface JobUpdateInput {
  name?: Maybe<String>;
  keywords?: Maybe<JobUpdatekeywordsInput>;
  img?: Maybe<String>;
  summary?: Maybe<String>;
  creativeSummary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneInput>;
  showreel?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutJobsInput>;
  type?: Maybe<String>;
  game?: Maybe<GameUpdateOneRequiredWithoutJobsInput>;
  submitted?: Maybe<Boolean>;
  invite?: Maybe<InviteUpdateManyWithoutJobInput>;
  messages?: Maybe<MessageUpdateManyWithoutJobInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutJobInput>;
}

export interface JobUpdateManyMutationInput {
  name?: Maybe<String>;
  keywords?: Maybe<JobUpdatekeywordsInput>;
  img?: Maybe<String>;
  summary?: Maybe<String>;
  creativeSummary?: Maybe<String>;
  location?: Maybe<String>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
  submitted?: Maybe<Boolean>;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  messageStr: String;
  job?: Maybe<JobCreateOneWithoutMessagesInput>;
  sender: UserCreateOneWithoutMessagesSentInput;
  receiver?: Maybe<UserCreateOneWithoutMessagesReceivedInput>;
  status?: Maybe<String>;
  conversation?: Maybe<ConversationCreateOneWithoutMessagesInput>;
}

export interface MessageUpdateInput {
  messageStr?: Maybe<String>;
  job?: Maybe<JobUpdateOneWithoutMessagesInput>;
  sender?: Maybe<UserUpdateOneRequiredWithoutMessagesSentInput>;
  receiver?: Maybe<UserUpdateOneWithoutMessagesReceivedInput>;
  status?: Maybe<String>;
  conversation?: Maybe<ConversationUpdateOneWithoutMessagesInput>;
}

export interface MessageUpdateManyMutationInput {
  messageStr?: Maybe<String>;
  status?: Maybe<String>;
}

export interface NotableProjectsUpdateInput {
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
}

export interface NotableProjectsUpdateManyMutationInput {
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
}

export interface NotificationCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  message: String;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon: String;
  user: UserCreateOneWithoutNotificationsInput;
}

export interface UserCreateOneWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutNotificationsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserCreatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionCreateManyWithoutUserInput>;
  games?: Maybe<GameCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobCreateManyWithoutUserInput>;
  invites?: Maybe<InviteCreateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteCreateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageCreateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageCreateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractCreateManyWithoutUserInput>;
}

export interface NotificationUpdateInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutNotificationsInput>;
}

export interface UserUpdateOneRequiredWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  update?: Maybe<UserUpdateWithoutNotificationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutNotificationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutNotificationsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserUpdatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutUserInput>;
  games?: Maybe<GameUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobUpdateManyWithoutUserInput>;
  invites?: Maybe<InviteUpdateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteUpdateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageUpdateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageUpdateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutNotificationsInput {
  update: UserUpdateWithoutNotificationsDataInput;
  create: UserCreateWithoutNotificationsInput;
}

export interface NotificationUpdateManyMutationInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface PaymentTermCreateInput {
  id?: Maybe<ID_Input>;
  percent?: Maybe<Int>;
  description: String;
  contract?: Maybe<ContractCreateOneWithoutPaymentTermsInput>;
}

export interface ContractCreateOneWithoutPaymentTermsInput {
  create?: Maybe<ContractCreateWithoutPaymentTermsInput>;
  connect?: Maybe<ContractWhereUniqueInput>;
}

export interface ContractCreateWithoutPaymentTermsInput {
  id?: Maybe<ID_Input>;
  notes?: Maybe<String>;
  deadline?: Maybe<String>;
  cost?: Maybe<Int>;
  currency: String;
  job: JobCreateOneInput;
  status?: Maybe<String>;
  user?: Maybe<UserCreateOneWithoutContractsInput>;
}

export interface PaymentTermUpdateInput {
  percent?: Maybe<Int>;
  description?: Maybe<String>;
  contract?: Maybe<ContractUpdateOneWithoutPaymentTermsInput>;
}

export interface ContractUpdateOneWithoutPaymentTermsInput {
  create?: Maybe<ContractCreateWithoutPaymentTermsInput>;
  update?: Maybe<ContractUpdateWithoutPaymentTermsDataInput>;
  upsert?: Maybe<ContractUpsertWithoutPaymentTermsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ContractWhereUniqueInput>;
}

export interface ContractUpdateWithoutPaymentTermsDataInput {
  notes?: Maybe<String>;
  deadline?: Maybe<String>;
  cost?: Maybe<Int>;
  currency?: Maybe<String>;
  job?: Maybe<JobUpdateOneRequiredInput>;
  status?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutContractsInput>;
}

export interface ContractUpsertWithoutPaymentTermsInput {
  update: ContractUpdateWithoutPaymentTermsDataInput;
  create: ContractCreateWithoutPaymentTermsInput;
}

export interface PaymentTermUpdateManyMutationInput {
  percent?: Maybe<Int>;
  description?: Maybe<String>;
}

export interface SectionCreateInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  summary?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneWithoutSectionInput>;
  notableProjects?: Maybe<NotableProjectsCreateManyInput>;
  testimonials?: Maybe<TestimonialCreateManyInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
  user?: Maybe<UserCreateOneWithoutSectionsInput>;
}

export interface SectionUpdateInput {
  title?: Maybe<String>;
  summary?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneWithoutSectionInput>;
  notableProjects?: Maybe<NotableProjectsUpdateManyInput>;
  testimonials?: Maybe<TestimonialUpdateManyInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutSectionsInput>;
}

export interface SectionUpdateManyMutationInput {
  title?: Maybe<String>;
  summary?: Maybe<String>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
}

export interface TestimonialUpdateInput {
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface TestimonialUpdateManyMutationInput {
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserCreatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionCreateManyWithoutUserInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  games?: Maybe<GameCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobCreateManyWithoutUserInput>;
  invites?: Maybe<InviteCreateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteCreateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageCreateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageCreateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractCreateManyWithoutUserInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserUpdatefavouritesInput>;
  img?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutUserInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  games?: Maybe<GameUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutParticipantsInput>;
  jobs?: Maybe<JobUpdateManyWithoutUserInput>;
  invites?: Maybe<InviteUpdateManyWithoutUserInput>;
  invitesReceived?: Maybe<InviteUpdateManyWithoutReceiverInput>;
  messagesSent?: Maybe<MessageUpdateManyWithoutSenderInput>;
  messagesReceived?: Maybe<MessageUpdateManyWithoutReceiverInput>;
  contracts?: Maybe<ContractUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  favourites?: Maybe<UserUpdatefavouritesInput>;
  img?: Maybe<String>;
}

export interface ContractSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContractWhereInput>;
  AND?: Maybe<
    ContractSubscriptionWhereInput[] | ContractSubscriptionWhereInput
  >;
  OR?: Maybe<ContractSubscriptionWhereInput[] | ContractSubscriptionWhereInput>;
  NOT?: Maybe<
    ContractSubscriptionWhereInput[] | ContractSubscriptionWhereInput
  >;
}

export interface ConversationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ConversationWhereInput>;
  AND?: Maybe<
    ConversationSubscriptionWhereInput[] | ConversationSubscriptionWhereInput
  >;
  OR?: Maybe<
    ConversationSubscriptionWhereInput[] | ConversationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ConversationSubscriptionWhereInput[] | ConversationSubscriptionWhereInput
  >;
}

export interface CountSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CountWhereInput>;
  AND?: Maybe<CountSubscriptionWhereInput[] | CountSubscriptionWhereInput>;
  OR?: Maybe<CountSubscriptionWhereInput[] | CountSubscriptionWhereInput>;
  NOT?: Maybe<CountSubscriptionWhereInput[] | CountSubscriptionWhereInput>;
}

export interface GallerySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GalleryWhereInput>;
  AND?: Maybe<GallerySubscriptionWhereInput[] | GallerySubscriptionWhereInput>;
  OR?: Maybe<GallerySubscriptionWhereInput[] | GallerySubscriptionWhereInput>;
  NOT?: Maybe<GallerySubscriptionWhereInput[] | GallerySubscriptionWhereInput>;
}

export interface GalleryImageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GalleryImageWhereInput>;
  AND?: Maybe<
    GalleryImageSubscriptionWhereInput[] | GalleryImageSubscriptionWhereInput
  >;
  OR?: Maybe<
    GalleryImageSubscriptionWhereInput[] | GalleryImageSubscriptionWhereInput
  >;
  NOT?: Maybe<
    GalleryImageSubscriptionWhereInput[] | GalleryImageSubscriptionWhereInput
  >;
}

export interface GameSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GameWhereInput>;
  AND?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
  OR?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
  NOT?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
}

export interface InviteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InviteWhereInput>;
  AND?: Maybe<InviteSubscriptionWhereInput[] | InviteSubscriptionWhereInput>;
  OR?: Maybe<InviteSubscriptionWhereInput[] | InviteSubscriptionWhereInput>;
  NOT?: Maybe<InviteSubscriptionWhereInput[] | InviteSubscriptionWhereInput>;
}

export interface JobSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<JobWhereInput>;
  AND?: Maybe<JobSubscriptionWhereInput[] | JobSubscriptionWhereInput>;
  OR?: Maybe<JobSubscriptionWhereInput[] | JobSubscriptionWhereInput>;
  NOT?: Maybe<JobSubscriptionWhereInput[] | JobSubscriptionWhereInput>;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface NotableProjectsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NotableProjectsWhereInput>;
  AND?: Maybe<
    | NotableProjectsSubscriptionWhereInput[]
    | NotableProjectsSubscriptionWhereInput
  >;
  OR?: Maybe<
    | NotableProjectsSubscriptionWhereInput[]
    | NotableProjectsSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | NotableProjectsSubscriptionWhereInput[]
    | NotableProjectsSubscriptionWhereInput
  >;
}

export interface NotificationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NotificationWhereInput>;
  AND?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  OR?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
}

export interface PaymentTermSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PaymentTermWhereInput>;
  AND?: Maybe<
    PaymentTermSubscriptionWhereInput[] | PaymentTermSubscriptionWhereInput
  >;
  OR?: Maybe<
    PaymentTermSubscriptionWhereInput[] | PaymentTermSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PaymentTermSubscriptionWhereInput[] | PaymentTermSubscriptionWhereInput
  >;
}

export interface SectionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SectionWhereInput>;
  AND?: Maybe<SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput>;
  OR?: Maybe<SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput>;
  NOT?: Maybe<SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput>;
}

export interface TestimonialSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TestimonialWhereInput>;
  AND?: Maybe<
    TestimonialSubscriptionWhereInput[] | TestimonialSubscriptionWhereInput
  >;
  OR?: Maybe<
    TestimonialSubscriptionWhereInput[] | TestimonialSubscriptionWhereInput
  >;
  NOT?: Maybe<
    TestimonialSubscriptionWhereInput[] | TestimonialSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Contract {
  id: ID_Output;
  notes?: String;
  deadline?: String;
  cost?: Int;
  currency: String;
  status?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ContractPromise extends Promise<Contract>, Fragmentable {
  id: () => Promise<ID_Output>;
  notes: () => Promise<String>;
  deadline: () => Promise<String>;
  cost: () => Promise<Int>;
  paymentTerms: <T = FragmentableArray<PaymentTerm>>(args?: {
    where?: PaymentTermWhereInput;
    orderBy?: PaymentTermOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  currency: () => Promise<String>;
  job: <T = JobPromise>() => T;
  status: () => Promise<String>;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ContractSubscription
  extends Promise<AsyncIterator<Contract>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  notes: () => Promise<AsyncIterator<String>>;
  deadline: () => Promise<AsyncIterator<String>>;
  cost: () => Promise<AsyncIterator<Int>>;
  paymentTerms: <T = Promise<AsyncIterator<PaymentTermSubscription>>>(args?: {
    where?: PaymentTermWhereInput;
    orderBy?: PaymentTermOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  currency: () => Promise<AsyncIterator<String>>;
  job: <T = JobSubscription>() => T;
  status: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ContractNullablePromise
  extends Promise<Contract | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  notes: () => Promise<String>;
  deadline: () => Promise<String>;
  cost: () => Promise<Int>;
  paymentTerms: <T = FragmentableArray<PaymentTerm>>(args?: {
    where?: PaymentTermWhereInput;
    orderBy?: PaymentTermOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  currency: () => Promise<String>;
  job: <T = JobPromise>() => T;
  status: () => Promise<String>;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PaymentTerm {
  id: ID_Output;
  percent?: Int;
  description: String;
}

export interface PaymentTermPromise extends Promise<PaymentTerm>, Fragmentable {
  id: () => Promise<ID_Output>;
  percent: () => Promise<Int>;
  description: () => Promise<String>;
  contract: <T = ContractPromise>() => T;
}

export interface PaymentTermSubscription
  extends Promise<AsyncIterator<PaymentTerm>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  percent: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  contract: <T = ContractSubscription>() => T;
}

export interface PaymentTermNullablePromise
  extends Promise<PaymentTerm | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  percent: () => Promise<Int>;
  description: () => Promise<String>;
  contract: <T = ContractPromise>() => T;
}

export interface Job {
  id: ID_Output;
  name: String;
  keywords: String[];
  img?: String;
  summary?: String;
  creativeSummary?: String;
  location?: String;
  showreel?: String;
  type?: String;
  createdAt: DateTimeOutput;
  submitted?: Boolean;
}

export interface JobPromise extends Promise<Job>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  keywords: () => Promise<String[]>;
  img: () => Promise<String>;
  summary: () => Promise<String>;
  creativeSummary: () => Promise<String>;
  location: () => Promise<String>;
  gallery: <T = GalleryPromise>() => T;
  showreel: () => Promise<String>;
  user: <T = UserPromise>() => T;
  type: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  game: <T = GamePromise>() => T;
  submitted: () => Promise<Boolean>;
  invite: <T = FragmentableArray<Invite>>(args?: {
    where?: InviteWhereInput;
    orderBy?: InviteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conversations: <T = FragmentableArray<Conversation>>(args?: {
    where?: ConversationWhereInput;
    orderBy?: ConversationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface JobSubscription
  extends Promise<AsyncIterator<Job>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  keywords: () => Promise<AsyncIterator<String[]>>;
  img: () => Promise<AsyncIterator<String>>;
  summary: () => Promise<AsyncIterator<String>>;
  creativeSummary: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  gallery: <T = GallerySubscription>() => T;
  showreel: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  type: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  game: <T = GameSubscription>() => T;
  submitted: () => Promise<AsyncIterator<Boolean>>;
  invite: <T = Promise<AsyncIterator<InviteSubscription>>>(args?: {
    where?: InviteWhereInput;
    orderBy?: InviteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conversations: <T = Promise<AsyncIterator<ConversationSubscription>>>(args?: {
    where?: ConversationWhereInput;
    orderBy?: ConversationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface JobNullablePromise extends Promise<Job | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  keywords: () => Promise<String[]>;
  img: () => Promise<String>;
  summary: () => Promise<String>;
  creativeSummary: () => Promise<String>;
  location: () => Promise<String>;
  gallery: <T = GalleryPromise>() => T;
  showreel: () => Promise<String>;
  user: <T = UserPromise>() => T;
  type: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  game: <T = GamePromise>() => T;
  submitted: () => Promise<Boolean>;
  invite: <T = FragmentableArray<Invite>>(args?: {
    where?: InviteWhereInput;
    orderBy?: InviteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conversations: <T = FragmentableArray<Conversation>>(args?: {
    where?: ConversationWhereInput;
    orderBy?: ConversationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Gallery {
  id: ID_Output;
  summary?: String;
}

export interface GalleryPromise extends Promise<Gallery>, Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  section: <T = SectionPromise>() => T;
  images: <T = FragmentableArray<GalleryImage>>(args?: {
    where?: GalleryImageWhereInput;
    orderBy?: GalleryImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GallerySubscription
  extends Promise<AsyncIterator<Gallery>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  summary: () => Promise<AsyncIterator<String>>;
  section: <T = SectionSubscription>() => T;
  images: <T = Promise<AsyncIterator<GalleryImageSubscription>>>(args?: {
    where?: GalleryImageWhereInput;
    orderBy?: GalleryImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GalleryNullablePromise
  extends Promise<Gallery | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  section: <T = SectionPromise>() => T;
  images: <T = FragmentableArray<GalleryImage>>(args?: {
    where?: GalleryImageWhereInput;
    orderBy?: GalleryImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Section {
  id: ID_Output;
  title?: String;
  summary?: String;
  showreel?: String;
  type?: String;
}

export interface SectionPromise extends Promise<Section>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  summary: () => Promise<String>;
  gallery: <T = GalleryPromise>() => T;
  notableProjects: <T = FragmentableArray<NotableProjects>>(args?: {
    where?: NotableProjectsWhereInput;
    orderBy?: NotableProjectsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  testimonials: <T = FragmentableArray<Testimonial>>(args?: {
    where?: TestimonialWhereInput;
    orderBy?: TestimonialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  showreel: () => Promise<String>;
  type: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface SectionSubscription
  extends Promise<AsyncIterator<Section>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  summary: () => Promise<AsyncIterator<String>>;
  gallery: <T = GallerySubscription>() => T;
  notableProjects: <
    T = Promise<AsyncIterator<NotableProjectsSubscription>>
  >(args?: {
    where?: NotableProjectsWhereInput;
    orderBy?: NotableProjectsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  testimonials: <T = Promise<AsyncIterator<TestimonialSubscription>>>(args?: {
    where?: TestimonialWhereInput;
    orderBy?: TestimonialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  showreel: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface SectionNullablePromise
  extends Promise<Section | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  summary: () => Promise<String>;
  gallery: <T = GalleryPromise>() => T;
  notableProjects: <T = FragmentableArray<NotableProjects>>(args?: {
    where?: NotableProjectsWhereInput;
    orderBy?: NotableProjectsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  testimonials: <T = FragmentableArray<Testimonial>>(args?: {
    where?: TestimonialWhereInput;
    orderBy?: TestimonialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  showreel: () => Promise<String>;
  type: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface NotableProjects {
  id: ID_Output;
  summary?: String;
  image?: String;
  name?: String;
}

export interface NotableProjectsPromise
  extends Promise<NotableProjects>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
}

export interface NotableProjectsSubscription
  extends Promise<AsyncIterator<NotableProjects>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  summary: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface NotableProjectsNullablePromise
  extends Promise<NotableProjects | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
}

export interface Testimonial {
  id: ID_Output;
  summary?: String;
  image?: String;
  name?: String;
  status?: Boolean;
}

export interface TestimonialPromise extends Promise<Testimonial>, Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
  status: () => Promise<Boolean>;
}

export interface TestimonialSubscription
  extends Promise<AsyncIterator<Testimonial>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  summary: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Boolean>>;
}

export interface TestimonialNullablePromise
  extends Promise<Testimonial | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
  status: () => Promise<Boolean>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  resetToken?: String;
  password: String;
  keywords: String[];
  profileImg?: String;
  profileImgStyle?: String;
  profileBG?: String;
  profileBGStyle?: String;
  autosave?: Boolean;
  summary?: String;
  location?: String;
  favourites: String[];
  img?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  resetToken: () => Promise<String>;
  password: () => Promise<String>;
  keywords: () => Promise<String[]>;
  profileImg: () => Promise<String>;
  profileImgStyle: () => Promise<String>;
  profileBG: () => Promise<String>;
  profileBGStyle: () => Promise<String>;
  autosave: () => Promise<Boolean>;
  summary: () => Promise<String>;
  location: () => Promise<String>;
  favourites: () => Promise<String[]>;
  img: () => Promise<String>;
  sections: <T = FragmentableArray<Section>>(args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  games: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conversations: <T = FragmentableArray<Conversation>>(args?: {
    where?: ConversationWhereInput;
    orderBy?: ConversationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  jobs: <T = FragmentableArray<Job>>(args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  invites: <T = FragmentableArray<Invite>>(args?: {
    where?: InviteWhereInput;
    orderBy?: InviteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  invitesReceived: <T = FragmentableArray<Invite>>(args?: {
    where?: InviteWhereInput;
    orderBy?: InviteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messagesSent: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messagesReceived: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  contracts: <T = FragmentableArray<Contract>>(args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  keywords: () => Promise<AsyncIterator<String[]>>;
  profileImg: () => Promise<AsyncIterator<String>>;
  profileImgStyle: () => Promise<AsyncIterator<String>>;
  profileBG: () => Promise<AsyncIterator<String>>;
  profileBGStyle: () => Promise<AsyncIterator<String>>;
  autosave: () => Promise<AsyncIterator<Boolean>>;
  summary: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  favourites: () => Promise<AsyncIterator<String[]>>;
  img: () => Promise<AsyncIterator<String>>;
  sections: <T = Promise<AsyncIterator<SectionSubscription>>>(args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = Promise<AsyncIterator<NotificationSubscription>>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  games: <T = Promise<AsyncIterator<GameSubscription>>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conversations: <T = Promise<AsyncIterator<ConversationSubscription>>>(args?: {
    where?: ConversationWhereInput;
    orderBy?: ConversationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  jobs: <T = Promise<AsyncIterator<JobSubscription>>>(args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  invites: <T = Promise<AsyncIterator<InviteSubscription>>>(args?: {
    where?: InviteWhereInput;
    orderBy?: InviteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  invitesReceived: <T = Promise<AsyncIterator<InviteSubscription>>>(args?: {
    where?: InviteWhereInput;
    orderBy?: InviteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messagesSent: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messagesReceived: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  contracts: <T = Promise<AsyncIterator<ContractSubscription>>>(args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  resetToken: () => Promise<String>;
  password: () => Promise<String>;
  keywords: () => Promise<String[]>;
  profileImg: () => Promise<String>;
  profileImgStyle: () => Promise<String>;
  profileBG: () => Promise<String>;
  profileBGStyle: () => Promise<String>;
  autosave: () => Promise<Boolean>;
  summary: () => Promise<String>;
  location: () => Promise<String>;
  favourites: () => Promise<String[]>;
  img: () => Promise<String>;
  sections: <T = FragmentableArray<Section>>(args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  games: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conversations: <T = FragmentableArray<Conversation>>(args?: {
    where?: ConversationWhereInput;
    orderBy?: ConversationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  jobs: <T = FragmentableArray<Job>>(args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  invites: <T = FragmentableArray<Invite>>(args?: {
    where?: InviteWhereInput;
    orderBy?: InviteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  invitesReceived: <T = FragmentableArray<Invite>>(args?: {
    where?: InviteWhereInput;
    orderBy?: InviteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messagesSent: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messagesReceived: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  contracts: <T = FragmentableArray<Contract>>(args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Notification {
  id: ID_Output;
  title: String;
  message: String;
  discarded?: Boolean;
  linkTo?: String;
  icon: String;
  createdAt: DateTimeOutput;
}

export interface NotificationPromise
  extends Promise<Notification>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  message: () => Promise<String>;
  discarded: () => Promise<Boolean>;
  linkTo: () => Promise<String>;
  icon: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
}

export interface NotificationSubscription
  extends Promise<AsyncIterator<Notification>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  message: () => Promise<AsyncIterator<String>>;
  discarded: () => Promise<AsyncIterator<Boolean>>;
  linkTo: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
}

export interface NotificationNullablePromise
  extends Promise<Notification | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  message: () => Promise<String>;
  discarded: () => Promise<Boolean>;
  linkTo: () => Promise<String>;
  icon: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
}

export interface Game {
  id: ID_Output;
  name: String;
  keywords: String[];
  img?: String;
  backgroundImg?: String;
  summary?: String;
  location?: String;
  showreel?: String;
  type?: String;
  createdAt: DateTimeOutput;
}

export interface GamePromise extends Promise<Game>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  keywords: () => Promise<String[]>;
  img: () => Promise<String>;
  backgroundImg: () => Promise<String>;
  summary: () => Promise<String>;
  location: () => Promise<String>;
  gallery: <T = GalleryPromise>() => T;
  showreel: () => Promise<String>;
  user: <T = UserPromise>() => T;
  type: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  jobs: <T = FragmentableArray<Job>>(args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GameSubscription
  extends Promise<AsyncIterator<Game>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  keywords: () => Promise<AsyncIterator<String[]>>;
  img: () => Promise<AsyncIterator<String>>;
  backgroundImg: () => Promise<AsyncIterator<String>>;
  summary: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  gallery: <T = GallerySubscription>() => T;
  showreel: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  type: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  jobs: <T = Promise<AsyncIterator<JobSubscription>>>(args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GameNullablePromise
  extends Promise<Game | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  keywords: () => Promise<String[]>;
  img: () => Promise<String>;
  backgroundImg: () => Promise<String>;
  summary: () => Promise<String>;
  location: () => Promise<String>;
  gallery: <T = GalleryPromise>() => T;
  showreel: () => Promise<String>;
  user: <T = UserPromise>() => T;
  type: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  jobs: <T = FragmentableArray<Job>>(args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Conversation {
  id: ID_Output;
  unreadMessages?: String;
  createdAt: DateTimeOutput;
}

export interface ConversationPromise
  extends Promise<Conversation>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  unreadMessages: () => Promise<String>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  job: <T = JobPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ConversationSubscription
  extends Promise<AsyncIterator<Conversation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  unreadMessages: () => Promise<AsyncIterator<String>>;
  participants: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  job: <T = JobSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ConversationNullablePromise
  extends Promise<Conversation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  unreadMessages: () => Promise<String>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  job: <T = JobPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Message {
  id: ID_Output;
  messageStr: String;
  createdAt: DateTimeOutput;
  status?: String;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  messageStr: () => Promise<String>;
  job: <T = JobPromise>() => T;
  sender: <T = UserPromise>() => T;
  receiver: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  status: () => Promise<String>;
  conversation: <T = ConversationPromise>() => T;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  messageStr: () => Promise<AsyncIterator<String>>;
  job: <T = JobSubscription>() => T;
  sender: <T = UserSubscription>() => T;
  receiver: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<String>>;
  conversation: <T = ConversationSubscription>() => T;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  messageStr: () => Promise<String>;
  job: <T = JobPromise>() => T;
  sender: <T = UserPromise>() => T;
  receiver: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  status: () => Promise<String>;
  conversation: <T = ConversationPromise>() => T;
}

export interface Invite {
  id: ID_Output;
  title: String;
  message: String;
  status?: String;
}

export interface InvitePromise extends Promise<Invite>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  message: () => Promise<String>;
  status: () => Promise<String>;
  game: <T = GamePromise>() => T;
  job: <T = JobPromise>() => T;
  user: <T = UserPromise>() => T;
  receiver: <T = UserPromise>() => T;
  contracts: <T = FragmentableArray<Contract>>(args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface InviteSubscription
  extends Promise<AsyncIterator<Invite>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  message: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  game: <T = GameSubscription>() => T;
  job: <T = JobSubscription>() => T;
  user: <T = UserSubscription>() => T;
  receiver: <T = UserSubscription>() => T;
  contracts: <T = Promise<AsyncIterator<ContractSubscription>>>(args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface InviteNullablePromise
  extends Promise<Invite | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  message: () => Promise<String>;
  status: () => Promise<String>;
  game: <T = GamePromise>() => T;
  job: <T = JobPromise>() => T;
  user: <T = UserPromise>() => T;
  receiver: <T = UserPromise>() => T;
  contracts: <T = FragmentableArray<Contract>>(args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GalleryImage {
  id: ID_Output;
  img: String;
  title?: String;
}

export interface GalleryImagePromise
  extends Promise<GalleryImage>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  img: () => Promise<String>;
  title: () => Promise<String>;
  gallery: <T = GalleryPromise>() => T;
}

export interface GalleryImageSubscription
  extends Promise<AsyncIterator<GalleryImage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  img: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  gallery: <T = GallerySubscription>() => T;
}

export interface GalleryImageNullablePromise
  extends Promise<GalleryImage | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  img: () => Promise<String>;
  title: () => Promise<String>;
  gallery: <T = GalleryPromise>() => T;
}

export interface ContractConnection {
  pageInfo: PageInfo;
  edges: ContractEdge[];
}

export interface ContractConnectionPromise
  extends Promise<ContractConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContractEdge>>() => T;
  aggregate: <T = AggregateContractPromise>() => T;
}

export interface ContractConnectionSubscription
  extends Promise<AsyncIterator<ContractConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContractEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContractSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ContractEdge {
  node: Contract;
  cursor: String;
}

export interface ContractEdgePromise
  extends Promise<ContractEdge>,
    Fragmentable {
  node: <T = ContractPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContractEdgeSubscription
  extends Promise<AsyncIterator<ContractEdge>>,
    Fragmentable {
  node: <T = ContractSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateContract {
  count: Int;
}

export interface AggregateContractPromise
  extends Promise<AggregateContract>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContractSubscription
  extends Promise<AsyncIterator<AggregateContract>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ConversationConnection {
  pageInfo: PageInfo;
  edges: ConversationEdge[];
}

export interface ConversationConnectionPromise
  extends Promise<ConversationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConversationEdge>>() => T;
  aggregate: <T = AggregateConversationPromise>() => T;
}

export interface ConversationConnectionSubscription
  extends Promise<AsyncIterator<ConversationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConversationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConversationSubscription>() => T;
}

export interface ConversationEdge {
  node: Conversation;
  cursor: String;
}

export interface ConversationEdgePromise
  extends Promise<ConversationEdge>,
    Fragmentable {
  node: <T = ConversationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConversationEdgeSubscription
  extends Promise<AsyncIterator<ConversationEdge>>,
    Fragmentable {
  node: <T = ConversationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateConversation {
  count: Int;
}

export interface AggregateConversationPromise
  extends Promise<AggregateConversation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConversationSubscription
  extends Promise<AsyncIterator<AggregateConversation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Count {
  id: ID_Output;
  invites?: String;
  messages?: String;
}

export interface CountPromise extends Promise<Count>, Fragmentable {
  id: () => Promise<ID_Output>;
  invites: () => Promise<String>;
  messages: () => Promise<String>;
}

export interface CountSubscription
  extends Promise<AsyncIterator<Count>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  invites: () => Promise<AsyncIterator<String>>;
  messages: () => Promise<AsyncIterator<String>>;
}

export interface CountNullablePromise
  extends Promise<Count | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  invites: () => Promise<String>;
  messages: () => Promise<String>;
}

export interface CountConnection {
  pageInfo: PageInfo;
  edges: CountEdge[];
}

export interface CountConnectionPromise
  extends Promise<CountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CountEdge>>() => T;
  aggregate: <T = AggregateCountPromise>() => T;
}

export interface CountConnectionSubscription
  extends Promise<AsyncIterator<CountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCountSubscription>() => T;
}

export interface CountEdge {
  node: Count;
  cursor: String;
}

export interface CountEdgePromise extends Promise<CountEdge>, Fragmentable {
  node: <T = CountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CountEdgeSubscription
  extends Promise<AsyncIterator<CountEdge>>,
    Fragmentable {
  node: <T = CountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCount {
  count: Int;
}

export interface AggregateCountPromise
  extends Promise<AggregateCount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCountSubscription
  extends Promise<AsyncIterator<AggregateCount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GalleryConnection {
  pageInfo: PageInfo;
  edges: GalleryEdge[];
}

export interface GalleryConnectionPromise
  extends Promise<GalleryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GalleryEdge>>() => T;
  aggregate: <T = AggregateGalleryPromise>() => T;
}

export interface GalleryConnectionSubscription
  extends Promise<AsyncIterator<GalleryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GalleryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGallerySubscription>() => T;
}

export interface GalleryEdge {
  node: Gallery;
  cursor: String;
}

export interface GalleryEdgePromise extends Promise<GalleryEdge>, Fragmentable {
  node: <T = GalleryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GalleryEdgeSubscription
  extends Promise<AsyncIterator<GalleryEdge>>,
    Fragmentable {
  node: <T = GallerySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGallery {
  count: Int;
}

export interface AggregateGalleryPromise
  extends Promise<AggregateGallery>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGallerySubscription
  extends Promise<AsyncIterator<AggregateGallery>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GalleryImageConnection {
  pageInfo: PageInfo;
  edges: GalleryImageEdge[];
}

export interface GalleryImageConnectionPromise
  extends Promise<GalleryImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GalleryImageEdge>>() => T;
  aggregate: <T = AggregateGalleryImagePromise>() => T;
}

export interface GalleryImageConnectionSubscription
  extends Promise<AsyncIterator<GalleryImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GalleryImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGalleryImageSubscription>() => T;
}

export interface GalleryImageEdge {
  node: GalleryImage;
  cursor: String;
}

export interface GalleryImageEdgePromise
  extends Promise<GalleryImageEdge>,
    Fragmentable {
  node: <T = GalleryImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GalleryImageEdgeSubscription
  extends Promise<AsyncIterator<GalleryImageEdge>>,
    Fragmentable {
  node: <T = GalleryImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGalleryImage {
  count: Int;
}

export interface AggregateGalleryImagePromise
  extends Promise<AggregateGalleryImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGalleryImageSubscription
  extends Promise<AsyncIterator<AggregateGalleryImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GameConnection {
  pageInfo: PageInfo;
  edges: GameEdge[];
}

export interface GameConnectionPromise
  extends Promise<GameConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GameEdge>>() => T;
  aggregate: <T = AggregateGamePromise>() => T;
}

export interface GameConnectionSubscription
  extends Promise<AsyncIterator<GameConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GameEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGameSubscription>() => T;
}

export interface GameEdge {
  node: Game;
  cursor: String;
}

export interface GameEdgePromise extends Promise<GameEdge>, Fragmentable {
  node: <T = GamePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GameEdgeSubscription
  extends Promise<AsyncIterator<GameEdge>>,
    Fragmentable {
  node: <T = GameSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGame {
  count: Int;
}

export interface AggregateGamePromise
  extends Promise<AggregateGame>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGameSubscription
  extends Promise<AsyncIterator<AggregateGame>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InviteConnection {
  pageInfo: PageInfo;
  edges: InviteEdge[];
}

export interface InviteConnectionPromise
  extends Promise<InviteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InviteEdge>>() => T;
  aggregate: <T = AggregateInvitePromise>() => T;
}

export interface InviteConnectionSubscription
  extends Promise<AsyncIterator<InviteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InviteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInviteSubscription>() => T;
}

export interface InviteEdge {
  node: Invite;
  cursor: String;
}

export interface InviteEdgePromise extends Promise<InviteEdge>, Fragmentable {
  node: <T = InvitePromise>() => T;
  cursor: () => Promise<String>;
}

export interface InviteEdgeSubscription
  extends Promise<AsyncIterator<InviteEdge>>,
    Fragmentable {
  node: <T = InviteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInvite {
  count: Int;
}

export interface AggregateInvitePromise
  extends Promise<AggregateInvite>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInviteSubscription
  extends Promise<AsyncIterator<AggregateInvite>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface JobConnection {
  pageInfo: PageInfo;
  edges: JobEdge[];
}

export interface JobConnectionPromise
  extends Promise<JobConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<JobEdge>>() => T;
  aggregate: <T = AggregateJobPromise>() => T;
}

export interface JobConnectionSubscription
  extends Promise<AsyncIterator<JobConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<JobEdgeSubscription>>>() => T;
  aggregate: <T = AggregateJobSubscription>() => T;
}

export interface JobEdge {
  node: Job;
  cursor: String;
}

export interface JobEdgePromise extends Promise<JobEdge>, Fragmentable {
  node: <T = JobPromise>() => T;
  cursor: () => Promise<String>;
}

export interface JobEdgeSubscription
  extends Promise<AsyncIterator<JobEdge>>,
    Fragmentable {
  node: <T = JobSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateJob {
  count: Int;
}

export interface AggregateJobPromise
  extends Promise<AggregateJob>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateJobSubscription
  extends Promise<AsyncIterator<AggregateJob>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NotableProjectsConnection {
  pageInfo: PageInfo;
  edges: NotableProjectsEdge[];
}

export interface NotableProjectsConnectionPromise
  extends Promise<NotableProjectsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NotableProjectsEdge>>() => T;
  aggregate: <T = AggregateNotableProjectsPromise>() => T;
}

export interface NotableProjectsConnectionSubscription
  extends Promise<AsyncIterator<NotableProjectsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NotableProjectsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNotableProjectsSubscription>() => T;
}

export interface NotableProjectsEdge {
  node: NotableProjects;
  cursor: String;
}

export interface NotableProjectsEdgePromise
  extends Promise<NotableProjectsEdge>,
    Fragmentable {
  node: <T = NotableProjectsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NotableProjectsEdgeSubscription
  extends Promise<AsyncIterator<NotableProjectsEdge>>,
    Fragmentable {
  node: <T = NotableProjectsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNotableProjects {
  count: Int;
}

export interface AggregateNotableProjectsPromise
  extends Promise<AggregateNotableProjects>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNotableProjectsSubscription
  extends Promise<AsyncIterator<AggregateNotableProjects>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NotificationConnection {
  pageInfo: PageInfo;
  edges: NotificationEdge[];
}

export interface NotificationConnectionPromise
  extends Promise<NotificationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NotificationEdge>>() => T;
  aggregate: <T = AggregateNotificationPromise>() => T;
}

export interface NotificationConnectionSubscription
  extends Promise<AsyncIterator<NotificationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NotificationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNotificationSubscription>() => T;
}

export interface NotificationEdge {
  node: Notification;
  cursor: String;
}

export interface NotificationEdgePromise
  extends Promise<NotificationEdge>,
    Fragmentable {
  node: <T = NotificationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NotificationEdgeSubscription
  extends Promise<AsyncIterator<NotificationEdge>>,
    Fragmentable {
  node: <T = NotificationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNotification {
  count: Int;
}

export interface AggregateNotificationPromise
  extends Promise<AggregateNotification>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNotificationSubscription
  extends Promise<AsyncIterator<AggregateNotification>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PaymentTermConnection {
  pageInfo: PageInfo;
  edges: PaymentTermEdge[];
}

export interface PaymentTermConnectionPromise
  extends Promise<PaymentTermConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PaymentTermEdge>>() => T;
  aggregate: <T = AggregatePaymentTermPromise>() => T;
}

export interface PaymentTermConnectionSubscription
  extends Promise<AsyncIterator<PaymentTermConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PaymentTermEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePaymentTermSubscription>() => T;
}

export interface PaymentTermEdge {
  node: PaymentTerm;
  cursor: String;
}

export interface PaymentTermEdgePromise
  extends Promise<PaymentTermEdge>,
    Fragmentable {
  node: <T = PaymentTermPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PaymentTermEdgeSubscription
  extends Promise<AsyncIterator<PaymentTermEdge>>,
    Fragmentable {
  node: <T = PaymentTermSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePaymentTerm {
  count: Int;
}

export interface AggregatePaymentTermPromise
  extends Promise<AggregatePaymentTerm>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePaymentTermSubscription
  extends Promise<AsyncIterator<AggregatePaymentTerm>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SectionConnection {
  pageInfo: PageInfo;
  edges: SectionEdge[];
}

export interface SectionConnectionPromise
  extends Promise<SectionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SectionEdge>>() => T;
  aggregate: <T = AggregateSectionPromise>() => T;
}

export interface SectionConnectionSubscription
  extends Promise<AsyncIterator<SectionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SectionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSectionSubscription>() => T;
}

export interface SectionEdge {
  node: Section;
  cursor: String;
}

export interface SectionEdgePromise extends Promise<SectionEdge>, Fragmentable {
  node: <T = SectionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SectionEdgeSubscription
  extends Promise<AsyncIterator<SectionEdge>>,
    Fragmentable {
  node: <T = SectionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSection {
  count: Int;
}

export interface AggregateSectionPromise
  extends Promise<AggregateSection>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSectionSubscription
  extends Promise<AsyncIterator<AggregateSection>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TestimonialConnection {
  pageInfo: PageInfo;
  edges: TestimonialEdge[];
}

export interface TestimonialConnectionPromise
  extends Promise<TestimonialConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TestimonialEdge>>() => T;
  aggregate: <T = AggregateTestimonialPromise>() => T;
}

export interface TestimonialConnectionSubscription
  extends Promise<AsyncIterator<TestimonialConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TestimonialEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTestimonialSubscription>() => T;
}

export interface TestimonialEdge {
  node: Testimonial;
  cursor: String;
}

export interface TestimonialEdgePromise
  extends Promise<TestimonialEdge>,
    Fragmentable {
  node: <T = TestimonialPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TestimonialEdgeSubscription
  extends Promise<AsyncIterator<TestimonialEdge>>,
    Fragmentable {
  node: <T = TestimonialSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTestimonial {
  count: Int;
}

export interface AggregateTestimonialPromise
  extends Promise<AggregateTestimonial>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTestimonialSubscription
  extends Promise<AsyncIterator<AggregateTestimonial>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ContractSubscriptionPayload {
  mutation: MutationType;
  node: Contract;
  updatedFields: String[];
  previousValues: ContractPreviousValues;
}

export interface ContractSubscriptionPayloadPromise
  extends Promise<ContractSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContractPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContractPreviousValuesPromise>() => T;
}

export interface ContractSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContractSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContractSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContractPreviousValuesSubscription>() => T;
}

export interface ContractPreviousValues {
  id: ID_Output;
  notes?: String;
  deadline?: String;
  cost?: Int;
  currency: String;
  status?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ContractPreviousValuesPromise
  extends Promise<ContractPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  notes: () => Promise<String>;
  deadline: () => Promise<String>;
  cost: () => Promise<Int>;
  currency: () => Promise<String>;
  status: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ContractPreviousValuesSubscription
  extends Promise<AsyncIterator<ContractPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  notes: () => Promise<AsyncIterator<String>>;
  deadline: () => Promise<AsyncIterator<String>>;
  cost: () => Promise<AsyncIterator<Int>>;
  currency: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ConversationSubscriptionPayload {
  mutation: MutationType;
  node: Conversation;
  updatedFields: String[];
  previousValues: ConversationPreviousValues;
}

export interface ConversationSubscriptionPayloadPromise
  extends Promise<ConversationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConversationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConversationPreviousValuesPromise>() => T;
}

export interface ConversationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConversationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConversationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConversationPreviousValuesSubscription>() => T;
}

export interface ConversationPreviousValues {
  id: ID_Output;
  unreadMessages?: String;
  createdAt: DateTimeOutput;
}

export interface ConversationPreviousValuesPromise
  extends Promise<ConversationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  unreadMessages: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ConversationPreviousValuesSubscription
  extends Promise<AsyncIterator<ConversationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  unreadMessages: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CountSubscriptionPayload {
  mutation: MutationType;
  node: Count;
  updatedFields: String[];
  previousValues: CountPreviousValues;
}

export interface CountSubscriptionPayloadPromise
  extends Promise<CountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CountPreviousValuesPromise>() => T;
}

export interface CountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CountPreviousValuesSubscription>() => T;
}

export interface CountPreviousValues {
  id: ID_Output;
  invites?: String;
  messages?: String;
}

export interface CountPreviousValuesPromise
  extends Promise<CountPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  invites: () => Promise<String>;
  messages: () => Promise<String>;
}

export interface CountPreviousValuesSubscription
  extends Promise<AsyncIterator<CountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  invites: () => Promise<AsyncIterator<String>>;
  messages: () => Promise<AsyncIterator<String>>;
}

export interface GallerySubscriptionPayload {
  mutation: MutationType;
  node: Gallery;
  updatedFields: String[];
  previousValues: GalleryPreviousValues;
}

export interface GallerySubscriptionPayloadPromise
  extends Promise<GallerySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GalleryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GalleryPreviousValuesPromise>() => T;
}

export interface GallerySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GallerySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GallerySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GalleryPreviousValuesSubscription>() => T;
}

export interface GalleryPreviousValues {
  id: ID_Output;
  summary?: String;
}

export interface GalleryPreviousValuesPromise
  extends Promise<GalleryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
}

export interface GalleryPreviousValuesSubscription
  extends Promise<AsyncIterator<GalleryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  summary: () => Promise<AsyncIterator<String>>;
}

export interface GalleryImageSubscriptionPayload {
  mutation: MutationType;
  node: GalleryImage;
  updatedFields: String[];
  previousValues: GalleryImagePreviousValues;
}

export interface GalleryImageSubscriptionPayloadPromise
  extends Promise<GalleryImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GalleryImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GalleryImagePreviousValuesPromise>() => T;
}

export interface GalleryImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GalleryImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GalleryImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GalleryImagePreviousValuesSubscription>() => T;
}

export interface GalleryImagePreviousValues {
  id: ID_Output;
  img: String;
  title?: String;
}

export interface GalleryImagePreviousValuesPromise
  extends Promise<GalleryImagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  img: () => Promise<String>;
  title: () => Promise<String>;
}

export interface GalleryImagePreviousValuesSubscription
  extends Promise<AsyncIterator<GalleryImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  img: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface GameSubscriptionPayload {
  mutation: MutationType;
  node: Game;
  updatedFields: String[];
  previousValues: GamePreviousValues;
}

export interface GameSubscriptionPayloadPromise
  extends Promise<GameSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GamePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GamePreviousValuesPromise>() => T;
}

export interface GameSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GameSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GameSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GamePreviousValuesSubscription>() => T;
}

export interface GamePreviousValues {
  id: ID_Output;
  name: String;
  keywords: String[];
  img?: String;
  backgroundImg?: String;
  summary?: String;
  location?: String;
  showreel?: String;
  type?: String;
  createdAt: DateTimeOutput;
}

export interface GamePreviousValuesPromise
  extends Promise<GamePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  keywords: () => Promise<String[]>;
  img: () => Promise<String>;
  backgroundImg: () => Promise<String>;
  summary: () => Promise<String>;
  location: () => Promise<String>;
  showreel: () => Promise<String>;
  type: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GamePreviousValuesSubscription
  extends Promise<AsyncIterator<GamePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  keywords: () => Promise<AsyncIterator<String[]>>;
  img: () => Promise<AsyncIterator<String>>;
  backgroundImg: () => Promise<AsyncIterator<String>>;
  summary: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  showreel: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InviteSubscriptionPayload {
  mutation: MutationType;
  node: Invite;
  updatedFields: String[];
  previousValues: InvitePreviousValues;
}

export interface InviteSubscriptionPayloadPromise
  extends Promise<InviteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InvitePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InvitePreviousValuesPromise>() => T;
}

export interface InviteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InviteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InviteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InvitePreviousValuesSubscription>() => T;
}

export interface InvitePreviousValues {
  id: ID_Output;
  title: String;
  message: String;
  status?: String;
}

export interface InvitePreviousValuesPromise
  extends Promise<InvitePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  message: () => Promise<String>;
  status: () => Promise<String>;
}

export interface InvitePreviousValuesSubscription
  extends Promise<AsyncIterator<InvitePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  message: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
}

export interface JobSubscriptionPayload {
  mutation: MutationType;
  node: Job;
  updatedFields: String[];
  previousValues: JobPreviousValues;
}

export interface JobSubscriptionPayloadPromise
  extends Promise<JobSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = JobPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = JobPreviousValuesPromise>() => T;
}

export interface JobSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<JobSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = JobSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = JobPreviousValuesSubscription>() => T;
}

export interface JobPreviousValues {
  id: ID_Output;
  name: String;
  keywords: String[];
  img?: String;
  summary?: String;
  creativeSummary?: String;
  location?: String;
  showreel?: String;
  type?: String;
  createdAt: DateTimeOutput;
  submitted?: Boolean;
}

export interface JobPreviousValuesPromise
  extends Promise<JobPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  keywords: () => Promise<String[]>;
  img: () => Promise<String>;
  summary: () => Promise<String>;
  creativeSummary: () => Promise<String>;
  location: () => Promise<String>;
  showreel: () => Promise<String>;
  type: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  submitted: () => Promise<Boolean>;
}

export interface JobPreviousValuesSubscription
  extends Promise<AsyncIterator<JobPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  keywords: () => Promise<AsyncIterator<String[]>>;
  img: () => Promise<AsyncIterator<String>>;
  summary: () => Promise<AsyncIterator<String>>;
  creativeSummary: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  showreel: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  submitted: () => Promise<AsyncIterator<Boolean>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  messageStr: String;
  createdAt: DateTimeOutput;
  status?: String;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  messageStr: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  status: () => Promise<String>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  messageStr: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<String>>;
}

export interface NotableProjectsSubscriptionPayload {
  mutation: MutationType;
  node: NotableProjects;
  updatedFields: String[];
  previousValues: NotableProjectsPreviousValues;
}

export interface NotableProjectsSubscriptionPayloadPromise
  extends Promise<NotableProjectsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotableProjectsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotableProjectsPreviousValuesPromise>() => T;
}

export interface NotableProjectsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NotableProjectsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NotableProjectsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotableProjectsPreviousValuesSubscription>() => T;
}

export interface NotableProjectsPreviousValues {
  id: ID_Output;
  summary?: String;
  image?: String;
  name?: String;
}

export interface NotableProjectsPreviousValuesPromise
  extends Promise<NotableProjectsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
}

export interface NotableProjectsPreviousValuesSubscription
  extends Promise<AsyncIterator<NotableProjectsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  summary: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface NotificationSubscriptionPayload {
  mutation: MutationType;
  node: Notification;
  updatedFields: String[];
  previousValues: NotificationPreviousValues;
}

export interface NotificationSubscriptionPayloadPromise
  extends Promise<NotificationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotificationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotificationPreviousValuesPromise>() => T;
}

export interface NotificationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NotificationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NotificationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotificationPreviousValuesSubscription>() => T;
}

export interface NotificationPreviousValues {
  id: ID_Output;
  title: String;
  message: String;
  discarded?: Boolean;
  linkTo?: String;
  icon: String;
  createdAt: DateTimeOutput;
}

export interface NotificationPreviousValuesPromise
  extends Promise<NotificationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  message: () => Promise<String>;
  discarded: () => Promise<Boolean>;
  linkTo: () => Promise<String>;
  icon: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface NotificationPreviousValuesSubscription
  extends Promise<AsyncIterator<NotificationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  message: () => Promise<AsyncIterator<String>>;
  discarded: () => Promise<AsyncIterator<Boolean>>;
  linkTo: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PaymentTermSubscriptionPayload {
  mutation: MutationType;
  node: PaymentTerm;
  updatedFields: String[];
  previousValues: PaymentTermPreviousValues;
}

export interface PaymentTermSubscriptionPayloadPromise
  extends Promise<PaymentTermSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PaymentTermPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PaymentTermPreviousValuesPromise>() => T;
}

export interface PaymentTermSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PaymentTermSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PaymentTermSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PaymentTermPreviousValuesSubscription>() => T;
}

export interface PaymentTermPreviousValues {
  id: ID_Output;
  percent?: Int;
  description: String;
}

export interface PaymentTermPreviousValuesPromise
  extends Promise<PaymentTermPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  percent: () => Promise<Int>;
  description: () => Promise<String>;
}

export interface PaymentTermPreviousValuesSubscription
  extends Promise<AsyncIterator<PaymentTermPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  percent: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface SectionSubscriptionPayload {
  mutation: MutationType;
  node: Section;
  updatedFields: String[];
  previousValues: SectionPreviousValues;
}

export interface SectionSubscriptionPayloadPromise
  extends Promise<SectionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SectionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SectionPreviousValuesPromise>() => T;
}

export interface SectionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SectionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SectionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SectionPreviousValuesSubscription>() => T;
}

export interface SectionPreviousValues {
  id: ID_Output;
  title?: String;
  summary?: String;
  showreel?: String;
  type?: String;
}

export interface SectionPreviousValuesPromise
  extends Promise<SectionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  summary: () => Promise<String>;
  showreel: () => Promise<String>;
  type: () => Promise<String>;
}

export interface SectionPreviousValuesSubscription
  extends Promise<AsyncIterator<SectionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  summary: () => Promise<AsyncIterator<String>>;
  showreel: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface TestimonialSubscriptionPayload {
  mutation: MutationType;
  node: Testimonial;
  updatedFields: String[];
  previousValues: TestimonialPreviousValues;
}

export interface TestimonialSubscriptionPayloadPromise
  extends Promise<TestimonialSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TestimonialPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TestimonialPreviousValuesPromise>() => T;
}

export interface TestimonialSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TestimonialSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TestimonialSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TestimonialPreviousValuesSubscription>() => T;
}

export interface TestimonialPreviousValues {
  id: ID_Output;
  summary?: String;
  image?: String;
  name?: String;
  status?: Boolean;
}

export interface TestimonialPreviousValuesPromise
  extends Promise<TestimonialPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
  status: () => Promise<Boolean>;
}

export interface TestimonialPreviousValuesSubscription
  extends Promise<AsyncIterator<TestimonialPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  summary: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  resetToken?: String;
  password: String;
  keywords: String[];
  profileImg?: String;
  profileImgStyle?: String;
  profileBG?: String;
  profileBGStyle?: String;
  autosave?: Boolean;
  summary?: String;
  location?: String;
  favourites: String[];
  img?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  resetToken: () => Promise<String>;
  password: () => Promise<String>;
  keywords: () => Promise<String[]>;
  profileImg: () => Promise<String>;
  profileImgStyle: () => Promise<String>;
  profileBG: () => Promise<String>;
  profileBGStyle: () => Promise<String>;
  autosave: () => Promise<Boolean>;
  summary: () => Promise<String>;
  location: () => Promise<String>;
  favourites: () => Promise<String[]>;
  img: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  keywords: () => Promise<AsyncIterator<String[]>>;
  profileImg: () => Promise<AsyncIterator<String>>;
  profileImgStyle: () => Promise<AsyncIterator<String>>;
  profileBG: () => Promise<AsyncIterator<String>>;
  profileBGStyle: () => Promise<AsyncIterator<String>>;
  autosave: () => Promise<AsyncIterator<Boolean>>;
  summary: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  favourites: () => Promise<AsyncIterator<String[]>>;
  img: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Contract",
    embedded: false
  },
  {
    name: "PaymentTerm",
    embedded: false
  },
  {
    name: "Invite",
    embedded: false
  },
  {
    name: "Conversation",
    embedded: false
  },
  {
    name: "Job",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "Notification",
    embedded: false
  },
  {
    name: "Game",
    embedded: false
  },
  {
    name: "Count",
    embedded: false
  },
  {
    name: "NotableProjects",
    embedded: false
  },
  {
    name: "Section",
    embedded: false
  },
  {
    name: "Testimonial",
    embedded: false
  },
  {
    name: "Gallery",
    embedded: false
  },
  {
    name: "GalleryImage",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
