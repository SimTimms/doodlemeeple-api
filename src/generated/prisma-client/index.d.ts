// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  gallery: (where?: GalleryWhereInput) => Promise<boolean>;
  galleryImage: (where?: GalleryImageWhereInput) => Promise<boolean>;
  game: (where?: GameWhereInput) => Promise<boolean>;
  notableProjects: (where?: NotableProjectsWhereInput) => Promise<boolean>;
  notification: (where?: NotificationWhereInput) => Promise<boolean>;
  section: (where?: SectionWhereInput) => Promise<boolean>;
  testimonial: (where?: TestimonialWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  gallery: (where: GalleryWhereUniqueInput) => GalleryNullablePromise;
  galleries: (args?: {
    where?: GalleryWhereInput;
    orderBy?: GalleryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Gallery>;
  galleriesConnection: (args?: {
    where?: GalleryWhereInput;
    orderBy?: GalleryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GalleryConnectionPromise;
  galleryImage: (
    where: GalleryImageWhereUniqueInput
  ) => GalleryImageNullablePromise;
  galleryImages: (args?: {
    where?: GalleryImageWhereInput;
    orderBy?: GalleryImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GalleryImage>;
  galleryImagesConnection: (args?: {
    where?: GalleryImageWhereInput;
    orderBy?: GalleryImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GalleryImageConnectionPromise;
  game: (where: GameWhereUniqueInput) => GameNullablePromise;
  games: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Game>;
  gamesConnection: (args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GameConnectionPromise;
  notableProjects: (
    where: NotableProjectsWhereUniqueInput
  ) => NotableProjectsNullablePromise;
  notableProjectses: (args?: {
    where?: NotableProjectsWhereInput;
    orderBy?: NotableProjectsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<NotableProjects>;
  notableProjectsesConnection: (args?: {
    where?: NotableProjectsWhereInput;
    orderBy?: NotableProjectsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NotableProjectsConnectionPromise;
  notification: (
    where: NotificationWhereUniqueInput
  ) => NotificationNullablePromise;
  notifications: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Notification>;
  notificationsConnection: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NotificationConnectionPromise;
  section: (where: SectionWhereUniqueInput) => SectionNullablePromise;
  sections: (args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Section>;
  sectionsConnection: (args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SectionConnectionPromise;
  testimonial: (
    where: TestimonialWhereUniqueInput
  ) => TestimonialNullablePromise;
  testimonials: (args?: {
    where?: TestimonialWhereInput;
    orderBy?: TestimonialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Testimonial>;
  testimonialsConnection: (args?: {
    where?: TestimonialWhereInput;
    orderBy?: TestimonialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TestimonialConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGallery: (data: GalleryCreateInput) => GalleryPromise;
  updateGallery: (args: {
    data: GalleryUpdateInput;
    where: GalleryWhereUniqueInput;
  }) => GalleryPromise;
  updateManyGalleries: (args: {
    data: GalleryUpdateManyMutationInput;
    where?: GalleryWhereInput;
  }) => BatchPayloadPromise;
  upsertGallery: (args: {
    where: GalleryWhereUniqueInput;
    create: GalleryCreateInput;
    update: GalleryUpdateInput;
  }) => GalleryPromise;
  deleteGallery: (where: GalleryWhereUniqueInput) => GalleryPromise;
  deleteManyGalleries: (where?: GalleryWhereInput) => BatchPayloadPromise;
  createGalleryImage: (data: GalleryImageCreateInput) => GalleryImagePromise;
  updateGalleryImage: (args: {
    data: GalleryImageUpdateInput;
    where: GalleryImageWhereUniqueInput;
  }) => GalleryImagePromise;
  updateManyGalleryImages: (args: {
    data: GalleryImageUpdateManyMutationInput;
    where?: GalleryImageWhereInput;
  }) => BatchPayloadPromise;
  upsertGalleryImage: (args: {
    where: GalleryImageWhereUniqueInput;
    create: GalleryImageCreateInput;
    update: GalleryImageUpdateInput;
  }) => GalleryImagePromise;
  deleteGalleryImage: (
    where: GalleryImageWhereUniqueInput
  ) => GalleryImagePromise;
  deleteManyGalleryImages: (
    where?: GalleryImageWhereInput
  ) => BatchPayloadPromise;
  createGame: (data: GameCreateInput) => GamePromise;
  updateGame: (args: {
    data: GameUpdateInput;
    where: GameWhereUniqueInput;
  }) => GamePromise;
  updateManyGames: (args: {
    data: GameUpdateManyMutationInput;
    where?: GameWhereInput;
  }) => BatchPayloadPromise;
  upsertGame: (args: {
    where: GameWhereUniqueInput;
    create: GameCreateInput;
    update: GameUpdateInput;
  }) => GamePromise;
  deleteGame: (where: GameWhereUniqueInput) => GamePromise;
  deleteManyGames: (where?: GameWhereInput) => BatchPayloadPromise;
  createNotableProjects: (
    data: NotableProjectsCreateInput
  ) => NotableProjectsPromise;
  updateNotableProjects: (args: {
    data: NotableProjectsUpdateInput;
    where: NotableProjectsWhereUniqueInput;
  }) => NotableProjectsPromise;
  updateManyNotableProjectses: (args: {
    data: NotableProjectsUpdateManyMutationInput;
    where?: NotableProjectsWhereInput;
  }) => BatchPayloadPromise;
  upsertNotableProjects: (args: {
    where: NotableProjectsWhereUniqueInput;
    create: NotableProjectsCreateInput;
    update: NotableProjectsUpdateInput;
  }) => NotableProjectsPromise;
  deleteNotableProjects: (
    where: NotableProjectsWhereUniqueInput
  ) => NotableProjectsPromise;
  deleteManyNotableProjectses: (
    where?: NotableProjectsWhereInput
  ) => BatchPayloadPromise;
  createNotification: (data: NotificationCreateInput) => NotificationPromise;
  updateNotification: (args: {
    data: NotificationUpdateInput;
    where: NotificationWhereUniqueInput;
  }) => NotificationPromise;
  updateManyNotifications: (args: {
    data: NotificationUpdateManyMutationInput;
    where?: NotificationWhereInput;
  }) => BatchPayloadPromise;
  upsertNotification: (args: {
    where: NotificationWhereUniqueInput;
    create: NotificationCreateInput;
    update: NotificationUpdateInput;
  }) => NotificationPromise;
  deleteNotification: (
    where: NotificationWhereUniqueInput
  ) => NotificationPromise;
  deleteManyNotifications: (
    where?: NotificationWhereInput
  ) => BatchPayloadPromise;
  createSection: (data: SectionCreateInput) => SectionPromise;
  updateSection: (args: {
    data: SectionUpdateInput;
    where: SectionWhereUniqueInput;
  }) => SectionPromise;
  updateManySections: (args: {
    data: SectionUpdateManyMutationInput;
    where?: SectionWhereInput;
  }) => BatchPayloadPromise;
  upsertSection: (args: {
    where: SectionWhereUniqueInput;
    create: SectionCreateInput;
    update: SectionUpdateInput;
  }) => SectionPromise;
  deleteSection: (where: SectionWhereUniqueInput) => SectionPromise;
  deleteManySections: (where?: SectionWhereInput) => BatchPayloadPromise;
  createTestimonial: (data: TestimonialCreateInput) => TestimonialPromise;
  updateTestimonial: (args: {
    data: TestimonialUpdateInput;
    where: TestimonialWhereUniqueInput;
  }) => TestimonialPromise;
  updateManyTestimonials: (args: {
    data: TestimonialUpdateManyMutationInput;
    where?: TestimonialWhereInput;
  }) => BatchPayloadPromise;
  upsertTestimonial: (args: {
    where: TestimonialWhereUniqueInput;
    create: TestimonialCreateInput;
    update: TestimonialUpdateInput;
  }) => TestimonialPromise;
  deleteTestimonial: (where: TestimonialWhereUniqueInput) => TestimonialPromise;
  deleteManyTestimonials: (
    where?: TestimonialWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  gallery: (
    where?: GallerySubscriptionWhereInput
  ) => GallerySubscriptionPayloadSubscription;
  galleryImage: (
    where?: GalleryImageSubscriptionWhereInput
  ) => GalleryImageSubscriptionPayloadSubscription;
  game: (
    where?: GameSubscriptionWhereInput
  ) => GameSubscriptionPayloadSubscription;
  notableProjects: (
    where?: NotableProjectsSubscriptionWhereInput
  ) => NotableProjectsSubscriptionPayloadSubscription;
  notification: (
    where?: NotificationSubscriptionWhereInput
  ) => NotificationSubscriptionPayloadSubscription;
  section: (
    where?: SectionSubscriptionWhereInput
  ) => SectionSubscriptionPayloadSubscription;
  testimonial: (
    where?: TestimonialSubscriptionWhereInput
  ) => TestimonialSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type NotableProjectsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "summary_ASC"
  | "summary_DESC"
  | "image_ASC"
  | "image_DESC"
  | "name_ASC"
  | "name_DESC";

export type TestimonialOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "summary_ASC"
  | "summary_DESC"
  | "image_ASC"
  | "image_DESC"
  | "name_ASC"
  | "name_DESC"
  | "status_ASC"
  | "status_DESC";

export type SectionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "summary_ASC"
  | "summary_DESC"
  | "showreel_ASC"
  | "showreel_DESC"
  | "type_ASC"
  | "type_DESC";

export type NotificationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "message_ASC"
  | "message_DESC"
  | "discarded_ASC"
  | "discarded_DESC"
  | "linkTo_ASC"
  | "linkTo_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type GameOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "img_ASC"
  | "img_DESC"
  | "backgroundImg_ASC"
  | "backgroundImg_DESC"
  | "summary_ASC"
  | "summary_DESC"
  | "location_ASC"
  | "location_DESC"
  | "showreel_ASC"
  | "showreel_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type GalleryImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "img_ASC"
  | "img_DESC"
  | "title_ASC"
  | "title_DESC";

export type GalleryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "summary_ASC"
  | "summary_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "password_ASC"
  | "password_DESC"
  | "profileImg_ASC"
  | "profileImg_DESC"
  | "profileImgStyle_ASC"
  | "profileImgStyle_DESC"
  | "profileBG_ASC"
  | "profileBG_DESC"
  | "profileBGStyle_ASC"
  | "profileBGStyle_DESC"
  | "autosave_ASC"
  | "autosave_DESC"
  | "summary_ASC"
  | "summary_DESC"
  | "location_ASC"
  | "location_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type GalleryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NotableProjectsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<NotableProjectsWhereInput[] | NotableProjectsWhereInput>;
  OR?: Maybe<NotableProjectsWhereInput[] | NotableProjectsWhereInput>;
  NOT?: Maybe<NotableProjectsWhereInput[] | NotableProjectsWhereInput>;
}

export interface TestimonialWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  AND?: Maybe<TestimonialWhereInput[] | TestimonialWhereInput>;
  OR?: Maybe<TestimonialWhereInput[] | TestimonialWhereInput>;
  NOT?: Maybe<TestimonialWhereInput[] | TestimonialWhereInput>;
}

export interface SectionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  gallery?: Maybe<GalleryWhereInput>;
  notableProjects_every?: Maybe<NotableProjectsWhereInput>;
  notableProjects_some?: Maybe<NotableProjectsWhereInput>;
  notableProjects_none?: Maybe<NotableProjectsWhereInput>;
  testimonials_every?: Maybe<TestimonialWhereInput>;
  testimonials_some?: Maybe<TestimonialWhereInput>;
  testimonials_none?: Maybe<TestimonialWhereInput>;
  showreel?: Maybe<String>;
  showreel_not?: Maybe<String>;
  showreel_in?: Maybe<String[] | String>;
  showreel_not_in?: Maybe<String[] | String>;
  showreel_lt?: Maybe<String>;
  showreel_lte?: Maybe<String>;
  showreel_gt?: Maybe<String>;
  showreel_gte?: Maybe<String>;
  showreel_contains?: Maybe<String>;
  showreel_not_contains?: Maybe<String>;
  showreel_starts_with?: Maybe<String>;
  showreel_not_starts_with?: Maybe<String>;
  showreel_ends_with?: Maybe<String>;
  showreel_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<SectionWhereInput[] | SectionWhereInput>;
  OR?: Maybe<SectionWhereInput[] | SectionWhereInput>;
  NOT?: Maybe<SectionWhereInput[] | SectionWhereInput>;
}

export interface GalleryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  section?: Maybe<SectionWhereInput>;
  images_every?: Maybe<GalleryImageWhereInput>;
  images_some?: Maybe<GalleryImageWhereInput>;
  images_none?: Maybe<GalleryImageWhereInput>;
  AND?: Maybe<GalleryWhereInput[] | GalleryWhereInput>;
  OR?: Maybe<GalleryWhereInput[] | GalleryWhereInput>;
  NOT?: Maybe<GalleryWhereInput[] | GalleryWhereInput>;
}

export interface GalleryImageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  gallery?: Maybe<GalleryWhereInput>;
  AND?: Maybe<GalleryImageWhereInput[] | GalleryImageWhereInput>;
  OR?: Maybe<GalleryImageWhereInput[] | GalleryImageWhereInput>;
  NOT?: Maybe<GalleryImageWhereInput[] | GalleryImageWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  profileImg?: Maybe<String>;
  profileImg_not?: Maybe<String>;
  profileImg_in?: Maybe<String[] | String>;
  profileImg_not_in?: Maybe<String[] | String>;
  profileImg_lt?: Maybe<String>;
  profileImg_lte?: Maybe<String>;
  profileImg_gt?: Maybe<String>;
  profileImg_gte?: Maybe<String>;
  profileImg_contains?: Maybe<String>;
  profileImg_not_contains?: Maybe<String>;
  profileImg_starts_with?: Maybe<String>;
  profileImg_not_starts_with?: Maybe<String>;
  profileImg_ends_with?: Maybe<String>;
  profileImg_not_ends_with?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileImgStyle_not?: Maybe<String>;
  profileImgStyle_in?: Maybe<String[] | String>;
  profileImgStyle_not_in?: Maybe<String[] | String>;
  profileImgStyle_lt?: Maybe<String>;
  profileImgStyle_lte?: Maybe<String>;
  profileImgStyle_gt?: Maybe<String>;
  profileImgStyle_gte?: Maybe<String>;
  profileImgStyle_contains?: Maybe<String>;
  profileImgStyle_not_contains?: Maybe<String>;
  profileImgStyle_starts_with?: Maybe<String>;
  profileImgStyle_not_starts_with?: Maybe<String>;
  profileImgStyle_ends_with?: Maybe<String>;
  profileImgStyle_not_ends_with?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBG_not?: Maybe<String>;
  profileBG_in?: Maybe<String[] | String>;
  profileBG_not_in?: Maybe<String[] | String>;
  profileBG_lt?: Maybe<String>;
  profileBG_lte?: Maybe<String>;
  profileBG_gt?: Maybe<String>;
  profileBG_gte?: Maybe<String>;
  profileBG_contains?: Maybe<String>;
  profileBG_not_contains?: Maybe<String>;
  profileBG_starts_with?: Maybe<String>;
  profileBG_not_starts_with?: Maybe<String>;
  profileBG_ends_with?: Maybe<String>;
  profileBG_not_ends_with?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  profileBGStyle_not?: Maybe<String>;
  profileBGStyle_in?: Maybe<String[] | String>;
  profileBGStyle_not_in?: Maybe<String[] | String>;
  profileBGStyle_lt?: Maybe<String>;
  profileBGStyle_lte?: Maybe<String>;
  profileBGStyle_gt?: Maybe<String>;
  profileBGStyle_gte?: Maybe<String>;
  profileBGStyle_contains?: Maybe<String>;
  profileBGStyle_not_contains?: Maybe<String>;
  profileBGStyle_starts_with?: Maybe<String>;
  profileBGStyle_not_starts_with?: Maybe<String>;
  profileBGStyle_ends_with?: Maybe<String>;
  profileBGStyle_not_ends_with?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  autosave_not?: Maybe<Boolean>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  sections_every?: Maybe<SectionWhereInput>;
  sections_some?: Maybe<SectionWhereInput>;
  sections_none?: Maybe<SectionWhereInput>;
  notifications_every?: Maybe<NotificationWhereInput>;
  notifications_some?: Maybe<NotificationWhereInput>;
  notifications_none?: Maybe<NotificationWhereInput>;
  games_every?: Maybe<GameWhereInput>;
  games_some?: Maybe<GameWhereInput>;
  games_none?: Maybe<GameWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface NotificationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  discarded_not?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  linkTo_not?: Maybe<String>;
  linkTo_in?: Maybe<String[] | String>;
  linkTo_not_in?: Maybe<String[] | String>;
  linkTo_lt?: Maybe<String>;
  linkTo_lte?: Maybe<String>;
  linkTo_gt?: Maybe<String>;
  linkTo_gte?: Maybe<String>;
  linkTo_contains?: Maybe<String>;
  linkTo_not_contains?: Maybe<String>;
  linkTo_starts_with?: Maybe<String>;
  linkTo_not_starts_with?: Maybe<String>;
  linkTo_ends_with?: Maybe<String>;
  linkTo_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  OR?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  NOT?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
}

export interface GameWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  backgroundImg_not?: Maybe<String>;
  backgroundImg_in?: Maybe<String[] | String>;
  backgroundImg_not_in?: Maybe<String[] | String>;
  backgroundImg_lt?: Maybe<String>;
  backgroundImg_lte?: Maybe<String>;
  backgroundImg_gt?: Maybe<String>;
  backgroundImg_gte?: Maybe<String>;
  backgroundImg_contains?: Maybe<String>;
  backgroundImg_not_contains?: Maybe<String>;
  backgroundImg_starts_with?: Maybe<String>;
  backgroundImg_not_starts_with?: Maybe<String>;
  backgroundImg_ends_with?: Maybe<String>;
  backgroundImg_not_ends_with?: Maybe<String>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  gallery?: Maybe<GalleryWhereInput>;
  showreel?: Maybe<String>;
  showreel_not?: Maybe<String>;
  showreel_in?: Maybe<String[] | String>;
  showreel_not_in?: Maybe<String[] | String>;
  showreel_lt?: Maybe<String>;
  showreel_lte?: Maybe<String>;
  showreel_gt?: Maybe<String>;
  showreel_gte?: Maybe<String>;
  showreel_contains?: Maybe<String>;
  showreel_not_contains?: Maybe<String>;
  showreel_starts_with?: Maybe<String>;
  showreel_not_starts_with?: Maybe<String>;
  showreel_ends_with?: Maybe<String>;
  showreel_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GameWhereInput[] | GameWhereInput>;
  OR?: Maybe<GameWhereInput[] | GameWhereInput>;
  NOT?: Maybe<GameWhereInput[] | GameWhereInput>;
}

export type GalleryImageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type GameWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type NotableProjectsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type NotificationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SectionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TestimonialWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
}>;

export interface GalleryCreateInput {
  id?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  section?: Maybe<SectionCreateOneWithoutGalleryInput>;
  images?: Maybe<GalleryImageCreateManyWithoutGalleryInput>;
}

export interface SectionCreateOneWithoutGalleryInput {
  create?: Maybe<SectionCreateWithoutGalleryInput>;
  connect?: Maybe<SectionWhereUniqueInput>;
}

export interface SectionCreateWithoutGalleryInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  summary?: Maybe<String>;
  notableProjects?: Maybe<NotableProjectsCreateManyInput>;
  testimonials?: Maybe<TestimonialCreateManyInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
  user?: Maybe<UserCreateOneWithoutSectionsInput>;
}

export interface NotableProjectsCreateManyInput {
  create?: Maybe<NotableProjectsCreateInput[] | NotableProjectsCreateInput>;
  connect?: Maybe<
    NotableProjectsWhereUniqueInput[] | NotableProjectsWhereUniqueInput
  >;
}

export interface NotableProjectsCreateInput {
  id?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
}

export interface TestimonialCreateManyInput {
  create?: Maybe<TestimonialCreateInput[] | TestimonialCreateInput>;
  connect?: Maybe<TestimonialWhereUniqueInput[] | TestimonialWhereUniqueInput>;
}

export interface TestimonialCreateInput {
  id?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface UserCreateOneWithoutSectionsInput {
  create?: Maybe<UserCreateWithoutSectionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutSectionsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  games?: Maybe<GameCreateManyWithoutUserInput>;
}

export interface UserCreatekeywordsInput {
  set?: Maybe<String[] | String>;
}

export interface NotificationCreateManyWithoutUserInput {
  create?: Maybe<
    NotificationCreateWithoutUserInput[] | NotificationCreateWithoutUserInput
  >;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
}

export interface NotificationCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  message: String;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon: String;
}

export interface GameCreateManyWithoutUserInput {
  create?: Maybe<GameCreateWithoutUserInput[] | GameCreateWithoutUserInput>;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
}

export interface GameCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  keywords?: Maybe<GameCreatekeywordsInput>;
  img?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
}

export interface GameCreatekeywordsInput {
  set?: Maybe<String[] | String>;
}

export interface GalleryCreateOneInput {
  create?: Maybe<GalleryCreateInput>;
  connect?: Maybe<GalleryWhereUniqueInput>;
}

export interface GalleryImageCreateManyWithoutGalleryInput {
  create?: Maybe<
    | GalleryImageCreateWithoutGalleryInput[]
    | GalleryImageCreateWithoutGalleryInput
  >;
  connect?: Maybe<
    GalleryImageWhereUniqueInput[] | GalleryImageWhereUniqueInput
  >;
}

export interface GalleryImageCreateWithoutGalleryInput {
  id?: Maybe<ID_Input>;
  img: String;
  title?: Maybe<String>;
}

export interface GalleryUpdateInput {
  summary?: Maybe<String>;
  section?: Maybe<SectionUpdateOneWithoutGalleryInput>;
  images?: Maybe<GalleryImageUpdateManyWithoutGalleryInput>;
}

export interface SectionUpdateOneWithoutGalleryInput {
  create?: Maybe<SectionCreateWithoutGalleryInput>;
  update?: Maybe<SectionUpdateWithoutGalleryDataInput>;
  upsert?: Maybe<SectionUpsertWithoutGalleryInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SectionWhereUniqueInput>;
}

export interface SectionUpdateWithoutGalleryDataInput {
  title?: Maybe<String>;
  summary?: Maybe<String>;
  notableProjects?: Maybe<NotableProjectsUpdateManyInput>;
  testimonials?: Maybe<TestimonialUpdateManyInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutSectionsInput>;
}

export interface NotableProjectsUpdateManyInput {
  create?: Maybe<NotableProjectsCreateInput[] | NotableProjectsCreateInput>;
  update?: Maybe<
    | NotableProjectsUpdateWithWhereUniqueNestedInput[]
    | NotableProjectsUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | NotableProjectsUpsertWithWhereUniqueNestedInput[]
    | NotableProjectsUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    NotableProjectsWhereUniqueInput[] | NotableProjectsWhereUniqueInput
  >;
  connect?: Maybe<
    NotableProjectsWhereUniqueInput[] | NotableProjectsWhereUniqueInput
  >;
  set?: Maybe<
    NotableProjectsWhereUniqueInput[] | NotableProjectsWhereUniqueInput
  >;
  disconnect?: Maybe<
    NotableProjectsWhereUniqueInput[] | NotableProjectsWhereUniqueInput
  >;
  deleteMany?: Maybe<
    NotableProjectsScalarWhereInput[] | NotableProjectsScalarWhereInput
  >;
  updateMany?: Maybe<
    | NotableProjectsUpdateManyWithWhereNestedInput[]
    | NotableProjectsUpdateManyWithWhereNestedInput
  >;
}

export interface NotableProjectsUpdateWithWhereUniqueNestedInput {
  where: NotableProjectsWhereUniqueInput;
  data: NotableProjectsUpdateDataInput;
}

export interface NotableProjectsUpdateDataInput {
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
}

export interface NotableProjectsUpsertWithWhereUniqueNestedInput {
  where: NotableProjectsWhereUniqueInput;
  update: NotableProjectsUpdateDataInput;
  create: NotableProjectsCreateInput;
}

export interface NotableProjectsScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    NotableProjectsScalarWhereInput[] | NotableProjectsScalarWhereInput
  >;
  OR?: Maybe<
    NotableProjectsScalarWhereInput[] | NotableProjectsScalarWhereInput
  >;
  NOT?: Maybe<
    NotableProjectsScalarWhereInput[] | NotableProjectsScalarWhereInput
  >;
}

export interface NotableProjectsUpdateManyWithWhereNestedInput {
  where: NotableProjectsScalarWhereInput;
  data: NotableProjectsUpdateManyDataInput;
}

export interface NotableProjectsUpdateManyDataInput {
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
}

export interface TestimonialUpdateManyInput {
  create?: Maybe<TestimonialCreateInput[] | TestimonialCreateInput>;
  update?: Maybe<
    | TestimonialUpdateWithWhereUniqueNestedInput[]
    | TestimonialUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | TestimonialUpsertWithWhereUniqueNestedInput[]
    | TestimonialUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<TestimonialWhereUniqueInput[] | TestimonialWhereUniqueInput>;
  connect?: Maybe<TestimonialWhereUniqueInput[] | TestimonialWhereUniqueInput>;
  set?: Maybe<TestimonialWhereUniqueInput[] | TestimonialWhereUniqueInput>;
  disconnect?: Maybe<
    TestimonialWhereUniqueInput[] | TestimonialWhereUniqueInput
  >;
  deleteMany?: Maybe<
    TestimonialScalarWhereInput[] | TestimonialScalarWhereInput
  >;
  updateMany?: Maybe<
    | TestimonialUpdateManyWithWhereNestedInput[]
    | TestimonialUpdateManyWithWhereNestedInput
  >;
}

export interface TestimonialUpdateWithWhereUniqueNestedInput {
  where: TestimonialWhereUniqueInput;
  data: TestimonialUpdateDataInput;
}

export interface TestimonialUpdateDataInput {
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface TestimonialUpsertWithWhereUniqueNestedInput {
  where: TestimonialWhereUniqueInput;
  update: TestimonialUpdateDataInput;
  create: TestimonialCreateInput;
}

export interface TestimonialScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  AND?: Maybe<TestimonialScalarWhereInput[] | TestimonialScalarWhereInput>;
  OR?: Maybe<TestimonialScalarWhereInput[] | TestimonialScalarWhereInput>;
  NOT?: Maybe<TestimonialScalarWhereInput[] | TestimonialScalarWhereInput>;
}

export interface TestimonialUpdateManyWithWhereNestedInput {
  where: TestimonialScalarWhereInput;
  data: TestimonialUpdateManyDataInput;
}

export interface TestimonialUpdateManyDataInput {
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface UserUpdateOneWithoutSectionsInput {
  create?: Maybe<UserCreateWithoutSectionsInput>;
  update?: Maybe<UserUpdateWithoutSectionsDataInput>;
  upsert?: Maybe<UserUpsertWithoutSectionsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutSectionsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  games?: Maybe<GameUpdateManyWithoutUserInput>;
}

export interface UserUpdatekeywordsInput {
  set?: Maybe<String[] | String>;
}

export interface NotificationUpdateManyWithoutUserInput {
  create?: Maybe<
    NotificationCreateWithoutUserInput[] | NotificationCreateWithoutUserInput
  >;
  delete?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  set?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  disconnect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  update?: Maybe<
    | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    | NotificationUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    | NotificationUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    NotificationScalarWhereInput[] | NotificationScalarWhereInput
  >;
  updateMany?: Maybe<
    | NotificationUpdateManyWithWhereNestedInput[]
    | NotificationUpdateManyWithWhereNestedInput
  >;
}

export interface NotificationUpdateWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput;
  data: NotificationUpdateWithoutUserDataInput;
}

export interface NotificationUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface NotificationUpsertWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput;
  update: NotificationUpdateWithoutUserDataInput;
  create: NotificationCreateWithoutUserInput;
}

export interface NotificationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  discarded_not?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  linkTo_not?: Maybe<String>;
  linkTo_in?: Maybe<String[] | String>;
  linkTo_not_in?: Maybe<String[] | String>;
  linkTo_lt?: Maybe<String>;
  linkTo_lte?: Maybe<String>;
  linkTo_gt?: Maybe<String>;
  linkTo_gte?: Maybe<String>;
  linkTo_contains?: Maybe<String>;
  linkTo_not_contains?: Maybe<String>;
  linkTo_starts_with?: Maybe<String>;
  linkTo_not_starts_with?: Maybe<String>;
  linkTo_ends_with?: Maybe<String>;
  linkTo_not_ends_with?: Maybe<String>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  OR?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  NOT?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
}

export interface NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput;
  data: NotificationUpdateManyDataInput;
}

export interface NotificationUpdateManyDataInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface GameUpdateManyWithoutUserInput {
  create?: Maybe<GameCreateWithoutUserInput[] | GameCreateWithoutUserInput>;
  delete?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  connect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  set?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  disconnect?: Maybe<GameWhereUniqueInput[] | GameWhereUniqueInput>;
  update?: Maybe<
    | GameUpdateWithWhereUniqueWithoutUserInput[]
    | GameUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | GameUpsertWithWhereUniqueWithoutUserInput[]
    | GameUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  updateMany?: Maybe<
    GameUpdateManyWithWhereNestedInput[] | GameUpdateManyWithWhereNestedInput
  >;
}

export interface GameUpdateWithWhereUniqueWithoutUserInput {
  where: GameWhereUniqueInput;
  data: GameUpdateWithoutUserDataInput;
}

export interface GameUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  keywords?: Maybe<GameUpdatekeywordsInput>;
  img?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
}

export interface GameUpdatekeywordsInput {
  set?: Maybe<String[] | String>;
}

export interface GalleryUpdateOneInput {
  create?: Maybe<GalleryCreateInput>;
  update?: Maybe<GalleryUpdateDataInput>;
  upsert?: Maybe<GalleryUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GalleryWhereUniqueInput>;
}

export interface GalleryUpdateDataInput {
  summary?: Maybe<String>;
  section?: Maybe<SectionUpdateOneWithoutGalleryInput>;
  images?: Maybe<GalleryImageUpdateManyWithoutGalleryInput>;
}

export interface GalleryImageUpdateManyWithoutGalleryInput {
  create?: Maybe<
    | GalleryImageCreateWithoutGalleryInput[]
    | GalleryImageCreateWithoutGalleryInput
  >;
  delete?: Maybe<GalleryImageWhereUniqueInput[] | GalleryImageWhereUniqueInput>;
  connect?: Maybe<
    GalleryImageWhereUniqueInput[] | GalleryImageWhereUniqueInput
  >;
  set?: Maybe<GalleryImageWhereUniqueInput[] | GalleryImageWhereUniqueInput>;
  disconnect?: Maybe<
    GalleryImageWhereUniqueInput[] | GalleryImageWhereUniqueInput
  >;
  update?: Maybe<
    | GalleryImageUpdateWithWhereUniqueWithoutGalleryInput[]
    | GalleryImageUpdateWithWhereUniqueWithoutGalleryInput
  >;
  upsert?: Maybe<
    | GalleryImageUpsertWithWhereUniqueWithoutGalleryInput[]
    | GalleryImageUpsertWithWhereUniqueWithoutGalleryInput
  >;
  deleteMany?: Maybe<
    GalleryImageScalarWhereInput[] | GalleryImageScalarWhereInput
  >;
  updateMany?: Maybe<
    | GalleryImageUpdateManyWithWhereNestedInput[]
    | GalleryImageUpdateManyWithWhereNestedInput
  >;
}

export interface GalleryImageUpdateWithWhereUniqueWithoutGalleryInput {
  where: GalleryImageWhereUniqueInput;
  data: GalleryImageUpdateWithoutGalleryDataInput;
}

export interface GalleryImageUpdateWithoutGalleryDataInput {
  img?: Maybe<String>;
  title?: Maybe<String>;
}

export interface GalleryImageUpsertWithWhereUniqueWithoutGalleryInput {
  where: GalleryImageWhereUniqueInput;
  update: GalleryImageUpdateWithoutGalleryDataInput;
  create: GalleryImageCreateWithoutGalleryInput;
}

export interface GalleryImageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<GalleryImageScalarWhereInput[] | GalleryImageScalarWhereInput>;
  OR?: Maybe<GalleryImageScalarWhereInput[] | GalleryImageScalarWhereInput>;
  NOT?: Maybe<GalleryImageScalarWhereInput[] | GalleryImageScalarWhereInput>;
}

export interface GalleryImageUpdateManyWithWhereNestedInput {
  where: GalleryImageScalarWhereInput;
  data: GalleryImageUpdateManyDataInput;
}

export interface GalleryImageUpdateManyDataInput {
  img?: Maybe<String>;
  title?: Maybe<String>;
}

export interface GalleryUpsertNestedInput {
  update: GalleryUpdateDataInput;
  create: GalleryCreateInput;
}

export interface GameUpsertWithWhereUniqueWithoutUserInput {
  where: GameWhereUniqueInput;
  update: GameUpdateWithoutUserDataInput;
  create: GameCreateWithoutUserInput;
}

export interface GameScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  backgroundImg_not?: Maybe<String>;
  backgroundImg_in?: Maybe<String[] | String>;
  backgroundImg_not_in?: Maybe<String[] | String>;
  backgroundImg_lt?: Maybe<String>;
  backgroundImg_lte?: Maybe<String>;
  backgroundImg_gt?: Maybe<String>;
  backgroundImg_gte?: Maybe<String>;
  backgroundImg_contains?: Maybe<String>;
  backgroundImg_not_contains?: Maybe<String>;
  backgroundImg_starts_with?: Maybe<String>;
  backgroundImg_not_starts_with?: Maybe<String>;
  backgroundImg_ends_with?: Maybe<String>;
  backgroundImg_not_ends_with?: Maybe<String>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  showreel?: Maybe<String>;
  showreel_not?: Maybe<String>;
  showreel_in?: Maybe<String[] | String>;
  showreel_not_in?: Maybe<String[] | String>;
  showreel_lt?: Maybe<String>;
  showreel_lte?: Maybe<String>;
  showreel_gt?: Maybe<String>;
  showreel_gte?: Maybe<String>;
  showreel_contains?: Maybe<String>;
  showreel_not_contains?: Maybe<String>;
  showreel_starts_with?: Maybe<String>;
  showreel_not_starts_with?: Maybe<String>;
  showreel_ends_with?: Maybe<String>;
  showreel_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  OR?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
  NOT?: Maybe<GameScalarWhereInput[] | GameScalarWhereInput>;
}

export interface GameUpdateManyWithWhereNestedInput {
  where: GameScalarWhereInput;
  data: GameUpdateManyDataInput;
}

export interface GameUpdateManyDataInput {
  name?: Maybe<String>;
  keywords?: Maybe<GameUpdatekeywordsInput>;
  img?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
}

export interface UserUpsertWithoutSectionsInput {
  update: UserUpdateWithoutSectionsDataInput;
  create: UserCreateWithoutSectionsInput;
}

export interface SectionUpsertWithoutGalleryInput {
  update: SectionUpdateWithoutGalleryDataInput;
  create: SectionCreateWithoutGalleryInput;
}

export interface GalleryUpdateManyMutationInput {
  summary?: Maybe<String>;
}

export interface GalleryImageCreateInput {
  id?: Maybe<ID_Input>;
  img: String;
  title?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneWithoutImagesInput>;
}

export interface GalleryCreateOneWithoutImagesInput {
  create?: Maybe<GalleryCreateWithoutImagesInput>;
  connect?: Maybe<GalleryWhereUniqueInput>;
}

export interface GalleryCreateWithoutImagesInput {
  id?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  section?: Maybe<SectionCreateOneWithoutGalleryInput>;
}

export interface GalleryImageUpdateInput {
  img?: Maybe<String>;
  title?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneWithoutImagesInput>;
}

export interface GalleryUpdateOneWithoutImagesInput {
  create?: Maybe<GalleryCreateWithoutImagesInput>;
  update?: Maybe<GalleryUpdateWithoutImagesDataInput>;
  upsert?: Maybe<GalleryUpsertWithoutImagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GalleryWhereUniqueInput>;
}

export interface GalleryUpdateWithoutImagesDataInput {
  summary?: Maybe<String>;
  section?: Maybe<SectionUpdateOneWithoutGalleryInput>;
}

export interface GalleryUpsertWithoutImagesInput {
  update: GalleryUpdateWithoutImagesDataInput;
  create: GalleryCreateWithoutImagesInput;
}

export interface GalleryImageUpdateManyMutationInput {
  img?: Maybe<String>;
  title?: Maybe<String>;
}

export interface GameCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  keywords?: Maybe<GameCreatekeywordsInput>;
  img?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneInput>;
  showreel?: Maybe<String>;
  user: UserCreateOneWithoutGamesInput;
  type?: Maybe<String>;
}

export interface UserCreateOneWithoutGamesInput {
  create?: Maybe<UserCreateWithoutGamesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutGamesInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  sections?: Maybe<SectionCreateManyWithoutUserInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
}

export interface SectionCreateManyWithoutUserInput {
  create?: Maybe<
    SectionCreateWithoutUserInput[] | SectionCreateWithoutUserInput
  >;
  connect?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
}

export interface SectionCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  summary?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneWithoutSectionInput>;
  notableProjects?: Maybe<NotableProjectsCreateManyInput>;
  testimonials?: Maybe<TestimonialCreateManyInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
}

export interface GalleryCreateOneWithoutSectionInput {
  create?: Maybe<GalleryCreateWithoutSectionInput>;
  connect?: Maybe<GalleryWhereUniqueInput>;
}

export interface GalleryCreateWithoutSectionInput {
  id?: Maybe<ID_Input>;
  summary?: Maybe<String>;
  images?: Maybe<GalleryImageCreateManyWithoutGalleryInput>;
}

export interface GameUpdateInput {
  name?: Maybe<String>;
  keywords?: Maybe<GameUpdatekeywordsInput>;
  img?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneInput>;
  showreel?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutGamesInput>;
  type?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutGamesInput {
  create?: Maybe<UserCreateWithoutGamesInput>;
  update?: Maybe<UserUpdateWithoutGamesDataInput>;
  upsert?: Maybe<UserUpsertWithoutGamesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutGamesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutUserInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
}

export interface SectionUpdateManyWithoutUserInput {
  create?: Maybe<
    SectionCreateWithoutUserInput[] | SectionCreateWithoutUserInput
  >;
  delete?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
  connect?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
  set?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
  disconnect?: Maybe<SectionWhereUniqueInput[] | SectionWhereUniqueInput>;
  update?: Maybe<
    | SectionUpdateWithWhereUniqueWithoutUserInput[]
    | SectionUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | SectionUpsertWithWhereUniqueWithoutUserInput[]
    | SectionUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<SectionScalarWhereInput[] | SectionScalarWhereInput>;
  updateMany?: Maybe<
    | SectionUpdateManyWithWhereNestedInput[]
    | SectionUpdateManyWithWhereNestedInput
  >;
}

export interface SectionUpdateWithWhereUniqueWithoutUserInput {
  where: SectionWhereUniqueInput;
  data: SectionUpdateWithoutUserDataInput;
}

export interface SectionUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  summary?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneWithoutSectionInput>;
  notableProjects?: Maybe<NotableProjectsUpdateManyInput>;
  testimonials?: Maybe<TestimonialUpdateManyInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
}

export interface GalleryUpdateOneWithoutSectionInput {
  create?: Maybe<GalleryCreateWithoutSectionInput>;
  update?: Maybe<GalleryUpdateWithoutSectionDataInput>;
  upsert?: Maybe<GalleryUpsertWithoutSectionInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GalleryWhereUniqueInput>;
}

export interface GalleryUpdateWithoutSectionDataInput {
  summary?: Maybe<String>;
  images?: Maybe<GalleryImageUpdateManyWithoutGalleryInput>;
}

export interface GalleryUpsertWithoutSectionInput {
  update: GalleryUpdateWithoutSectionDataInput;
  create: GalleryCreateWithoutSectionInput;
}

export interface SectionUpsertWithWhereUniqueWithoutUserInput {
  where: SectionWhereUniqueInput;
  update: SectionUpdateWithoutUserDataInput;
  create: SectionCreateWithoutUserInput;
}

export interface SectionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  summary?: Maybe<String>;
  summary_not?: Maybe<String>;
  summary_in?: Maybe<String[] | String>;
  summary_not_in?: Maybe<String[] | String>;
  summary_lt?: Maybe<String>;
  summary_lte?: Maybe<String>;
  summary_gt?: Maybe<String>;
  summary_gte?: Maybe<String>;
  summary_contains?: Maybe<String>;
  summary_not_contains?: Maybe<String>;
  summary_starts_with?: Maybe<String>;
  summary_not_starts_with?: Maybe<String>;
  summary_ends_with?: Maybe<String>;
  summary_not_ends_with?: Maybe<String>;
  showreel?: Maybe<String>;
  showreel_not?: Maybe<String>;
  showreel_in?: Maybe<String[] | String>;
  showreel_not_in?: Maybe<String[] | String>;
  showreel_lt?: Maybe<String>;
  showreel_lte?: Maybe<String>;
  showreel_gt?: Maybe<String>;
  showreel_gte?: Maybe<String>;
  showreel_contains?: Maybe<String>;
  showreel_not_contains?: Maybe<String>;
  showreel_starts_with?: Maybe<String>;
  showreel_not_starts_with?: Maybe<String>;
  showreel_ends_with?: Maybe<String>;
  showreel_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  AND?: Maybe<SectionScalarWhereInput[] | SectionScalarWhereInput>;
  OR?: Maybe<SectionScalarWhereInput[] | SectionScalarWhereInput>;
  NOT?: Maybe<SectionScalarWhereInput[] | SectionScalarWhereInput>;
}

export interface SectionUpdateManyWithWhereNestedInput {
  where: SectionScalarWhereInput;
  data: SectionUpdateManyDataInput;
}

export interface SectionUpdateManyDataInput {
  title?: Maybe<String>;
  summary?: Maybe<String>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
}

export interface UserUpsertWithoutGamesInput {
  update: UserUpdateWithoutGamesDataInput;
  create: UserCreateWithoutGamesInput;
}

export interface GameUpdateManyMutationInput {
  name?: Maybe<String>;
  keywords?: Maybe<GameUpdatekeywordsInput>;
  img?: Maybe<String>;
  backgroundImg?: Maybe<String>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
}

export interface NotableProjectsUpdateInput {
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
}

export interface NotableProjectsUpdateManyMutationInput {
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
}

export interface NotificationCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  message: String;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon: String;
  user: UserCreateOneWithoutNotificationsInput;
}

export interface UserCreateOneWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutNotificationsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  sections?: Maybe<SectionCreateManyWithoutUserInput>;
  games?: Maybe<GameCreateManyWithoutUserInput>;
}

export interface NotificationUpdateInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutNotificationsInput>;
}

export interface UserUpdateOneRequiredWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  update?: Maybe<UserUpdateWithoutNotificationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutNotificationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutNotificationsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutUserInput>;
  games?: Maybe<GameUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutNotificationsInput {
  update: UserUpdateWithoutNotificationsDataInput;
  create: UserCreateWithoutNotificationsInput;
}

export interface NotificationUpdateManyMutationInput {
  title?: Maybe<String>;
  message?: Maybe<String>;
  discarded?: Maybe<Boolean>;
  linkTo?: Maybe<String>;
  icon?: Maybe<String>;
}

export interface SectionCreateInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  summary?: Maybe<String>;
  gallery?: Maybe<GalleryCreateOneWithoutSectionInput>;
  notableProjects?: Maybe<NotableProjectsCreateManyInput>;
  testimonials?: Maybe<TestimonialCreateManyInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
  user?: Maybe<UserCreateOneWithoutSectionsInput>;
}

export interface SectionUpdateInput {
  title?: Maybe<String>;
  summary?: Maybe<String>;
  gallery?: Maybe<GalleryUpdateOneWithoutSectionInput>;
  notableProjects?: Maybe<NotableProjectsUpdateManyInput>;
  testimonials?: Maybe<TestimonialUpdateManyInput>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutSectionsInput>;
}

export interface SectionUpdateManyMutationInput {
  title?: Maybe<String>;
  summary?: Maybe<String>;
  showreel?: Maybe<String>;
  type?: Maybe<String>;
}

export interface TestimonialUpdateInput {
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface TestimonialUpdateManyMutationInput {
  summary?: Maybe<String>;
  image?: Maybe<String>;
  name?: Maybe<String>;
  status?: Maybe<Boolean>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  resetToken?: Maybe<String>;
  password: String;
  keywords?: Maybe<UserCreatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  sections?: Maybe<SectionCreateManyWithoutUserInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  games?: Maybe<GameCreateManyWithoutUserInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
  sections?: Maybe<SectionUpdateManyWithoutUserInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  games?: Maybe<GameUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  resetToken?: Maybe<String>;
  password?: Maybe<String>;
  keywords?: Maybe<UserUpdatekeywordsInput>;
  profileImg?: Maybe<String>;
  profileImgStyle?: Maybe<String>;
  profileBG?: Maybe<String>;
  profileBGStyle?: Maybe<String>;
  autosave?: Maybe<Boolean>;
  summary?: Maybe<String>;
  location?: Maybe<String>;
}

export interface GallerySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GalleryWhereInput>;
  AND?: Maybe<GallerySubscriptionWhereInput[] | GallerySubscriptionWhereInput>;
  OR?: Maybe<GallerySubscriptionWhereInput[] | GallerySubscriptionWhereInput>;
  NOT?: Maybe<GallerySubscriptionWhereInput[] | GallerySubscriptionWhereInput>;
}

export interface GalleryImageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GalleryImageWhereInput>;
  AND?: Maybe<
    GalleryImageSubscriptionWhereInput[] | GalleryImageSubscriptionWhereInput
  >;
  OR?: Maybe<
    GalleryImageSubscriptionWhereInput[] | GalleryImageSubscriptionWhereInput
  >;
  NOT?: Maybe<
    GalleryImageSubscriptionWhereInput[] | GalleryImageSubscriptionWhereInput
  >;
}

export interface GameSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GameWhereInput>;
  AND?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
  OR?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
  NOT?: Maybe<GameSubscriptionWhereInput[] | GameSubscriptionWhereInput>;
}

export interface NotableProjectsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NotableProjectsWhereInput>;
  AND?: Maybe<
    | NotableProjectsSubscriptionWhereInput[]
    | NotableProjectsSubscriptionWhereInput
  >;
  OR?: Maybe<
    | NotableProjectsSubscriptionWhereInput[]
    | NotableProjectsSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | NotableProjectsSubscriptionWhereInput[]
    | NotableProjectsSubscriptionWhereInput
  >;
}

export interface NotificationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NotificationWhereInput>;
  AND?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  OR?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
}

export interface SectionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SectionWhereInput>;
  AND?: Maybe<SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput>;
  OR?: Maybe<SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput>;
  NOT?: Maybe<SectionSubscriptionWhereInput[] | SectionSubscriptionWhereInput>;
}

export interface TestimonialSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TestimonialWhereInput>;
  AND?: Maybe<
    TestimonialSubscriptionWhereInput[] | TestimonialSubscriptionWhereInput
  >;
  OR?: Maybe<
    TestimonialSubscriptionWhereInput[] | TestimonialSubscriptionWhereInput
  >;
  NOT?: Maybe<
    TestimonialSubscriptionWhereInput[] | TestimonialSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Gallery {
  id: ID_Output;
  summary?: String;
}

export interface GalleryPromise extends Promise<Gallery>, Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  section: <T = SectionPromise>() => T;
  images: <T = FragmentableArray<GalleryImage>>(args?: {
    where?: GalleryImageWhereInput;
    orderBy?: GalleryImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GallerySubscription
  extends Promise<AsyncIterator<Gallery>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  summary: () => Promise<AsyncIterator<String>>;
  section: <T = SectionSubscription>() => T;
  images: <T = Promise<AsyncIterator<GalleryImageSubscription>>>(args?: {
    where?: GalleryImageWhereInput;
    orderBy?: GalleryImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GalleryNullablePromise
  extends Promise<Gallery | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  section: <T = SectionPromise>() => T;
  images: <T = FragmentableArray<GalleryImage>>(args?: {
    where?: GalleryImageWhereInput;
    orderBy?: GalleryImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Section {
  id: ID_Output;
  title?: String;
  summary?: String;
  showreel?: String;
  type?: String;
}

export interface SectionPromise extends Promise<Section>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  summary: () => Promise<String>;
  gallery: <T = GalleryPromise>() => T;
  notableProjects: <T = FragmentableArray<NotableProjects>>(args?: {
    where?: NotableProjectsWhereInput;
    orderBy?: NotableProjectsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  testimonials: <T = FragmentableArray<Testimonial>>(args?: {
    where?: TestimonialWhereInput;
    orderBy?: TestimonialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  showreel: () => Promise<String>;
  type: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface SectionSubscription
  extends Promise<AsyncIterator<Section>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  summary: () => Promise<AsyncIterator<String>>;
  gallery: <T = GallerySubscription>() => T;
  notableProjects: <
    T = Promise<AsyncIterator<NotableProjectsSubscription>>
  >(args?: {
    where?: NotableProjectsWhereInput;
    orderBy?: NotableProjectsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  testimonials: <T = Promise<AsyncIterator<TestimonialSubscription>>>(args?: {
    where?: TestimonialWhereInput;
    orderBy?: TestimonialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  showreel: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface SectionNullablePromise
  extends Promise<Section | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  summary: () => Promise<String>;
  gallery: <T = GalleryPromise>() => T;
  notableProjects: <T = FragmentableArray<NotableProjects>>(args?: {
    where?: NotableProjectsWhereInput;
    orderBy?: NotableProjectsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  testimonials: <T = FragmentableArray<Testimonial>>(args?: {
    where?: TestimonialWhereInput;
    orderBy?: TestimonialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  showreel: () => Promise<String>;
  type: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface NotableProjects {
  id: ID_Output;
  summary?: String;
  image?: String;
  name?: String;
}

export interface NotableProjectsPromise
  extends Promise<NotableProjects>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
}

export interface NotableProjectsSubscription
  extends Promise<AsyncIterator<NotableProjects>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  summary: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface NotableProjectsNullablePromise
  extends Promise<NotableProjects | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
}

export interface Testimonial {
  id: ID_Output;
  summary?: String;
  image?: String;
  name?: String;
  status?: Boolean;
}

export interface TestimonialPromise extends Promise<Testimonial>, Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
  status: () => Promise<Boolean>;
}

export interface TestimonialSubscription
  extends Promise<AsyncIterator<Testimonial>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  summary: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Boolean>>;
}

export interface TestimonialNullablePromise
  extends Promise<Testimonial | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
  status: () => Promise<Boolean>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  resetToken?: String;
  password: String;
  keywords: String[];
  profileImg?: String;
  profileImgStyle?: String;
  profileBG?: String;
  profileBGStyle?: String;
  autosave?: Boolean;
  summary?: String;
  location?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  resetToken: () => Promise<String>;
  password: () => Promise<String>;
  keywords: () => Promise<String[]>;
  profileImg: () => Promise<String>;
  profileImgStyle: () => Promise<String>;
  profileBG: () => Promise<String>;
  profileBGStyle: () => Promise<String>;
  autosave: () => Promise<Boolean>;
  summary: () => Promise<String>;
  location: () => Promise<String>;
  sections: <T = FragmentableArray<Section>>(args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  games: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  keywords: () => Promise<AsyncIterator<String[]>>;
  profileImg: () => Promise<AsyncIterator<String>>;
  profileImgStyle: () => Promise<AsyncIterator<String>>;
  profileBG: () => Promise<AsyncIterator<String>>;
  profileBGStyle: () => Promise<AsyncIterator<String>>;
  autosave: () => Promise<AsyncIterator<Boolean>>;
  summary: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  sections: <T = Promise<AsyncIterator<SectionSubscription>>>(args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = Promise<AsyncIterator<NotificationSubscription>>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  games: <T = Promise<AsyncIterator<GameSubscription>>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  resetToken: () => Promise<String>;
  password: () => Promise<String>;
  keywords: () => Promise<String[]>;
  profileImg: () => Promise<String>;
  profileImgStyle: () => Promise<String>;
  profileBG: () => Promise<String>;
  profileBGStyle: () => Promise<String>;
  autosave: () => Promise<Boolean>;
  summary: () => Promise<String>;
  location: () => Promise<String>;
  sections: <T = FragmentableArray<Section>>(args?: {
    where?: SectionWhereInput;
    orderBy?: SectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  games: <T = FragmentableArray<Game>>(args?: {
    where?: GameWhereInput;
    orderBy?: GameOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Notification {
  id: ID_Output;
  title: String;
  message: String;
  discarded?: Boolean;
  linkTo?: String;
  icon: String;
  createdAt: DateTimeOutput;
}

export interface NotificationPromise
  extends Promise<Notification>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  message: () => Promise<String>;
  discarded: () => Promise<Boolean>;
  linkTo: () => Promise<String>;
  icon: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
}

export interface NotificationSubscription
  extends Promise<AsyncIterator<Notification>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  message: () => Promise<AsyncIterator<String>>;
  discarded: () => Promise<AsyncIterator<Boolean>>;
  linkTo: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
}

export interface NotificationNullablePromise
  extends Promise<Notification | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  message: () => Promise<String>;
  discarded: () => Promise<Boolean>;
  linkTo: () => Promise<String>;
  icon: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
}

export interface Game {
  id: ID_Output;
  name: String;
  keywords: String[];
  img?: String;
  backgroundImg?: String;
  summary?: String;
  location?: String;
  showreel?: String;
  type?: String;
  createdAt: DateTimeOutput;
}

export interface GamePromise extends Promise<Game>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  keywords: () => Promise<String[]>;
  img: () => Promise<String>;
  backgroundImg: () => Promise<String>;
  summary: () => Promise<String>;
  location: () => Promise<String>;
  gallery: <T = GalleryPromise>() => T;
  showreel: () => Promise<String>;
  user: <T = UserPromise>() => T;
  type: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GameSubscription
  extends Promise<AsyncIterator<Game>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  keywords: () => Promise<AsyncIterator<String[]>>;
  img: () => Promise<AsyncIterator<String>>;
  backgroundImg: () => Promise<AsyncIterator<String>>;
  summary: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  gallery: <T = GallerySubscription>() => T;
  showreel: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  type: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GameNullablePromise
  extends Promise<Game | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  keywords: () => Promise<String[]>;
  img: () => Promise<String>;
  backgroundImg: () => Promise<String>;
  summary: () => Promise<String>;
  location: () => Promise<String>;
  gallery: <T = GalleryPromise>() => T;
  showreel: () => Promise<String>;
  user: <T = UserPromise>() => T;
  type: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GalleryImage {
  id: ID_Output;
  img: String;
  title?: String;
}

export interface GalleryImagePromise
  extends Promise<GalleryImage>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  img: () => Promise<String>;
  title: () => Promise<String>;
  gallery: <T = GalleryPromise>() => T;
}

export interface GalleryImageSubscription
  extends Promise<AsyncIterator<GalleryImage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  img: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  gallery: <T = GallerySubscription>() => T;
}

export interface GalleryImageNullablePromise
  extends Promise<GalleryImage | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  img: () => Promise<String>;
  title: () => Promise<String>;
  gallery: <T = GalleryPromise>() => T;
}

export interface GalleryConnection {
  pageInfo: PageInfo;
  edges: GalleryEdge[];
}

export interface GalleryConnectionPromise
  extends Promise<GalleryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GalleryEdge>>() => T;
  aggregate: <T = AggregateGalleryPromise>() => T;
}

export interface GalleryConnectionSubscription
  extends Promise<AsyncIterator<GalleryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GalleryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGallerySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface GalleryEdge {
  node: Gallery;
  cursor: String;
}

export interface GalleryEdgePromise extends Promise<GalleryEdge>, Fragmentable {
  node: <T = GalleryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GalleryEdgeSubscription
  extends Promise<AsyncIterator<GalleryEdge>>,
    Fragmentable {
  node: <T = GallerySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGallery {
  count: Int;
}

export interface AggregateGalleryPromise
  extends Promise<AggregateGallery>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGallerySubscription
  extends Promise<AsyncIterator<AggregateGallery>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GalleryImageConnection {
  pageInfo: PageInfo;
  edges: GalleryImageEdge[];
}

export interface GalleryImageConnectionPromise
  extends Promise<GalleryImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GalleryImageEdge>>() => T;
  aggregate: <T = AggregateGalleryImagePromise>() => T;
}

export interface GalleryImageConnectionSubscription
  extends Promise<AsyncIterator<GalleryImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GalleryImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGalleryImageSubscription>() => T;
}

export interface GalleryImageEdge {
  node: GalleryImage;
  cursor: String;
}

export interface GalleryImageEdgePromise
  extends Promise<GalleryImageEdge>,
    Fragmentable {
  node: <T = GalleryImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GalleryImageEdgeSubscription
  extends Promise<AsyncIterator<GalleryImageEdge>>,
    Fragmentable {
  node: <T = GalleryImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGalleryImage {
  count: Int;
}

export interface AggregateGalleryImagePromise
  extends Promise<AggregateGalleryImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGalleryImageSubscription
  extends Promise<AsyncIterator<AggregateGalleryImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GameConnection {
  pageInfo: PageInfo;
  edges: GameEdge[];
}

export interface GameConnectionPromise
  extends Promise<GameConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GameEdge>>() => T;
  aggregate: <T = AggregateGamePromise>() => T;
}

export interface GameConnectionSubscription
  extends Promise<AsyncIterator<GameConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GameEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGameSubscription>() => T;
}

export interface GameEdge {
  node: Game;
  cursor: String;
}

export interface GameEdgePromise extends Promise<GameEdge>, Fragmentable {
  node: <T = GamePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GameEdgeSubscription
  extends Promise<AsyncIterator<GameEdge>>,
    Fragmentable {
  node: <T = GameSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGame {
  count: Int;
}

export interface AggregateGamePromise
  extends Promise<AggregateGame>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGameSubscription
  extends Promise<AsyncIterator<AggregateGame>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NotableProjectsConnection {
  pageInfo: PageInfo;
  edges: NotableProjectsEdge[];
}

export interface NotableProjectsConnectionPromise
  extends Promise<NotableProjectsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NotableProjectsEdge>>() => T;
  aggregate: <T = AggregateNotableProjectsPromise>() => T;
}

export interface NotableProjectsConnectionSubscription
  extends Promise<AsyncIterator<NotableProjectsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NotableProjectsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNotableProjectsSubscription>() => T;
}

export interface NotableProjectsEdge {
  node: NotableProjects;
  cursor: String;
}

export interface NotableProjectsEdgePromise
  extends Promise<NotableProjectsEdge>,
    Fragmentable {
  node: <T = NotableProjectsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NotableProjectsEdgeSubscription
  extends Promise<AsyncIterator<NotableProjectsEdge>>,
    Fragmentable {
  node: <T = NotableProjectsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNotableProjects {
  count: Int;
}

export interface AggregateNotableProjectsPromise
  extends Promise<AggregateNotableProjects>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNotableProjectsSubscription
  extends Promise<AsyncIterator<AggregateNotableProjects>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NotificationConnection {
  pageInfo: PageInfo;
  edges: NotificationEdge[];
}

export interface NotificationConnectionPromise
  extends Promise<NotificationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NotificationEdge>>() => T;
  aggregate: <T = AggregateNotificationPromise>() => T;
}

export interface NotificationConnectionSubscription
  extends Promise<AsyncIterator<NotificationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NotificationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNotificationSubscription>() => T;
}

export interface NotificationEdge {
  node: Notification;
  cursor: String;
}

export interface NotificationEdgePromise
  extends Promise<NotificationEdge>,
    Fragmentable {
  node: <T = NotificationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NotificationEdgeSubscription
  extends Promise<AsyncIterator<NotificationEdge>>,
    Fragmentable {
  node: <T = NotificationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNotification {
  count: Int;
}

export interface AggregateNotificationPromise
  extends Promise<AggregateNotification>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNotificationSubscription
  extends Promise<AsyncIterator<AggregateNotification>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SectionConnection {
  pageInfo: PageInfo;
  edges: SectionEdge[];
}

export interface SectionConnectionPromise
  extends Promise<SectionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SectionEdge>>() => T;
  aggregate: <T = AggregateSectionPromise>() => T;
}

export interface SectionConnectionSubscription
  extends Promise<AsyncIterator<SectionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SectionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSectionSubscription>() => T;
}

export interface SectionEdge {
  node: Section;
  cursor: String;
}

export interface SectionEdgePromise extends Promise<SectionEdge>, Fragmentable {
  node: <T = SectionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SectionEdgeSubscription
  extends Promise<AsyncIterator<SectionEdge>>,
    Fragmentable {
  node: <T = SectionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSection {
  count: Int;
}

export interface AggregateSectionPromise
  extends Promise<AggregateSection>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSectionSubscription
  extends Promise<AsyncIterator<AggregateSection>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TestimonialConnection {
  pageInfo: PageInfo;
  edges: TestimonialEdge[];
}

export interface TestimonialConnectionPromise
  extends Promise<TestimonialConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TestimonialEdge>>() => T;
  aggregate: <T = AggregateTestimonialPromise>() => T;
}

export interface TestimonialConnectionSubscription
  extends Promise<AsyncIterator<TestimonialConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TestimonialEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTestimonialSubscription>() => T;
}

export interface TestimonialEdge {
  node: Testimonial;
  cursor: String;
}

export interface TestimonialEdgePromise
  extends Promise<TestimonialEdge>,
    Fragmentable {
  node: <T = TestimonialPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TestimonialEdgeSubscription
  extends Promise<AsyncIterator<TestimonialEdge>>,
    Fragmentable {
  node: <T = TestimonialSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTestimonial {
  count: Int;
}

export interface AggregateTestimonialPromise
  extends Promise<AggregateTestimonial>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTestimonialSubscription
  extends Promise<AsyncIterator<AggregateTestimonial>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface GallerySubscriptionPayload {
  mutation: MutationType;
  node: Gallery;
  updatedFields: String[];
  previousValues: GalleryPreviousValues;
}

export interface GallerySubscriptionPayloadPromise
  extends Promise<GallerySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GalleryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GalleryPreviousValuesPromise>() => T;
}

export interface GallerySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GallerySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GallerySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GalleryPreviousValuesSubscription>() => T;
}

export interface GalleryPreviousValues {
  id: ID_Output;
  summary?: String;
}

export interface GalleryPreviousValuesPromise
  extends Promise<GalleryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
}

export interface GalleryPreviousValuesSubscription
  extends Promise<AsyncIterator<GalleryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  summary: () => Promise<AsyncIterator<String>>;
}

export interface GalleryImageSubscriptionPayload {
  mutation: MutationType;
  node: GalleryImage;
  updatedFields: String[];
  previousValues: GalleryImagePreviousValues;
}

export interface GalleryImageSubscriptionPayloadPromise
  extends Promise<GalleryImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GalleryImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GalleryImagePreviousValuesPromise>() => T;
}

export interface GalleryImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GalleryImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GalleryImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GalleryImagePreviousValuesSubscription>() => T;
}

export interface GalleryImagePreviousValues {
  id: ID_Output;
  img: String;
  title?: String;
}

export interface GalleryImagePreviousValuesPromise
  extends Promise<GalleryImagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  img: () => Promise<String>;
  title: () => Promise<String>;
}

export interface GalleryImagePreviousValuesSubscription
  extends Promise<AsyncIterator<GalleryImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  img: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface GameSubscriptionPayload {
  mutation: MutationType;
  node: Game;
  updatedFields: String[];
  previousValues: GamePreviousValues;
}

export interface GameSubscriptionPayloadPromise
  extends Promise<GameSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GamePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GamePreviousValuesPromise>() => T;
}

export interface GameSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GameSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GameSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GamePreviousValuesSubscription>() => T;
}

export interface GamePreviousValues {
  id: ID_Output;
  name: String;
  keywords: String[];
  img?: String;
  backgroundImg?: String;
  summary?: String;
  location?: String;
  showreel?: String;
  type?: String;
  createdAt: DateTimeOutput;
}

export interface GamePreviousValuesPromise
  extends Promise<GamePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  keywords: () => Promise<String[]>;
  img: () => Promise<String>;
  backgroundImg: () => Promise<String>;
  summary: () => Promise<String>;
  location: () => Promise<String>;
  showreel: () => Promise<String>;
  type: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface GamePreviousValuesSubscription
  extends Promise<AsyncIterator<GamePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  keywords: () => Promise<AsyncIterator<String[]>>;
  img: () => Promise<AsyncIterator<String>>;
  backgroundImg: () => Promise<AsyncIterator<String>>;
  summary: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  showreel: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NotableProjectsSubscriptionPayload {
  mutation: MutationType;
  node: NotableProjects;
  updatedFields: String[];
  previousValues: NotableProjectsPreviousValues;
}

export interface NotableProjectsSubscriptionPayloadPromise
  extends Promise<NotableProjectsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotableProjectsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotableProjectsPreviousValuesPromise>() => T;
}

export interface NotableProjectsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NotableProjectsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NotableProjectsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotableProjectsPreviousValuesSubscription>() => T;
}

export interface NotableProjectsPreviousValues {
  id: ID_Output;
  summary?: String;
  image?: String;
  name?: String;
}

export interface NotableProjectsPreviousValuesPromise
  extends Promise<NotableProjectsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
}

export interface NotableProjectsPreviousValuesSubscription
  extends Promise<AsyncIterator<NotableProjectsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  summary: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface NotificationSubscriptionPayload {
  mutation: MutationType;
  node: Notification;
  updatedFields: String[];
  previousValues: NotificationPreviousValues;
}

export interface NotificationSubscriptionPayloadPromise
  extends Promise<NotificationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotificationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotificationPreviousValuesPromise>() => T;
}

export interface NotificationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NotificationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NotificationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotificationPreviousValuesSubscription>() => T;
}

export interface NotificationPreviousValues {
  id: ID_Output;
  title: String;
  message: String;
  discarded?: Boolean;
  linkTo?: String;
  icon: String;
  createdAt: DateTimeOutput;
}

export interface NotificationPreviousValuesPromise
  extends Promise<NotificationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  message: () => Promise<String>;
  discarded: () => Promise<Boolean>;
  linkTo: () => Promise<String>;
  icon: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface NotificationPreviousValuesSubscription
  extends Promise<AsyncIterator<NotificationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  message: () => Promise<AsyncIterator<String>>;
  discarded: () => Promise<AsyncIterator<Boolean>>;
  linkTo: () => Promise<AsyncIterator<String>>;
  icon: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SectionSubscriptionPayload {
  mutation: MutationType;
  node: Section;
  updatedFields: String[];
  previousValues: SectionPreviousValues;
}

export interface SectionSubscriptionPayloadPromise
  extends Promise<SectionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SectionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SectionPreviousValuesPromise>() => T;
}

export interface SectionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SectionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SectionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SectionPreviousValuesSubscription>() => T;
}

export interface SectionPreviousValues {
  id: ID_Output;
  title?: String;
  summary?: String;
  showreel?: String;
  type?: String;
}

export interface SectionPreviousValuesPromise
  extends Promise<SectionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  summary: () => Promise<String>;
  showreel: () => Promise<String>;
  type: () => Promise<String>;
}

export interface SectionPreviousValuesSubscription
  extends Promise<AsyncIterator<SectionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  summary: () => Promise<AsyncIterator<String>>;
  showreel: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface TestimonialSubscriptionPayload {
  mutation: MutationType;
  node: Testimonial;
  updatedFields: String[];
  previousValues: TestimonialPreviousValues;
}

export interface TestimonialSubscriptionPayloadPromise
  extends Promise<TestimonialSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TestimonialPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TestimonialPreviousValuesPromise>() => T;
}

export interface TestimonialSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TestimonialSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TestimonialSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TestimonialPreviousValuesSubscription>() => T;
}

export interface TestimonialPreviousValues {
  id: ID_Output;
  summary?: String;
  image?: String;
  name?: String;
  status?: Boolean;
}

export interface TestimonialPreviousValuesPromise
  extends Promise<TestimonialPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  summary: () => Promise<String>;
  image: () => Promise<String>;
  name: () => Promise<String>;
  status: () => Promise<Boolean>;
}

export interface TestimonialPreviousValuesSubscription
  extends Promise<AsyncIterator<TestimonialPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  summary: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  resetToken?: String;
  password: String;
  keywords: String[];
  profileImg?: String;
  profileImgStyle?: String;
  profileBG?: String;
  profileBGStyle?: String;
  autosave?: Boolean;
  summary?: String;
  location?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  resetToken: () => Promise<String>;
  password: () => Promise<String>;
  keywords: () => Promise<String[]>;
  profileImg: () => Promise<String>;
  profileImgStyle: () => Promise<String>;
  profileBG: () => Promise<String>;
  profileBGStyle: () => Promise<String>;
  autosave: () => Promise<Boolean>;
  summary: () => Promise<String>;
  location: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  keywords: () => Promise<AsyncIterator<String[]>>;
  profileImg: () => Promise<AsyncIterator<String>>;
  profileImgStyle: () => Promise<AsyncIterator<String>>;
  profileBG: () => Promise<AsyncIterator<String>>;
  profileBGStyle: () => Promise<AsyncIterator<String>>;
  autosave: () => Promise<AsyncIterator<Boolean>>;
  summary: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Notification",
    embedded: false
  },
  {
    name: "Game",
    embedded: false
  },
  {
    name: "NotableProjects",
    embedded: false
  },
  {
    name: "Section",
    embedded: false
  },
  {
    name: "Testimonial",
    embedded: false
  },
  {
    name: "Gallery",
    embedded: false
  },
  {
    name: "GalleryImage",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
