enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}

type Mutation {
  post(url: String!, description: String!): Link!
  signup(email: String!, password: String!, name: String!): AuthPayload
  passwordForgot(email: String!): Boolean!
  createNotification(message: String!): Boolean!
  passwordReset(password: String!, token: String!): Boolean!
  login(email: String!, password: String!): AuthPayload
  updateUser(
    name: String!
    summary: String
    profileBG: String
    sections: [SectionInput]
  ): User
  updateSection(id: String!, section: SectionInput): Section
  vote(linkId: ID!): Vote
}

type Query {
  profile: User!
  getNotifications: [Notification!]
  getSections: [Section!]
}

type Feed {
  links: [Link!]!
  count: Int!
}

input SectionInput {
  summary: String
  gallery: GalleryInput
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  resetToken: String
  email: String!
  links: [Link!]!
  keywords: [String]
  profileImg: String
  profileBG: String
  summary: String
  location: String
  sections: [Section!]
  notifications: [Notification!]!
}

type Notification {
  id: ID!
  title: String!
  message: String!
  linkTo: String
  icon: String!
  discarded: Boolean
  createdAt: String
  user: User!
}

type Section {
  id: ID!
  summary: String
  gallery: Gallery
  user: User!
}

type Gallery {
  id: ID!
  summary: String
  images: [String]
}

input GalleryInput {
  summary: String
  images: [String]
}

type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  createdAt: String
  votes: [Vote!]!
}
